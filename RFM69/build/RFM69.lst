ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"RFM69.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PrintStruct,"ax",%progbits
  18              		.align	1
  19              		.global	PrintStruct
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	PrintStruct:
  27              	.LFB126:
  28              		.file 1 "Src/RFM69.c"
   1:Src/RFM69.c   **** // **********************************************************************************
   2:Src/RFM69.c   **** // Driver definition for HopeRF RFM69W/RFM69HW/RFM69CW/RFM69HCW, Semtech
   3:Src/RFM69.c   **** // SX1231/1231H
   4:Src/RFM69.c   **** // **********************************************************************************
   5:Src/RFM69.c   **** // Copyright Felix Rusu (2014), felix@lowpowerlab.com
   6:Src/RFM69.c   **** // http://lowpowerlab.com/
   7:Src/RFM69.c   **** // **********************************************************************************
   8:Src/RFM69.c   **** // License
   9:Src/RFM69.c   **** // **********************************************************************************
  10:Src/RFM69.c   **** // This program is free software; you can redistribute it
  11:Src/RFM69.c   **** // and/or modify it under the terms of the GNU General
  12:Src/RFM69.c   **** // Public License as published by the Free Software
  13:Src/RFM69.c   **** // Foundation; either version 3 of the License, or
  14:Src/RFM69.c   **** // (at your option) any later version.
  15:Src/RFM69.c   **** //
  16:Src/RFM69.c   **** // This program is distributed in the hope that it will
  17:Src/RFM69.c   **** // be useful, but WITHOUT ANY WARRANTY; without even the
  18:Src/RFM69.c   **** // implied warranty of MERCHANTABILITY or FITNESS FOR A
  19:Src/RFM69.c   **** // PARTICULAR PURPOSE. See the GNU General Public
  20:Src/RFM69.c   **** // License for more details.
  21:Src/RFM69.c   **** //
  22:Src/RFM69.c   **** // You should have received a copy of the GNU General
  23:Src/RFM69.c   **** // Public License along with this program.
  24:Src/RFM69.c   **** // If not, see <http://www.gnu.org/licenses/>.
  25:Src/RFM69.c   **** //
  26:Src/RFM69.c   **** // Licence can be viewed at
  27:Src/RFM69.c   **** // http://www.gnu.org/licenses/gpl-3.0.txt
  28:Src/RFM69.c   **** //
  29:Src/RFM69.c   **** // Please maintain this license information along with authorship
  30:Src/RFM69.c   **** // and copyright notices in any redistribution of this code
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 2


  31:Src/RFM69.c   **** // **********************************************************************************
  32:Src/RFM69.c   **** #include <RFM69.h>
  33:Src/RFM69.c   **** #include <RFM69registers.h>
  34:Src/RFM69.c   **** 
  35:Src/RFM69.c   **** #include <inttypes.h>
  36:Src/RFM69.c   **** #include <stdbool.h>
  37:Src/RFM69.c   **** #include <stdint.h>
  38:Src/RFM69.c   **** 
  39:Src/RFM69.c   **** #include "RFM69_externs.h"
  40:Src/RFM69.c   **** #include "spi.h"
  41:Src/RFM69.c   **** #include "usart.h"
  42:Src/RFM69.c   **** 
  43:Src/RFM69.c   **** #define HIGH 1
  44:Src/RFM69.c   **** #define LOW 0
  45:Src/RFM69.c   **** 
  46:Src/RFM69.c   **** uint8_t data[RF69_MAX_DATA_LEN]; // recv/xmit buf, including header & crc bytes
  47:Src/RFM69.c   **** uint8_t datalen;
  48:Src/RFM69.c   **** uint8_t senderID;
  49:Src/RFM69.c   **** uint8_t targetID;                // should match _address
  50:Src/RFM69.c   **** uint8_t payloadLen;
  51:Src/RFM69.c   **** uint8_t ACK_Requested;
  52:Src/RFM69.c   **** uint8_t ACK_RECEIVED;           // should be polled immediately after sending a packet with ACK req
  53:Src/RFM69.c   **** uint8_t _mode = RF69_MODE_STANDBY;
  54:Src/RFM69.c   **** int16_t rssi;                   // most accurate RSSI during reception (closest to the reception)
  55:Src/RFM69.c   **** 
  56:Src/RFM69.c   **** uint8_t _address;
  57:Src/RFM69.c   **** uint8_t _powerLevel = 31;
  58:Src/RFM69.c   **** bool _promiscuousMode = false;
  59:Src/RFM69.c   **** 
  60:Src/RFM69.c   **** //#define JEECOMPAT
  61:Src/RFM69.c   **** 
  62:Src/RFM69.c   **** char log_buffer[150];
  63:Src/RFM69.c   **** #define RFM69_DATA(x) data[x]
  64:Src/RFM69.c   **** 
  65:Src/RFM69.c   **** // for the STM32, simple decoding of radio payloads into structs must hapen in 4-byte block.
  66:Src/RFM69.c   **** // Valid types are: Long, Unsigned Long, and Float.
  67:Src/RFM69.c   **** // https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-size
  68:Src/RFM69.c   **** typedef struct {
  69:Src/RFM69.c   ****   uint32_t nodeId;  // store this nodeId
  70:Src/RFM69.c   ****   uint32_t uptime; // uptime in ms
  71:Src/RFM69.c   ****   // float temp;      // temperature maybe?
  72:Src/RFM69.c   **** } dataSTR;
  73:Src/RFM69.c   **** dataSTR theData;
  74:Src/RFM69.c   **** //
  75:Src/RFM69.c   **** void PrintStruct(void) {
  29              		.loc 1 75 24 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  76:Src/RFM69.c   ****   if (datalen != sizeof(dataSTR)) {
  33              		.loc 1 76 3 view .LVU1
  75:Src/RFM69.c   ****   if (datalen != sizeof(dataSTR)) {
  34              		.loc 1 75 24 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 3


  39              		.cfi_offset 14, -4
  40              		.loc 1 76 15 view .LVU3
  41 0002 0F4B     		ldr	r3, .L4
  42              		.loc 1 76 6 view .LVU4
  43 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  44 0006 082B     		cmp	r3, #8
  45 0008 04D0     		beq	.L2
  77:Src/RFM69.c   ****     debug_printf("Invalid payload received, not matching data struct!\r\n");
  46              		.loc 1 77 5 is_stmt 1 view .LVU5
  47 000a 0E48     		ldr	r0, .L4+4
  48              	.L3:
  78:Src/RFM69.c   ****     }
  79:Src/RFM69.c   ****   else {
  80:Src/RFM69.c   ****     theData = *(dataSTR *)data;
  81:Src/RFM69.c   ****     sprintf(log_buffer, " nodeId=%d\r\n", theData.nodeId);
  82:Src/RFM69.c   ****     debug_printf(log_buffer);
  83:Src/RFM69.c   ****     sprintf(log_buffer, " uptime=%d\r\n", theData.uptime);
  84:Src/RFM69.c   ****     debug_printf(log_buffer);
  85:Src/RFM69.c   ****     //sprintf(log_buffer, " size of the struct=%d\r\n", sizeof(PayloadSTR));
  86:Src/RFM69.c   ****     //debug_printf(log_buffer); // 12
  87:Src/RFM69.c   ****   }
  88:Src/RFM69.c   **** }
  49              		.loc 1 88 1 is_stmt 0 view .LVU6
  50 000c BDE81040 		pop	{r4, lr}
  51              	.LCFI1:
  52              		.cfi_remember_state
  53              		.cfi_restore 14
  54              		.cfi_restore 4
  55              		.cfi_def_cfa_offset 0
  84:Src/RFM69.c   ****     //sprintf(log_buffer, " size of the struct=%d\r\n", sizeof(PayloadSTR));
  56              		.loc 1 84 5 view .LVU7
  57 0010 FFF7FEBF 		b	debug_printf
  58              	.LVL0:
  59              	.L2:
  60              	.LCFI2:
  61              		.cfi_restore_state
  80:Src/RFM69.c   ****     sprintf(log_buffer, " nodeId=%d\r\n", theData.nodeId);
  62              		.loc 1 80 5 is_stmt 1 view .LVU8
  80:Src/RFM69.c   ****     sprintf(log_buffer, " nodeId=%d\r\n", theData.nodeId);
  63              		.loc 1 80 13 is_stmt 0 view .LVU9
  64 0014 0C4A     		ldr	r2, .L4+8
  65 0016 0D4C     		ldr	r4, .L4+12
  66 0018 1068     		ldr	r0, [r2]	@ unaligned
  67 001a 5168     		ldr	r1, [r2, #4]	@ unaligned
  68 001c 2346     		mov	r3, r4
  69 001e 03C3     		stmia	r3!, {r0, r1}
  81:Src/RFM69.c   ****     debug_printf(log_buffer);
  70              		.loc 1 81 5 is_stmt 1 view .LVU10
  71 0020 0246     		mov	r2, r0
  72 0022 0B49     		ldr	r1, .L4+16
  73 0024 0B48     		ldr	r0, .L4+20
  74 0026 FFF7FEFF 		bl	sprintf
  75              	.LVL1:
  82:Src/RFM69.c   ****     sprintf(log_buffer, " uptime=%d\r\n", theData.uptime);
  76              		.loc 1 82 5 view .LVU11
  77 002a 0A48     		ldr	r0, .L4+20
  78 002c FFF7FEFF 		bl	debug_printf
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 4


  79              	.LVL2:
  83:Src/RFM69.c   ****     debug_printf(log_buffer);
  80              		.loc 1 83 5 view .LVU12
  81 0030 6268     		ldr	r2, [r4, #4]
  82 0032 0949     		ldr	r1, .L4+24
  83 0034 0748     		ldr	r0, .L4+20
  84 0036 FFF7FEFF 		bl	sprintf
  85              	.LVL3:
  84:Src/RFM69.c   ****     //sprintf(log_buffer, " size of the struct=%d\r\n", sizeof(PayloadSTR));
  86              		.loc 1 84 5 view .LVU13
  87 003a 0648     		ldr	r0, .L4+20
  88 003c E6E7     		b	.L3
  89              	.L5:
  90 003e 00BF     		.align	2
  91              	.L4:
  92 0040 00000000 		.word	datalen
  93 0044 00000000 		.word	.LC0
  94 0048 00000000 		.word	data
  95 004c 00000000 		.word	theData
  96 0050 36000000 		.word	.LC1
  97 0054 00000000 		.word	log_buffer
  98 0058 43000000 		.word	.LC2
  99              		.cfi_endproc
 100              	.LFE126:
 102              		.section	.text.PrintByteByByte,"ax",%progbits
 103              		.align	1
 104              		.global	PrintByteByByte
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	PrintByteByByte:
 111              	.LFB127:
  89:Src/RFM69.c   **** 
  90:Src/RFM69.c   **** 
  91:Src/RFM69.c   **** // if the sending device is setup to send data structures NOT multiples of 4-bytes,
  92:Src/RFM69.c   **** // this is a manual method for decoding each byte into the relevant datatypes
  93:Src/RFM69.c   **** uint16_t firstdata = 0;
  94:Src/RFM69.c   **** uint32_t seconddata = 0;
  95:Src/RFM69.c   **** void PrintByteByByte(void) {
 112              		.loc 1 95 28 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
  96:Src/RFM69.c   ****   firstdata = RFM69_DATA(0) + (RFM69_DATA(1) << 8);
 116              		.loc 1 96 3 view .LVU15
  95:Src/RFM69.c   ****   firstdata = RFM69_DATA(0) + (RFM69_DATA(1) << 8);
 117              		.loc 1 95 28 is_stmt 0 view .LVU16
 118 0000 38B5     		push	{r3, r4, r5, lr}
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 3, -16
 122              		.cfi_offset 4, -12
 123              		.cfi_offset 5, -8
 124              		.cfi_offset 14, -4
 125              		.loc 1 96 32 view .LVU17
 126 0002 1349     		ldr	r1, .L7
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 5


  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
  98:Src/RFM69.c   ****   sprintf(log_buffer, "first_data: %d\r\n", firstdata);
 127              		.loc 1 98 3 view .LVU18
 128 0004 134C     		ldr	r4, .L7+4
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 129              		.loc 1 96 32 view .LVU19
 130 0006 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 131              		.loc 1 96 15 view .LVU20
 132 0008 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 133              		.loc 1 97 33 view .LVU21
 134 000a C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 135              		.loc 1 97 14 view .LVU22
 136 000c 124D     		ldr	r5, .L7+8
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 137              		.loc 1 96 29 view .LVU23
 138 000e 02EB0322 		add	r2, r2, r3, lsl #8
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 139              		.loc 1 96 13 view .LVU24
 140 0012 124B     		ldr	r3, .L7+12
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 141              		.loc 1 96 29 view .LVU25
 142 0014 92B2     		uxth	r2, r2
  96:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 143              		.loc 1 96 13 view .LVU26
 144 0016 1A80     		strh	r2, [r3]	@ movhi
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 145              		.loc 1 97 3 is_stmt 1 view .LVU27
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 146              		.loc 1 97 16 is_stmt 0 view .LVU28
 147 0018 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 148              		.loc 1 97 30 view .LVU29
 149 001a 03EB0023 		add	r3, r3, r0, lsl #8
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 150              		.loc 1 97 56 view .LVU30
 151 001e 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 152              		.loc 1 97 80 view .LVU31
 153 0020 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 154              		.loc 1 97 53 view .LVU32
 155 0022 03EB0043 		add	r3, r3, r0, lsl #16
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 156              		.loc 1 97 77 view .LVU33
 157 0026 03EB0163 		add	r3, r3, r1, lsl #24
 158              		.loc 1 98 3 view .LVU34
 159 002a 2046     		mov	r0, r4
 160 002c 0C49     		ldr	r1, .L7+16
  97:Src/RFM69.c   ****   seconddata = RFM69_DATA(2) + (RFM69_DATA(3) << 8) + (RFM69_DATA(4) << 16) + (RFM69_DATA(5) << 24)
 161              		.loc 1 97 14 view .LVU35
 162 002e 2B60     		str	r3, [r5]
 163              		.loc 1 98 3 is_stmt 1 view .LVU36
 164 0030 FFF7FEFF 		bl	sprintf
 165              	.LVL4:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 6


  99:Src/RFM69.c   ****   debug_printf(log_buffer);
 166              		.loc 1 99 3 view .LVU37
 167 0034 2046     		mov	r0, r4
 168 0036 FFF7FEFF 		bl	debug_printf
 169              	.LVL5:
 100:Src/RFM69.c   ****   sprintf(log_buffer, "second_data: %d\r\n", seconddata);
 170              		.loc 1 100 3 view .LVU38
 171 003a 2A68     		ldr	r2, [r5]
 172 003c 0949     		ldr	r1, .L7+20
 173 003e 2046     		mov	r0, r4
 174 0040 FFF7FEFF 		bl	sprintf
 175              	.LVL6:
 101:Src/RFM69.c   ****   debug_printf(log_buffer);
 176              		.loc 1 101 3 view .LVU39
 177 0044 2046     		mov	r0, r4
 102:Src/RFM69.c   **** }
 178              		.loc 1 102 1 is_stmt 0 view .LVU40
 179 0046 BDE83840 		pop	{r3, r4, r5, lr}
 180              	.LCFI4:
 181              		.cfi_restore 14
 182              		.cfi_restore 5
 183              		.cfi_restore 4
 184              		.cfi_restore 3
 185              		.cfi_def_cfa_offset 0
 101:Src/RFM69.c   ****   debug_printf(log_buffer);
 186              		.loc 1 101 3 view .LVU41
 187 004a FFF7FEBF 		b	debug_printf
 188              	.LVL7:
 189              	.L8:
 190 004e 00BF     		.align	2
 191              	.L7:
 192 0050 00000000 		.word	data
 193 0054 00000000 		.word	log_buffer
 194 0058 00000000 		.word	.LANCHOR1
 195 005c 00000000 		.word	.LANCHOR0
 196 0060 00000000 		.word	.LC3
 197 0064 11000000 		.word	.LC4
 198              		.cfi_endproc
 199              	.LFE127:
 201              		.section	.text.PrintRawBytes,"ax",%progbits
 202              		.align	1
 203              		.global	PrintRawBytes
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
 209              	PrintRawBytes:
 210              	.LFB128:
 103:Src/RFM69.c   **** 
 104:Src/RFM69.c   **** 
 105:Src/RFM69.c   **** // printing the raw bytes.
 106:Src/RFM69.c   **** void PrintRawBytes(void) {
 211              		.loc 1 106 26 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 107:Src/RFM69.c   ****   for (int i = 0; i < datalen; i++) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 7


 215              		.loc 1 107 3 view .LVU43
 216              	.LBB2:
 217              		.loc 1 107 8 view .LVU44
 218              	.LVL8:
 219              		.loc 1 107 8 is_stmt 0 view .LVU45
 220              	.LBE2:
 106:Src/RFM69.c   ****   for (int i = 0; i < datalen; i++) {
 221              		.loc 1 106 26 view .LVU46
 222 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 223              	.LCFI5:
 224              		.cfi_def_cfa_offset 24
 225              		.cfi_offset 4, -24
 226              		.cfi_offset 5, -20
 227              		.cfi_offset 6, -16
 228              		.cfi_offset 7, -12
 229              		.cfi_offset 8, -8
 230              		.cfi_offset 14, -4
 231 0004 0B4D     		ldr	r5, .L12
 232              	.LBB3:
 233              		.loc 1 107 21 view .LVU47
 234 0006 0C4F     		ldr	r7, .L12+4
 108:Src/RFM69.c   ****     sprintf(log_buffer, "Byte%d Value: %d\r\n", i, RFM69_DATA(i));
 235              		.loc 1 108 5 view .LVU48
 236 0008 DFF83480 		ldr	r8, .L12+12
 237 000c 0B4E     		ldr	r6, .L12+8
 107:Src/RFM69.c   ****   for (int i = 0; i < datalen; i++) {
 238              		.loc 1 107 12 view .LVU49
 239 000e 0024     		movs	r4, #0
 240              	.LVL9:
 241              	.L10:
 107:Src/RFM69.c   ****   for (int i = 0; i < datalen; i++) {
 242              		.loc 1 107 21 discriminator 1 view .LVU50
 243 0010 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 107:Src/RFM69.c   ****   for (int i = 0; i < datalen; i++) {
 244              		.loc 1 107 3 discriminator 1 view .LVU51
 245 0012 A342     		cmp	r3, r4
 246 0014 01DC     		bgt	.L11
 247              	.LBE3:
 109:Src/RFM69.c   ****     debug_printf(log_buffer);
 110:Src/RFM69.c   ****   }
 111:Src/RFM69.c   ****   //
 112:Src/RFM69.c   ****   //sprintf(log_buffer, "PayloadLen = %d\r\n", payloadLen);
 113:Src/RFM69.c   ****   //debug_printf(log_buffer);
 114:Src/RFM69.c   ****   //sprintf(log_buffer, "datalen %d\r\n", datalen);
 115:Src/RFM69.c   ****   //debug_printf(log_buffer);
 116:Src/RFM69.c   **** }
 248              		.loc 1 116 1 view .LVU52
 249 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 250              	.LVL10:
 251              	.L11:
 252              	.LBB4:
 108:Src/RFM69.c   ****     sprintf(log_buffer, "Byte%d Value: %d\r\n", i, RFM69_DATA(i));
 253              		.loc 1 108 5 is_stmt 1 discriminator 3 view .LVU53
 254 001a 2246     		mov	r2, r4
 255 001c 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 256 0020 4146     		mov	r1, r8
 257 0022 3046     		mov	r0, r6
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 8


 258 0024 FFF7FEFF 		bl	sprintf
 259              	.LVL11:
 109:Src/RFM69.c   ****     debug_printf(log_buffer);
 260              		.loc 1 109 5 discriminator 3 view .LVU54
 261 0028 3046     		mov	r0, r6
 262 002a FFF7FEFF 		bl	debug_printf
 263              	.LVL12:
 107:Src/RFM69.c   ****     sprintf(log_buffer, "Byte%d Value: %d\r\n", i, RFM69_DATA(i));
 264              		.loc 1 107 33 is_stmt 0 discriminator 3 view .LVU55
 265 002e 0134     		adds	r4, r4, #1
 266              	.LVL13:
 107:Src/RFM69.c   ****     sprintf(log_buffer, "Byte%d Value: %d\r\n", i, RFM69_DATA(i));
 267              		.loc 1 107 33 discriminator 3 view .LVU56
 268 0030 EEE7     		b	.L10
 269              	.L13:
 270 0032 00BF     		.align	2
 271              	.L12:
 272 0034 00000000 		.word	data
 273 0038 00000000 		.word	datalen
 274 003c 00000000 		.word	log_buffer
 275 0040 00000000 		.word	.LC5
 276              	.LBE4:
 277              		.cfi_endproc
 278              	.LFE128:
 280              		.section	.text.RFM69_ACKRequested,"ax",%progbits
 281              		.align	1
 282              		.global	RFM69_ACKRequested
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu fpv4-sp-d16
 288              	RFM69_ACKRequested:
 289              	.LFB141:
 117:Src/RFM69.c   **** 
 118:Src/RFM69.c   **** bool RFM69_initialize(uint16_t freqBand, uint8_t nodeID, uint16_t networkID) {
 119:Src/RFM69.c   ****   const uint8_t CONFIG[][2] = {
 120:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 121:Src/RFM69.c   ****           /* 0x02 */ { REG_DATAMODUL, RF_DATAMODUL_DATAMODE_PACKET | RF_DATAMODUL_MODULATIONTYPE_FS
 122:Src/RFM69.c   **** 
 123:Src/RFM69.c   ****           #ifdef JEECOMPAT
 124:Src/RFM69.c   ****           /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_49261}, // default: 4.8 KBPS
 125:Src/RFM69.c   ****           /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_49261},
 126:Src/RFM69.c   ****           /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_90000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500
 127:Src/RFM69.c   ****           /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_90000},
 128:Src/RFM69.c   ****           #else
 129:Src/RFM69.c   ****           /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
 130:Src/RFM69.c   ****           /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
 131:Src/RFM69.c   ****           /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500
 132:Src/RFM69.c   ****           /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},
 133:Src/RFM69.c   ****           #endif
 134:Src/RFM69.c   ****           // set frequency in MHz.. see registers.h for other frequencies.
 135:Src/RFM69.c   **** 
 136:Src/RFM69.c   ****           /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF
 137:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 138:Src/RFM69.c   ****           /* 0x09 */ { REG_FRFLSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFLSB_315 : (freqBand==RF
 139:Src/RFM69.c   **** 
 140:Src/RFM69.c   **** 
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 9


 141:Src/RFM69.c   ****           // looks like PA1 and PA2 are not implemented on RFM69W, hence the max
 142:Src/RFM69.c   ****           // output power is 13dBm +17dBm and +20dBm are possible on RFM69HW +13dBm
 143:Src/RFM69.c   ****           // formula: Pout = -18 + OutputPower (with PA0 or PA1**) +17dBm formula:
 144:Src/RFM69.c   ****           // Pout = -14 + OutputPower (with PA1 and PA2)** +20dBm formula: Pout =
 145:Src/RFM69.c   ****           // -11 + OutputPower (with PA1 and PA2)** and high power PA settings
 146:Src/RFM69.c   ****           // (section 3.3.7 in datasheet)
 147:Src/RFM69.c   ****           ///* 0x11 */ { REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF |
 148:Src/RFM69.c   ****           /// RF_PALEVEL_PA2_OFF | RF_PALEVEL_OUTPUTPOWER_11111},
 149:Src/RFM69.c   ****           ///* 0x13 */ { REG_OCP, RF_OCP_ON | RF_OCP_TRIM_95 }, // over current
 150:Src/RFM69.c   ****           /// protection (default is 95mA)
 151:Src/RFM69.c   **** 
 152:Src/RFM69.c   ****           // RXBW defaults are { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 |
 153:Src/RFM69.c   ****           // RF_RXBW_EXP_5} (RxBw: 10.4KHz)
 154:Src/RFM69.c   ****           /* 0x19 */ {REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_2}, // (BitRate
 155:Src/RFM69.c   ****           // for BR-19200:
 156:Src/RFM69.c   ****           //* 0x19 */ { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_3 },
 157:Src/RFM69.c   ****           /* 0x25 */ {REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01}, // DIO0 is the only
 158:Src/RFM69.c   ****                                                                 // IRQ we're using
 159:Src/RFM69.c   ****           /* 0x26 */ {REG_DIOMAPPING2, RF_DIOMAPPING2_CLKOUT_OFF}, // DIO5 ClkOut
 160:Src/RFM69.c   ****                                                                    // disable for
 161:Src/RFM69.c   ****                                                                    // power saving
 162:Src/RFM69.c   ****           /* 0x28 */ {REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN}, // writing to this
 163:Src/RFM69.c   ****                                                                 // bit ensures that
 164:Src/RFM69.c   ****                                                                 // the FIFO & status
 165:Src/RFM69.c   ****                                                                 // flags are reset
 166:Src/RFM69.c   ****           /* 0x29 */ {REG_RSSITHRESH, 220}, // must be set to dBm = (-Sensitivity /
 167:Src/RFM69.c   ****                                             // 2), default is 0xE4 = 228 so -114dBm
 168:Src/RFM69.c   ****           ///* 0x2D */ { REG_PREAMBLELSB, RF_PREAMBLESIZE_LSB_VALUE } // default 3
 169:Src/RFM69.c   ****           /// preamble bytes 0xAAAAAA
 170:Src/RFM69.c   ****           /* 0x2E */
 171:Src/RFM69.c   **** 
 172:Src/RFM69.c   **** 
 173:Src/RFM69.c   ****            #ifdef JEECOMPAT
 174:Src/RFM69.c   ****            {REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_3 | RF_SYNC_TOL_0},
 175:Src/RFM69.c   ****            /* 0x2F */ { REG_SYNCVALUE1, 0xAA },
 176:Src/RFM69.c   ****            /* 0x30 */ { REG_SYNCVALUE2, 0x2D },
 177:Src/RFM69.c   ****            /* 0x31 */ { REG_SYNCVALUE3, networkID },
 178:Src/RFM69.c   ****            #else
 179:Src/RFM69.c   ****            {REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_2 | RF_SYNC_TOL_0},
 180:Src/RFM69.c   ****             /* 0x2F */ { REG_SYNCVALUE1, 0x2D },      // attempt to make this compatible with sync1
 181:Src/RFM69.c   ****             /* 0x30 */ { REG_SYNCVALUE2, networkID }, // NETWORK ID
 182:Src/RFM69.c   ****            #endif
 183:Src/RFM69.c   **** 
 184:Src/RFM69.c   **** 
 185:Src/RFM69.c   ****           /* 0x37 */
 186:Src/RFM69.c   ****           {REG_PACKETCONFIG1, RF_PACKET1_FORMAT_VARIABLE | RF_PACKET1_DCFREE_OFF |
 187:Src/RFM69.c   ****                                   RF_PACKET1_CRC_ON | RF_PACKET1_CRCAUTOCLEAR_ON |
 188:Src/RFM69.c   ****                                   RF_PACKET1_ADRSFILTERING_OFF},
 189:Src/RFM69.c   ****           /* 0x38 */ {REG_PAYLOADLENGTH, 66}, // in variable length mode: the max
 190:Src/RFM69.c   ****                                               // frame size, not used in TX
 191:Src/RFM69.c   ****           ///* 0x39 */ { REG_NODEADRS, nodeID }, // turned off because we're not
 192:Src/RFM69.c   ****           /// using address filtering
 193:Src/RFM69.c   ****           /* 0x3C */
 194:Src/RFM69.c   ****           {REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY |
 195:Src/RFM69.c   ****                                RF_FIFOTHRESH_VALUE}, // TX on FIFO not empty
 196:Src/RFM69.c   ****           /* 0x3D */
 197:Src/RFM69.c   ****           {REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PA
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 10


 198:Src/RFM69.c   ****           // RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON |
 199:Src/RFM69.c   ****           // RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA
 200:Src/RFM69.c   ****           // ramp-down time (bitrate dependent)
 201:Src/RFM69.c   ****           /* 0x6F */ {REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0}, // run DAGC continuously in RX mode
 202:Src/RFM69.c   ****                                        // Fading Margin Improvement, recommended
 203:Src/RFM69.c   ****                                        // default for AfcLowBetaOn=0
 204:Src/RFM69.c   ****       {255, 0}};
 205:Src/RFM69.c   ****   uint8_t i;
 206:Src/RFM69.c   **** 
 207:Src/RFM69.c   ****   RFM69_SetCSPin(HIGH);
 208:Src/RFM69.c   ****   /*Timeout_SetTimeout1(50);
 209:Src/RFM69.c   ****   do
 210:Src/RFM69.c   ****   {
 211:Src/RFM69.c   ****     RFM69_writeReg(REG_SYNCVALUE1, 0xAA);
 212:Src/RFM69.c   ****   }
 213:Src/RFM69.c   ****   while (RFM69_readReg(REG_SYNCVALUE1) != 0xaa && !Timeout_IsTimeout1());
 214:Src/RFM69.c   **** 
 215:Src/RFM69.c   ****   Timeout_SetTimeout1(50);
 216:Src/RFM69.c   ****   do
 217:Src/RFM69.c   ****   {
 218:Src/RFM69.c   ****     RFM69_writeReg(REG_SYNCVALUE1, 0x55);
 219:Src/RFM69.c   ****   }
 220:Src/RFM69.c   ****   while (RFM69_readReg(REG_SYNCVALUE1) != 0x55 && !Timeout_IsTimeout1());
 221:Src/RFM69.c   **** 
 222:Src/RFM69.c   **** */
 223:Src/RFM69.c   ****   // Encryption is persistent between resets and can trip you up during
 224:Src/RFM69.c   ****   // debugging. Disable it during initialization so we always start from a known
 225:Src/RFM69.c   ****   // state.
 226:Src/RFM69.c   ****   RFM69_encrypt(0);
 227:Src/RFM69.c   **** 
 228:Src/RFM69.c   ****   for (i = 0; CONFIG[i][0] != 255; i++) {
 229:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 230:Src/RFM69.c   ****   }
 231:Src/RFM69.c   **** 
 232:Src/RFM69.c   ****   // check written registers
 233:Src/RFM69.c   ****   for (i = 0; CONFIG[i][0] != 255; i++)
 234:Src/RFM69.c   ****   {
 235:Src/RFM69.c   **** 	  if(CONFIG[i][0] != REG_IRQFLAGS2)
 236:Src/RFM69.c   **** 	  {
 237:Src/RFM69.c   ****       if(RFM69_readReg(CONFIG[i][0]) != CONFIG[i][1]) {
 238:Src/RFM69.c   ****         return false;
 239:Src/RFM69.c   ****       }
 240:Src/RFM69.c   ****     }
 241:Src/RFM69.c   ****   }
 242:Src/RFM69.c   **** 
 243:Src/RFM69.c   ****   RFM69_setHighPower(ISRFM69HW); // called regardless if it's a RFM69W or RFM69HW
 244:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 245:Src/RFM69.c   ****   //HAL_Delay(50);
 246:Src/RFM69.c   ****   Timeout_SetTimeout1(50);
 247:Src/RFM69.c   ****   while (((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && !Timeout_IsTimeout1()
 248:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 249:Src/RFM69.c   ****     return false;
 250:Src/RFM69.c   ****   }
 251:Src/RFM69.c   **** 
 252:Src/RFM69.c   ****   _address = nodeID;
 253:Src/RFM69.c   ****   return true;
 254:Src/RFM69.c   **** }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 11


 255:Src/RFM69.c   **** 
 256:Src/RFM69.c   **** //internal function
 257:Src/RFM69.c   **** static void RFM69_sendFrame(uint8_t toAddress, const void *buffer, uint8_t size, bool requestACK, b
 258:Src/RFM69.c   **** 
 259:Src/RFM69.c   **** 
 260:Src/RFM69.c   **** // return the frequency (in Hz)
 261:Src/RFM69.c   **** uint32_t RFM69_getFrequency() {
 262:Src/RFM69.c   ****   return RF69_FSTEP * (((uint32_t)RFM69_readReg(REG_FRFMSB) << 16) +
 263:Src/RFM69.c   ****                        ((uint16_t)RFM69_readReg(REG_FRFMID) << 8) +
 264:Src/RFM69.c   ****                        RFM69_readReg(REG_FRFLSB));
 265:Src/RFM69.c   **** }
 266:Src/RFM69.c   **** 
 267:Src/RFM69.c   **** // set the frequency (in Hz)
 268:Src/RFM69.c   **** void RFM69_setFrequency(uint32_t freqHz) {
 269:Src/RFM69.c   ****   uint8_t oldMode = _mode;
 270:Src/RFM69.c   ****   if (oldMode == RF69_MODE_TX) {
 271:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 272:Src/RFM69.c   ****   }
 273:Src/RFM69.c   ****   freqHz /= RF69_FSTEP; // divide down by FSTEP to get FRF
 274:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMSB, freqHz >> 16);
 275:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMID, freqHz >> 8);
 276:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFLSB, freqHz);
 277:Src/RFM69.c   ****   if (oldMode == RF69_MODE_RX) {
 278:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_SYNTH);
 279:Src/RFM69.c   ****   }
 280:Src/RFM69.c   ****   RFM69_setMode(oldMode);
 281:Src/RFM69.c   **** }
 282:Src/RFM69.c   **** 
 283:Src/RFM69.c   **** void RFM69_setMode(uint8_t newMode)
 284:Src/RFM69.c   **** {
 285:Src/RFM69.c   ****   if (newMode == _mode)
 286:Src/RFM69.c   ****     return;
 287:Src/RFM69.c   **** 
 288:Src/RFM69.c   ****   switch (newMode) {
 289:Src/RFM69.c   ****     case RF69_MODE_TX:
 290:Src/RFM69.c   ****       RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 291:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 292:Src/RFM69.c   ****       /*readReg = RFM69_readReg(REG_OPMODE) & 0x1C;
 293:Src/RFM69.c   ****       if(readReg != RF_OPMODE_TRANSMITTER) {
 294:Src/RFM69.c   ****         Errors_SetError(ERROR_RFM69_REGNOTUPD);
 295:Src/RFM69.c   ****       }*/
 296:Src/RFM69.c   ****       if (ISRFM69HW) RFM69_setHighPowerRegs(true);
 297:Src/RFM69.c   ****       break;
 298:Src/RFM69.c   ****     case RF69_MODE_RX:
 299:Src/RFM69.c   ****       RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 300:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 301:Src/RFM69.c   ****       /*readReg = RFM69_readReg(REG_OPMODE) & 0x1C;
 302:Src/RFM69.c   ****       if(readReg != RF_OPMODE_RECEIVER) {
 303:Src/RFM69.c   ****         Errors_SetError(ERROR_RFM69_REGNOTUPD);
 304:Src/RFM69.c   ****       }*/
 305:Src/RFM69.c   ****       if (ISRFM69HW) RFM69_setHighPowerRegs(false);
 306:Src/RFM69.c   ****       break;
 307:Src/RFM69.c   ****     case RF69_MODE_SYNTH:
 308:Src/RFM69.c   ****       RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 309:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 310:Src/RFM69.c   ****       /*readReg = RFM69_readReg(REG_OPMODE) & 0x1C;
 311:Src/RFM69.c   ****       if(readReg != RF_OPMODE_SYNTHESIZER) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 12


 312:Src/RFM69.c   ****         Errors_SetError(ERROR_RFM69_REGNOTUPD);
 313:Src/RFM69.c   ****       }*/
 314:Src/RFM69.c   ****       break;
 315:Src/RFM69.c   ****     case RF69_MODE_STANDBY:
 316:Src/RFM69.c   ****       RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 317:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 318:Src/RFM69.c   ****       /*readReg = RFM69_readReg(REG_OPMODE) & 0x1C;
 319:Src/RFM69.c   ****       if(readReg != RF_OPMODE_STANDBY) {
 320:Src/RFM69.c   ****         Errors_SetError(ERROR_RFM69_REGNOTUPD);
 321:Src/RFM69.c   ****       }*/
 322:Src/RFM69.c   ****       break;
 323:Src/RFM69.c   ****     case RF69_MODE_SLEEP:
 324:Src/RFM69.c   ****       RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 325:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 326:Src/RFM69.c   ****       /*readReg = RFM69_readReg(REG_OPMODE) & 0x1C;
 327:Src/RFM69.c   ****       if(readReg != RF_OPMODE_SLEEP) {
 328:Src/RFM69.c   ****         Errors_SetError(ERROR_RFM69_REGNOTUPD);
 329:Src/RFM69.c   ****       }*/
 330:Src/RFM69.c   ****       break;
 331:Src/RFM69.c   ****     default:
 332:Src/RFM69.c   ****       return;
 333:Src/RFM69.c   ****   }
 334:Src/RFM69.c   **** 
 335:Src/RFM69.c   ****   // we are using packet mode, so this check is not really needed
 336:Src/RFM69.c   ****   // but waiting for mode ready is necessary when going from sleep because the FIFO may not be imme
 337:Src/RFM69.c   ****   while (_mode == RF69_MODE_SLEEP && (RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x0
 338:Src/RFM69.c   **** 
 339:Src/RFM69.c   ****   _mode = newMode;
 340:Src/RFM69.c   **** }
 341:Src/RFM69.c   **** 
 342:Src/RFM69.c   **** // put transceiver in sleep mode to save battery - to wake or resume receiving
 343:Src/RFM69.c   **** // just call RFM69_receiveDone()
 344:Src/RFM69.c   **** void RFM69_sleep() { RFM69_setMode(RF69_MODE_SLEEP); }
 345:Src/RFM69.c   **** 
 346:Src/RFM69.c   **** // set this node's address
 347:Src/RFM69.c   **** void RFM69_setAddress(uint8_t addr) {
 348:Src/RFM69.c   ****   _address = addr;
 349:Src/RFM69.c   ****   RFM69_writeReg(REG_NODEADRS, _address);
 350:Src/RFM69.c   **** }
 351:Src/RFM69.c   **** 
 352:Src/RFM69.c   **** // set this node's network id
 353:Src/RFM69.c   **** void RFM69_setNetwork(uint16_t networkID) {
 354:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF));
 355:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE2, (uint8_t)(networkID >> 8));
 356:Src/RFM69.c   **** }
 357:Src/RFM69.c   **** 
 358:Src/RFM69.c   **** // set *transmit/TX* output power: 0=min, 31=max
 359:Src/RFM69.c   **** // this results in a "weaker" transmitted signal, and directly results in a
 360:Src/RFM69.c   **** // lower RSSI at the receiver the power configurations are explained in the
 361:Src/RFM69.c   **** // SX1231H datasheet (Table 10 on p21; RegPaLevel p66):
 362:Src/RFM69.c   **** // http://www.semtech.com/images/datasheet/sx1231h.pdf valid powerLevel
 363:Src/RFM69.c   **** // parameter values are 0-31 and result in a directly proportional effect on the
 364:Src/RFM69.c   **** // output/transmission power this function implements 2 modes as follows:
 365:Src/RFM69.c   **** //       - for RFM69W the range is from 0-31 [-18dBm to 13dBm] (PA0 only on RFIO
 366:Src/RFM69.c   **** //       pin)
 367:Src/RFM69.c   **** //       - for RFM69HW the range is from 0-31 [5dBm to 20dBm]  (PA1 & PA2 on
 368:Src/RFM69.c   **** //       PA_BOOST pin & high Power PA settings - see section 3.3.7 in datasheet,
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 13


 369:Src/RFM69.c   **** //       p22)
 370:Src/RFM69.c   **** void RFM69_setPowerLevel(uint8_t powerLevel) {
 371:Src/RFM69.c   ****   _powerLevel = (powerLevel > 31 ? 31 : powerLevel);
 372:Src/RFM69.c   ****   if (ISRFM69HW) {
 373:Src/RFM69.c   ****     _powerLevel /= 2;
 374:Src/RFM69.c   ****   }
 375:Src/RFM69.c   ****   RFM69_writeReg(REG_PALEVEL,
 376:Src/RFM69.c   ****                  (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
 377:Src/RFM69.c   **** }
 378:Src/RFM69.c   **** 
 379:Src/RFM69.c   **** bool RFM69_canSend() {
 380:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && payloadLen == 0 &&
 381:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 382:Src/RFM69.c   ****                                           // detected assume channel activity
 383:Src/RFM69.c   ****   {
 384:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY);
 385:Src/RFM69.c   ****     return true;
 386:Src/RFM69.c   ****   }
 387:Src/RFM69.c   ****   return false;
 388:Src/RFM69.c   **** }
 389:Src/RFM69.c   **** 
 390:Src/RFM69.c   **** void RFM69_send(uint8_t toAddress, const void *buffer, uint8_t bufferSize,
 391:Src/RFM69.c   ****                 bool requestACK) {
 392:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 393:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 394:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 395:Src/RFM69.c   ****   // uint32_t now = millis();
 396:Src/RFM69.c   ****   while (!RFM69_canSend() /*&& millis() - now < RF69_CSMA_LIMIT_MS*/)
 397:Src/RFM69.c   ****     RFM69_receiveDone();
 398:Src/RFM69.c   ****   RFM69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
 399:Src/RFM69.c   **** }
 400:Src/RFM69.c   **** 
 401:Src/RFM69.c   **** // to increase the chance of getting a packet across, call this function instead
 402:Src/RFM69.c   **** // of send and it handles all the ACK requesting/retrying for you :) The only
 403:Src/RFM69.c   **** // twist is that you have to manually listen to ACK requests on the other side
 404:Src/RFM69.c   **** // and send back the ACKs The reason for the semi-automaton is that the lib is
 405:Src/RFM69.c   **** // interrupt driven and requires user action to read the received data and
 406:Src/RFM69.c   **** // decide what to do with it replies usually take only 5..8ms at 50kbps@915MHz
 407:Src/RFM69.c   **** bool RFM69_sendWithRetry(uint8_t toAddress, const void *buffer,
 408:Src/RFM69.c   ****                          uint8_t bufferSize, uint8_t retries,
 409:Src/RFM69.c   ****                          uint8_t retryWaitTime) {
 410:Src/RFM69.c   ****   for (uint8_t i = 0; i <= retries; i++) {
 411:Src/RFM69.c   ****     RFM69_send(toAddress, buffer, bufferSize, true);
 412:Src/RFM69.c   ****     Timeout_SetTimeout1(retryWaitTime);
 413:Src/RFM69.c   ****     while (!Timeout_IsTimeout1()) {
 414:Src/RFM69.c   ****       if (RFM69_ACKReceived(toAddress)) {
 415:Src/RFM69.c   ****         // Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
 416:Src/RFM69.c   ****         return true;
 417:Src/RFM69.c   ****       }
 418:Src/RFM69.c   ****     }
 419:Src/RFM69.c   ****     // Serial.print(" RETRY#"); Serial.println(i + 1);
 420:Src/RFM69.c   ****   }
 421:Src/RFM69.c   ****   return false;
 422:Src/RFM69.c   **** }
 423:Src/RFM69.c   **** 
 424:Src/RFM69.c   **** // should be polled immediately after sending a packet with ACK request
 425:Src/RFM69.c   **** bool RFM69_ACKReceived(uint8_t fromNodeID) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 14


 426:Src/RFM69.c   ****   if (RFM69_receiveDone())
 427:Src/RFM69.c   ****     return (senderID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) &&
 428:Src/RFM69.c   ****            ACK_RECEIVED;
 429:Src/RFM69.c   ****   return false;
 430:Src/RFM69.c   **** }
 431:Src/RFM69.c   **** 
 432:Src/RFM69.c   **** // check whether an ACK was requested in the last received packet
 433:Src/RFM69.c   **** // (non-broadcasted packet)
 434:Src/RFM69.c   **** bool RFM69_ACKRequested() {
 290              		.loc 1 434 27 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 435:Src/RFM69.c   ****   return ACK_Requested && (targetID != RF69_BROADCAST_ADDR);
 295              		.loc 1 435 3 view .LVU58
 296              		.loc 1 435 10 is_stmt 0 view .LVU59
 297 0000 044B     		ldr	r3, .L17
 298              		.loc 1 435 24 view .LVU60
 299 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 300 0004 20B1     		cbz	r0, .L15
 301              		.loc 1 435 37 discriminator 1 view .LVU61
 302 0006 044B     		ldr	r3, .L17+4
 303              		.loc 1 435 24 discriminator 1 view .LVU62
 304 0008 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 305 000a FF38     		subs	r0, r0, #255
 306 000c 18BF     		it	ne
 307 000e 0120     		movne	r0, #1
 308              	.L15:
 436:Src/RFM69.c   **** }
 309              		.loc 1 436 1 discriminator 6 view .LVU63
 310 0010 7047     		bx	lr
 311              	.L18:
 312 0012 00BF     		.align	2
 313              	.L17:
 314 0014 00000000 		.word	ACK_Requested
 315 0018 00000000 		.word	targetID
 316              		.cfi_endproc
 317              	.LFE141:
 319              		.section	.text.RFM69_promiscuous,"ax",%progbits
 320              		.align	1
 321              		.global	RFM69_promiscuous
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	RFM69_promiscuous:
 328              	.LVL14:
 329              	.LFB149:
 437:Src/RFM69.c   **** 
 438:Src/RFM69.c   **** // should be called immediately after reception in case sender wants ACK
 439:Src/RFM69.c   **** void RFM69_sendACK(const void *buffer, uint8_t bufferSize) {
 440:Src/RFM69.c   ****   ACK_Requested = 0; // TWS added to make sure we don't end up in a timing race
 441:Src/RFM69.c   ****                      // and infinite loop sending Acks
 442:Src/RFM69.c   ****   uint8_t sender = senderID;
 443:Src/RFM69.c   ****   int16_t l_rssi = rssi; // save payload received RSSI value
 444:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 15


 445:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 446:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 447:Src/RFM69.c   ****   Timeout_SetTimeout1(RF69_CSMA_LIMIT_MS);
 448:Src/RFM69.c   ****   while (!RFM69_canSend() && !Timeout_IsTimeout1()) {
 449:Src/RFM69.c   ****     RFM69_receiveDone();
 450:Src/RFM69.c   ****   }
 451:Src/RFM69.c   ****   senderID = sender; // TWS: Restore senderID after it gets wiped out by
 452:Src/RFM69.c   ****                      // RFM69_receiveDone()
 453:Src/RFM69.c   ****   RFM69_sendFrame(sender, buffer, bufferSize, false, true);
 454:Src/RFM69.c   ****   rssi = l_rssi; // restore payload RSSI
 455:Src/RFM69.c   **** }
 456:Src/RFM69.c   **** 
 457:Src/RFM69.c   **** // internal function
 458:Src/RFM69.c   **** static void RFM69_sendFrame(uint8_t toAddress, const void *buffer,
 459:Src/RFM69.c   ****                             uint8_t bufferSize, bool requestACK, bool sendACK) {
 460:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception
 461:Src/RFM69.c   ****                                     // while filling fifo
 462:Src/RFM69.c   ****   while ((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00)
 463:Src/RFM69.c   ****     ; // wait for ModeReady
 464:Src/RFM69.c   ****   RFM69_writeReg(REG_DIOMAPPING1,
 465:Src/RFM69.c   ****                  RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 466:Src/RFM69.c   ****   if (bufferSize > RF69_MAX_DATA_LEN)
 467:Src/RFM69.c   ****     bufferSize = RF69_MAX_DATA_LEN;
 468:Src/RFM69.c   **** 
 469:Src/RFM69.c   ****   // control byte
 470:Src/RFM69.c   ****   uint8_t CTLbyte = 0x00;
 471:Src/RFM69.c   ****   if (sendACK)
 472:Src/RFM69.c   ****     CTLbyte = RFM69_CTL_SENDACK;
 473:Src/RFM69.c   ****   else if (requestACK)
 474:Src/RFM69.c   ****     CTLbyte = RFM69_CTL_REQACK;
 475:Src/RFM69.c   **** 
 476:Src/RFM69.c   ****   // write to FIFO
 477:Src/RFM69.c   ****   RFM69_select();
 478:Src/RFM69.c   ****   SPI_transfer8(REG_FIFO | 0x80);
 479:Src/RFM69.c   ****   SPI_transfer8(bufferSize + 3);
 480:Src/RFM69.c   ****   SPI_transfer8(toAddress);
 481:Src/RFM69.c   ****   SPI_transfer8(_address);
 482:Src/RFM69.c   ****   SPI_transfer8(CTLbyte);
 483:Src/RFM69.c   ****   for (uint8_t i = 0; i < bufferSize; i++)
 484:Src/RFM69.c   ****     SPI_transfer8(((uint8_t *)buffer)[i]);
 485:Src/RFM69.c   ****   RFM69_unselect();
 486:Src/RFM69.c   **** 
 487:Src/RFM69.c   ****   // no need to wait for transmit mode to be ready since its handled by the
 488:Src/RFM69.c   ****   // radio
 489:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_TX);
 490:Src/RFM69.c   ****   Timeout_SetTimeout1(RF69_TX_LIMIT_MS);
 491:Src/RFM69.c   ****   while (RFM69_ReadDIO0Pin() == 0 && !Timeout_IsTimeout1())
 492:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 493:Src/RFM69.c   ****   // while (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); //
 494:Src/RFM69.c   ****   // wait for ModeReady
 495:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 496:Src/RFM69.c   **** }
 497:Src/RFM69.c   **** 
 498:Src/RFM69.c   **** // internal function - interrupt gets called when a packet is received
 499:Src/RFM69.c   **** void RFM69_interruptHandler() {
 500:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) {
 501:Src/RFM69.c   ****     uint8_t CTLbyte;
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 16


 502:Src/RFM69.c   ****     // rssi = RFM69_readRSSI();
 503:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY);
 504:Src/RFM69.c   ****     RFM69_select();
 505:Src/RFM69.c   ****     SPI_transfer8(REG_FIFO & 0x7F);
 506:Src/RFM69.c   ****     payloadLen = SPI_transfer8(0);
 507:Src/RFM69.c   ****     payloadLen = payloadLen > 66 ? 66 : payloadLen; // precaution
 508:Src/RFM69.c   ****     targetID = SPI_transfer8(0);
 509:Src/RFM69.c   ****     if (!(_promiscuousMode || targetID == _address ||
 510:Src/RFM69.c   ****           targetID ==
 511:Src/RFM69.c   ****               RF69_BROADCAST_ADDR) // match this node's address, or broadcast
 512:Src/RFM69.c   ****                                    // address or anything in promiscuous mode
 513:Src/RFM69.c   ****         || payloadLen < 3) // address situation could receive packets that are
 514:Src/RFM69.c   ****                         // malformed and don't fit this library's extra fields
 515:Src/RFM69.c   ****     {
 516:Src/RFM69.c   ****       payloadLen = 0;
 517:Src/RFM69.c   ****       RFM69_unselect();
 518:Src/RFM69.c   ****       RFM69_receiveBegin();
 519:Src/RFM69.c   ****       return;
 520:Src/RFM69.c   ****     }
 521:Src/RFM69.c   **** 
 522:Src/RFM69.c   ****     datalen = payloadLen - 3;
 523:Src/RFM69.c   ****     senderID = SPI_transfer8(0);
 524:Src/RFM69.c   ****     CTLbyte = SPI_transfer8(0);
 525:Src/RFM69.c   **** 
 526:Src/RFM69.c   ****     ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 527:Src/RFM69.c   ****     ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 528:Src/RFM69.c   **** 
 529:Src/RFM69.c   ****     // interruptHook(CTLbyte);     // TWS: hook to derived class interrupt
 530:Src/RFM69.c   ****     // function
 531:Src/RFM69.c   **** 
 532:Src/RFM69.c   ****     for (uint8_t i = 0; i < datalen; i++) {
 533:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
 534:Src/RFM69.c   ****     }
 535:Src/RFM69.c   ****     if (datalen < RF69_MAX_DATA_LEN)
 536:Src/RFM69.c   ****       data[datalen] = 0; // add null at end of string
 537:Src/RFM69.c   ****     RFM69_unselect();
 538:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 539:Src/RFM69.c   ****   }
 540:Src/RFM69.c   ****   rssi = RFM69_readRSSI(0);
 541:Src/RFM69.c   **** }
 542:Src/RFM69.c   **** 
 543:Src/RFM69.c   **** // internal function
 544:Src/RFM69.c   **** // void RFM69::isr0() { selfPointer->interruptHandler(); }
 545:Src/RFM69.c   **** 
 546:Src/RFM69.c   **** // internal function
 547:Src/RFM69.c   **** void RFM69_receiveBegin() {
 548:Src/RFM69.c   ****   datalen = 0;
 549:Src/RFM69.c   ****   senderID = 0;
 550:Src/RFM69.c   ****   targetID = 0;
 551:Src/RFM69.c   ****   payloadLen = 0;
 552:Src/RFM69.c   ****   ACK_Requested = 0;
 553:Src/RFM69.c   ****   ACK_RECEIVED = 0;
 554:Src/RFM69.c   ****   rssi = 0;
 555:Src/RFM69.c   ****   interrupts();
 556:Src/RFM69.c   **** 
 557:Src/RFM69.c   ****   if (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 558:Src/RFM69.c   ****     RFM69_writeReg(REG_PACKETCONFIG2,
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 17


 559:Src/RFM69.c   ****                    (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 560:Src/RFM69.c   ****                        RF_PACKET2_RXRESTART); // avoid RX deadlocks
 561:Src/RFM69.c   ****   RFM69_writeReg(
 562:Src/RFM69.c   ****       REG_DIOMAPPING1,
 563:Src/RFM69.c   ****       RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 564:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_RX);
 565:Src/RFM69.c   **** }
 566:Src/RFM69.c   **** 
 567:Src/RFM69.c   **** // checks if a packet was received and/or puts transceiver in receive (ie RX or
 568:Src/RFM69.c   **** // listen) mode
 569:Src/RFM69.c   **** bool RFM69_receiveDone() {
 570:Src/RFM69.c   ****   // ATOMIC_BLOCK(ATOMIC_FORCEON)
 571:Src/RFM69.c   ****   noInterrupts(); // re-enabled in RFM69_unselect() via setMode() or via
 572:Src/RFM69.c   ****                   // RFM69_receiveBegin()
 573:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && payloadLen > 0) {
 574:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 575:Src/RFM69.c   ****     return true;
 576:Src/RFM69.c   ****   } else if (_mode == RF69_MODE_RX) // already in RX no payload yet
 577:Src/RFM69.c   ****   {
 578:Src/RFM69.c   ****     interrupts(); // explicitly re-enable interrupts
 579:Src/RFM69.c   ****     return false;
 580:Src/RFM69.c   ****   }
 581:Src/RFM69.c   ****   RFM69_receiveBegin();
 582:Src/RFM69.c   ****   return false;
 583:Src/RFM69.c   **** }
 584:Src/RFM69.c   **** 
 585:Src/RFM69.c   **** // To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
 586:Src/RFM69.c   **** // To disable encryption: radio.encrypt(null) or radio.encrypt(0)
 587:Src/RFM69.c   **** // KEY HAS TO BE 16 bytes !!!
 588:Src/RFM69.c   **** void RFM69_encrypt(const char *key) {
 589:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 590:Src/RFM69.c   ****   if (key != 0) {
 591:Src/RFM69.c   ****     RFM69_select();
 592:Src/RFM69.c   ****     SPI_transfer8(REG_AESKEY1 | 0x80);
 593:Src/RFM69.c   ****     for (uint8_t i = 0; i < 16; i++)
 594:Src/RFM69.c   ****       SPI_transfer8(key[i]);
 595:Src/RFM69.c   ****     RFM69_unselect();
 596:Src/RFM69.c   ****   }
 597:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 598:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
 599:Src/RFM69.c   **** }
 600:Src/RFM69.c   **** 
 601:Src/RFM69.c   **** // get the received signal strength indicator (RSSI)
 602:Src/RFM69.c   **** int16_t RFM69_readRSSI(bool forceTrigger) {
 603:Src/RFM69.c   ****   int16_t rssi = 0;
 604:Src/RFM69.c   ****   if (forceTrigger) {
 605:Src/RFM69.c   ****     // RSSI trigger not needed if DAGC is in continuous mode
 606:Src/RFM69.c   ****     RFM69_writeReg(REG_RSSICONFIG, RF_RSSI_START);
 607:Src/RFM69.c   ****     while ((RFM69_readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00)
 608:Src/RFM69.c   ****       ; // wait for RSSI_Ready
 609:Src/RFM69.c   ****   }
 610:Src/RFM69.c   ****   rssi = -RFM69_readReg(REG_RSSIVALUE);
 611:Src/RFM69.c   ****   rssi >>= 1;
 612:Src/RFM69.c   ****   return rssi;
 613:Src/RFM69.c   **** }
 614:Src/RFM69.c   **** 
 615:Src/RFM69.c   **** // true  = disable filtering to capture all frames on network
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 18


 616:Src/RFM69.c   **** // false = enable node/broadcast filtering to capture only frames sent to
 617:Src/RFM69.c   **** // this/broadcast address
 618:Src/RFM69.c   **** void RFM69_promiscuous(bool onOff) {
 330              		.loc 1 618 36 is_stmt 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 619:Src/RFM69.c   ****   _promiscuousMode = onOff;
 335              		.loc 1 619 3 view .LVU65
 336              		.loc 1 619 20 is_stmt 0 view .LVU66
 337 0000 014B     		ldr	r3, .L20
 338 0002 1870     		strb	r0, [r3]
 620:Src/RFM69.c   ****   // RFM69_writeReg(REG_PACKETCONFIG1, (RFM69_readReg(REG_PACKETCONFIG1) & 0xF9)
 621:Src/RFM69.c   ****   // | (onOff ? RF_PACKET1_ADRSFILTERING_OFF :
 622:Src/RFM69.c   ****   // RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
 623:Src/RFM69.c   **** }
 339              		.loc 1 623 1 view .LVU67
 340 0004 7047     		bx	lr
 341              	.L21:
 342 0006 00BF     		.align	2
 343              	.L20:
 344 0008 00000000 		.word	.LANCHOR2
 345              		.cfi_endproc
 346              	.LFE149:
 348              		.section	.text.RFM69_select,"ax",%progbits
 349              		.align	1
 350              		.global	RFM69_select
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu fpv4-sp-d16
 356              	RFM69_select:
 357              	.LFB157:
 624:Src/RFM69.c   **** 
 625:Src/RFM69.c   **** // for RFM69HW only: you must call RFM69_setHighPower(true) after initialize()
 626:Src/RFM69.c   **** // or else transmission won't work
 627:Src/RFM69.c   **** void RFM69_setHighPower(bool onOff) {
 628:Src/RFM69.c   ****   RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 629:Src/RFM69.c   ****   if (ISRFM69HW) // turning ON
 630:Src/RFM69.c   ****     RFM69_writeReg(REG_PALEVEL,
 631:Src/RFM69.c   ****                    (RFM69_readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON |
 632:Src/RFM69.c   ****                        RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 633:Src/RFM69.c   ****   else
 634:Src/RFM69.c   ****     RFM69_writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF |
 635:Src/RFM69.c   ****                                     RF_PALEVEL_PA2_OFF |
 636:Src/RFM69.c   ****                                     _powerLevel); // enable P0 only
 637:Src/RFM69.c   **** }
 638:Src/RFM69.c   **** 
 639:Src/RFM69.c   **** // internal function
 640:Src/RFM69.c   **** void RFM69_setHighPowerRegs(bool onOff) {
 641:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 642:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 643:Src/RFM69.c   **** }
 644:Src/RFM69.c   **** 
 645:Src/RFM69.c   **** // for debugging
 646:Src/RFM69.c   **** #define REGISTER_DETAIL 1
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 19


 647:Src/RFM69.c   **** 
 648:Src/RFM69.c   **** void RFM69_readAllRegs() {
 649:Src/RFM69.c   ****   uint8_t regVal;
 650:Src/RFM69.c   **** 
 651:Src/RFM69.c   **** #if REGISTER_DETAIL
 652:Src/RFM69.c   ****   uint16_t capVal;
 653:Src/RFM69.c   **** 
 654:Src/RFM69.c   ****   //... State Variables for intelligent decoding
 655:Src/RFM69.c   ****   uint8_t modeFSK = 0;
 656:Src/RFM69.c   ****   uint64_t bitRate = 0;
 657:Src/RFM69.c   ****   uint32_t freqDev = 0;
 658:Src/RFM69.c   ****   uint32_t freqCenter = 0;
 659:Src/RFM69.c   **** #endif
 660:Src/RFM69.c   ****   char pcBuf[130];
 661:Src/RFM69.c   ****   SerialPrint("\r\n");
 662:Src/RFM69.c   **** 
 663:Src/RFM69.c   ****   uint8_t regAddr;
 664:Src/RFM69.c   ****   SerialPrint("Address | HEX\r\n");
 665:Src/RFM69.c   ****   for (regAddr = 1; regAddr <= 0x4F; regAddr++) {
 666:Src/RFM69.c   ****     RFM69_select();
 667:Src/RFM69.c   ****     SPI_transfer8(regAddr & 0x7F); // send address + r/w bit
 668:Src/RFM69.c   ****     regVal = SPI_transfer8(0);
 669:Src/RFM69.c   ****     RFM69_unselect();
 670:Src/RFM69.c   **** 
 671:Src/RFM69.c   ****     sprintf(log_buffer,"%02X|%02X : ", regAddr, regVal);
 672:Src/RFM69.c   ****     SerialPrint(log_buffer);
 673:Src/RFM69.c   **** 
 674:Src/RFM69.c   **** #if REGISTER_DETAIL
 675:Src/RFM69.c   ****     switch (regAddr) {
 676:Src/RFM69.c   ****     case 0x1: {
 677:Src/RFM69.c   ****       SerialPrint("Controls the automatic Sequencer ( see section 4.2 "
 678:Src/RFM69.c   ****                   ")\r\nSequencerOff : ");
 679:Src/RFM69.c   ****       if (0x80 & regVal) {
 680:Src/RFM69.c   ****         SerialPrint("1 -> Mode is forced by the user\r\n");
 681:Src/RFM69.c   ****       } else {
 682:Src/RFM69.c   ****         SerialPrint(
 683:Src/RFM69.c   ****             "0 -> Operating mode as selected with Mode bits in RegOpMode is "
 684:Src/RFM69.c   ****             "automatically reached with the Sequencer\r\n");
 685:Src/RFM69.c   ****       }
 686:Src/RFM69.c   **** 
 687:Src/RFM69.c   ****       SerialPrint("\r\nEnables Listen mode, should be enabled whilst in "
 688:Src/RFM69.c   ****                   "Standby mode:\r\nListenOn : ");
 689:Src/RFM69.c   ****       if (0x40 & regVal) {
 690:Src/RFM69.c   ****         SerialPrint("1 -> On\r\n");
 691:Src/RFM69.c   ****       } else {
 692:Src/RFM69.c   ****         SerialPrint("0 -> Off ( see section 4.3)\r\n");
 693:Src/RFM69.c   ****       }
 694:Src/RFM69.c   **** 
 695:Src/RFM69.c   ****       SerialPrint("\r\nAborts Listen mode when set together with ListenOn=0 "
 696:Src/RFM69.c   ****                   "See section 4.3.4 for details (Always reads 0.)\r\n");
 697:Src/RFM69.c   ****       if (0x20 & regVal) {
 698:Src/RFM69.c   ****         SerialPrint("ERROR - ListenAbort should NEVER return 1 this is a write "
 699:Src/RFM69.c   ****                     "only register\r\n");
 700:Src/RFM69.c   ****       }
 701:Src/RFM69.c   **** 
 702:Src/RFM69.c   ****       SerialPrint("\r\nTransceiver's operating modes:\r\nMode : ");
 703:Src/RFM69.c   ****       capVal = (regVal >> 2) & 0x7;
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 20


 704:Src/RFM69.c   ****       if (capVal == 0x0) {
 705:Src/RFM69.c   ****         SerialPrint("000 -> Sleep mode (SLEEP)\r\n");
 706:Src/RFM69.c   ****       } else if (capVal = 0b001) {
 707:Src/RFM69.c   ****         SerialPrint("001 -> Standby mode (STDBY)\r\n");
 708:Src/RFM69.c   ****       } else if (capVal = 0b010) {
 709:Src/RFM69.c   ****         SerialPrint("010 -> Frequency Synthesizer mode (FS)\r\n");
 710:Src/RFM69.c   ****       } else if (capVal = 0b011) {
 711:Src/RFM69.c   ****         SerialPrint("011 -> Transmitter mode (TX)\r\n");
 712:Src/RFM69.c   ****       } else if (capVal = 0b100) {
 713:Src/RFM69.c   ****         SerialPrint("100 -> Receiver Mode (RX)\r\n");
 714:Src/RFM69.c   ****       } else {
 715:Src/RFM69.c   ****         // SerialPrint( capVal, BIN );
 716:Src/RFM69.c   ****         sprintf(log_buffer,"%02X -> RESERVED\n", capVal );
 717:Src/RFM69.c   ****         SerialPrint(log_buffer);
 718:Src/RFM69.c   ****       }
 719:Src/RFM69.c   ****       SerialPrint("\r\n");
 720:Src/RFM69.c   ****       break;
 721:Src/RFM69.c   ****     }
 722:Src/RFM69.c   **** 
 723:Src/RFM69.c   ****     case 0x2: {
 724:Src/RFM69.c   **** 
 725:Src/RFM69.c   ****       SerialPrint("Data Processing mode:\r\nDataMode : ");
 726:Src/RFM69.c   ****       capVal = (regVal >> 5) & 0x3;
 727:Src/RFM69.c   ****       if (capVal == 0b00) {
 728:Src/RFM69.c   ****         SerialPrint("00 -> Packet mode\r\n");
 729:Src/RFM69.c   ****       } else if (capVal == 0b01) {
 730:Src/RFM69.c   ****         SerialPrint("01 -> reserved\r\n");
 731:Src/RFM69.c   ****       } else if (capVal == 0b10) {
 732:Src/RFM69.c   ****         SerialPrint("10 -> Continuous mode with bit synchronizer\r\n");
 733:Src/RFM69.c   ****       } else if (capVal == 0b11) {
 734:Src/RFM69.c   ****         SerialPrint("11 -> Continuous mode without bit synchronizer\r\n");
 735:Src/RFM69.c   ****       }
 736:Src/RFM69.c   **** 
 737:Src/RFM69.c   ****       SerialPrint("\r\nModulation scheme:\r\nModulation Type : ");
 738:Src/RFM69.c   ****       capVal = (regVal >> 3) & 0x3;
 739:Src/RFM69.c   ****       if (capVal == 0b00) {
 740:Src/RFM69.c   ****         SerialPrint("00 -> FSK\r\n");
 741:Src/RFM69.c   ****         modeFSK = 1;
 742:Src/RFM69.c   ****       } else if (capVal == 0b01) {
 743:Src/RFM69.c   ****         SerialPrint("01 -> OOK\r\n");
 744:Src/RFM69.c   ****       } else if (capVal == 0b10) {
 745:Src/RFM69.c   ****         SerialPrint("10 -> reserved\r\n");
 746:Src/RFM69.c   ****       } else if (capVal == 0b11) {
 747:Src/RFM69.c   ****         SerialPrint("11 -> reserved\r\n");
 748:Src/RFM69.c   ****       }
 749:Src/RFM69.c   **** 
 750:Src/RFM69.c   ****       SerialPrint("\r\nData shaping: ");
 751:Src/RFM69.c   ****       if (modeFSK) {
 752:Src/RFM69.c   ****         SerialPrint("in FSK:\r\n");
 753:Src/RFM69.c   ****       } else {
 754:Src/RFM69.c   ****         SerialPrint("in OOK:\r\n");
 755:Src/RFM69.c   ****       }
 756:Src/RFM69.c   ****       SerialPrint("ModulationShaping : ");
 757:Src/RFM69.c   ****       capVal = regVal & 0x3;
 758:Src/RFM69.c   ****       if (modeFSK) {
 759:Src/RFM69.c   ****         if (capVal == 0b00) {
 760:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 21


 761:Src/RFM69.c   ****         } else if (capVal == 0b01) {
 762:Src/RFM69.c   ****           SerialPrint("01 -> Gaussian filter, BT = 1.0\r\n");
 763:Src/RFM69.c   ****         } else if (capVal == 0b10) {
 764:Src/RFM69.c   ****           SerialPrint("10 -> Gaussian filter, BT = 0.5\r\n");
 765:Src/RFM69.c   ****         } else if (capVal == 0b11) {
 766:Src/RFM69.c   ****           SerialPrint("11 -> Gaussian filter, BT = 0.3\r\n");
 767:Src/RFM69.c   ****         }
 768:Src/RFM69.c   ****       } else {
 769:Src/RFM69.c   ****         if (capVal == 0b00) {
 770:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
 771:Src/RFM69.c   ****         } else if (capVal == 0b01) {
 772:Src/RFM69.c   ****           SerialPrint("01 -> filtering with f(cutoff) = BR\r\n");
 773:Src/RFM69.c   ****         } else if (capVal == 0b10) {
 774:Src/RFM69.c   ****           SerialPrint("10 -> filtering with f(cutoff) = 2*BR\r\n");
 775:Src/RFM69.c   ****         } else if (capVal == 0b11) {
 776:Src/RFM69.c   ****           SerialPrint("ERROR - 11 is reserved\r\n");
 777:Src/RFM69.c   ****         }
 778:Src/RFM69.c   ****       }
 779:Src/RFM69.c   **** 
 780:Src/RFM69.c   ****       SerialPrint("\r\n");
 781:Src/RFM69.c   ****       break;
 782:Src/RFM69.c   ****     }
 783:Src/RFM69.c   **** 
 784:Src/RFM69.c   ****     case 0x3: {
 785:Src/RFM69.c   ****       bitRate = (regVal << 8);
 786:Src/RFM69.c   ****       break;
 787:Src/RFM69.c   ****     }
 788:Src/RFM69.c   **** 
 789:Src/RFM69.c   ****     case 0x4: {
 790:Src/RFM69.c   ****       bitRate |= regVal;
 791:Src/RFM69.c   ****       SerialPrint("Bit Rate (Chip Rate when Manchester encoding is enabled)\r\nBitRate : ");
 792:Src/RFM69.c   ****       uint64_t val = 32UL * 1000UL * 1000UL / bitRate;
 793:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 794:Src/RFM69.c   ****       SerialPrint(pcBuf);
 795:Src/RFM69.c   ****       SerialPrint("\r\n");
 796:Src/RFM69.c   ****       break;
 797:Src/RFM69.c   ****     }
 798:Src/RFM69.c   **** 
 799:Src/RFM69.c   ****     case 0x5: {
 800:Src/RFM69.c   ****       freqDev = ((regVal & 0x3f) << 8);
 801:Src/RFM69.c   ****       break;
 802:Src/RFM69.c   ****     }
 803:Src/RFM69.c   **** 
 804:Src/RFM69.c   ****     case 0x6: {
 805:Src/RFM69.c   ****       freqDev |= regVal;
 806:Src/RFM69.c   ****       SerialPrint("Frequency deviation\r\nFdev : ");
 807:Src/RFM69.c   ****       uint32_t val = 61UL * freqDev;
 808:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 809:Src/RFM69.c   ****       SerialPrint(pcBuf);
 810:Src/RFM69.c   ****       SerialPrint("\r\n");
 811:Src/RFM69.c   ****       break;
 812:Src/RFM69.c   ****     }
 813:Src/RFM69.c   **** 
 814:Src/RFM69.c   ****     case 0x7: {
 815:Src/RFM69.c   ****       unsigned long tempVal = regVal;
 816:Src/RFM69.c   ****       freqCenter = (tempVal << 16);
 817:Src/RFM69.c   ****       break;
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 22


 818:Src/RFM69.c   ****     }
 819:Src/RFM69.c   **** 
 820:Src/RFM69.c   ****     case 0x8: {
 821:Src/RFM69.c   ****       unsigned long tempVal = regVal;
 822:Src/RFM69.c   ****       freqCenter = freqCenter | (tempVal << 8);
 823:Src/RFM69.c   ****       break;
 824:Src/RFM69.c   ****     }
 825:Src/RFM69.c   **** 
 826:Src/RFM69.c   ****     case 0x9: {
 827:Src/RFM69.c   ****       freqCenter = freqCenter | regVal;
 828:Src/RFM69.c   ****       SerialPrint("RF Carrier frequency\r\nFRF : ");
 829:Src/RFM69.c   ****       uint32_t val = 61UL * freqCenter;
 830:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 831:Src/RFM69.c   ****       SerialPrint(pcBuf);
 832:Src/RFM69.c   ****       SerialPrint("\r\n");
 833:Src/RFM69.c   ****       break;
 834:Src/RFM69.c   ****     }
 835:Src/RFM69.c   **** 
 836:Src/RFM69.c   ****     case 0xa: {
 837:Src/RFM69.c   ****       SerialPrint("RC calibration control & status\r\nRcCalDone : ");
 838:Src/RFM69.c   ****       if (0x40 & regVal) {
 839:Src/RFM69.c   ****         SerialPrint("1 -> RC calibration is over\r\n");
 840:Src/RFM69.c   ****       } else {
 841:Src/RFM69.c   ****         SerialPrint("0 -> RC calibration is in progress\r\n");
 842:Src/RFM69.c   ****       }
 843:Src/RFM69.c   **** 
 844:Src/RFM69.c   ****       SerialPrint("\r\n");
 845:Src/RFM69.c   ****       break;
 846:Src/RFM69.c   ****     }
 847:Src/RFM69.c   **** 
 848:Src/RFM69.c   ****     case 0xb: {
 849:Src/RFM69.c   ****       SerialPrint(
 850:Src/RFM69.c   ****           "Improved AFC routine for signals with modulation index lower than "
 851:Src/RFM69.c   ****           "2.  Refer to section 3.4.16 for details\r\nAfcLowBetaOn : ");
 852:Src/RFM69.c   ****       if (0x20 & regVal) {
 853:Src/RFM69.c   ****         SerialPrint("1 -> Improved AFC routine\r\n");
 854:Src/RFM69.c   ****       } else {
 855:Src/RFM69.c   ****         SerialPrint("0 -> Standard AFC routine\r\n");
 856:Src/RFM69.c   ****       }
 857:Src/RFM69.c   ****       SerialPrint("\r\n");
 858:Src/RFM69.c   ****       break;
 859:Src/RFM69.c   ****     }
 860:Src/RFM69.c   **** 
 861:Src/RFM69.c   ****     case 0xc: {
 862:Src/RFM69.c   ****       SerialPrint("Reserved\r\n");
 863:Src/RFM69.c   ****       break;
 864:Src/RFM69.c   ****     }
 865:Src/RFM69.c   **** 
 866:Src/RFM69.c   ****     case 0xd: {
 867:Src/RFM69.c   ****       uint8_t val;
 868:Src/RFM69.c   ****       SerialPrint("Resolution of Listen mode Idle time (calibrated RC osc):\r\nListenResolIdle : ")
 869:Src/RFM69.c   ****       val = regVal >> 6;
 870:Src/RFM69.c   ****       if (val == 0b00) {
 871:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 872:Src/RFM69.c   ****       } else if (val == 0b01) {
 873:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 874:Src/RFM69.c   ****       } else if (val == 0b10) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 23


 875:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 876:Src/RFM69.c   ****       } else if (val == 0b11) {
 877:Src/RFM69.c   ****         SerialPrint("11 -> 262 ms\r\n");
 878:Src/RFM69.c   ****       }
 879:Src/RFM69.c   **** 
 880:Src/RFM69.c   ****       SerialPrint("\r\nResolution of Listen mode Rx time (calibrated RC osc):\r\nListenResolRx : ")
 881:Src/RFM69.c   ****       val = (regVal >> 4) & 0x3;
 882:Src/RFM69.c   ****       if (val == 0b00) {
 883:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 884:Src/RFM69.c   ****       } else if (val == 0b01) {
 885:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 886:Src/RFM69.c   ****       } else if (val == 0b10) {
 887:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 888:Src/RFM69.c   ****       } else if (val == 0b11) {
 889:Src/RFM69.c   ****         SerialPrint("11 -> 262 ms\r\n");
 890:Src/RFM69.c   ****       }
 891:Src/RFM69.c   **** 
 892:Src/RFM69.c   ****       SerialPrint("\r\nCriteria for packet acceptance in Listen mode:\r\nListenCriteria : ");
 893:Src/RFM69.c   ****       if (0x8 & regVal) {
 894:Src/RFM69.c   ****         SerialPrint("1 -> signal strength is above RssiThreshold and "
 895:Src/RFM69.c   ****                     "SyncAddress matched\r\n");
 896:Src/RFM69.c   ****       } else {
 897:Src/RFM69.c   ****         SerialPrint("0 -> signal strength is above RssiThreshold\r\n");
 898:Src/RFM69.c   ****       }
 899:Src/RFM69.c   **** 
 900:Src/RFM69.c   ****       SerialPrint("\r\nAction taken after acceptance of a packet in Listen mode:\r\nListenEnd : ");
 901:Src/RFM69.c   ****       val = (regVal >> 1) & 0x3;
 902:Src/RFM69.c   ****       if (val == 0b00) {
 903:Src/RFM69.c   ****         SerialPrint("00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see secti
 904:Src/RFM69.c   ****       } else if (val == 0b01) {
 905:Src/RFM69.c   ****         SerialPrint(
 906:Src/RFM69.c   ****             "01 -> chip stays in Rx mode until PayloadReady or Timeout \r\n"
 907:Src/RFM69.c   ****             "interrupt occurs.  It then goes to the mode defined by Mode. \r\n"
 908:Src/RFM69.c   ****             "Listen mode stops and must be disabled (see section 4.3)\r\n");
 909:Src/RFM69.c   ****       } else if (val == 0b10) {
 910:Src/RFM69.c   ****         SerialPrint("10 -> chip stays in Rx mode until PayloadReady or Timeout "
 911:Src/RFM69.c   ****                     "occurs.  Listen mode then resumes in Idle state.  FIFO "
 912:Src/RFM69.c   ****                     "content is lost at next Rx wakeup.\r\n");
 913:Src/RFM69.c   ****       } else if (val == 0b11) {
 914:Src/RFM69.c   ****         SerialPrint("11 -> Reserved\r\n");
 915:Src/RFM69.c   ****       }
 916:Src/RFM69.c   ****       SerialPrint("\r\n");
 917:Src/RFM69.c   **** 
 918:Src/RFM69.c   **** 
 919:Src/RFM69.c   ****       break;
 920:Src/RFM69.c   ****     }
 921:Src/RFM69.c   **** 
 922:Src/RFM69.c   ****     default: {}
 923:Src/RFM69.c   ****     }
 924:Src/RFM69.c   **** 
 925:Src/RFM69.c   **** #endif
 926:Src/RFM69.c   ****   }
 927:Src/RFM69.c   ****   RFM69_unselect();
 928:Src/RFM69.c   ****   SerialPrint("\r\n");
 929:Src/RFM69.c   ****   SerialPrint("\r\n");
 930:Src/RFM69.c   **** }
 931:Src/RFM69.c   **** 
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 24


 932:Src/RFM69.c   **** uint8_t RFM69_readTemperature(uint8_t calFactor) // returns centigrade
 933:Src/RFM69.c   **** {
 934:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 935:Src/RFM69.c   ****   RFM69_writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
 936:Src/RFM69.c   ****   while ((RFM69_readReg(REG_TEMP1) & RF_TEMP1_MEAS_RUNNING))
 937:Src/RFM69.c   ****     ;
 938:Src/RFM69.c   ****   return ~RFM69_readReg(REG_TEMP2) + COURSE_TEMP_COEF +
 939:Src/RFM69.c   ****          calFactor; // 'complement' corrects the slope, rising temp = rising val
 940:Src/RFM69.c   **** } // COURSE_TEMP_COEF puts reading in the ballpark, user can add additional
 941:Src/RFM69.c   ****   // correction
 942:Src/RFM69.c   **** 
 943:Src/RFM69.c   **** void RFM69_rcCalibration() {
 944:Src/RFM69.c   ****   RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
 945:Src/RFM69.c   ****   while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00)
 946:Src/RFM69.c   ****     ;
 947:Src/RFM69.c   **** }
 948:Src/RFM69.c   **** 
 949:Src/RFM69.c   **** uint8_t RFM69_readReg(uint8_t addr) {
 950:Src/RFM69.c   ****   uint8_t regval;
 951:Src/RFM69.c   ****   RFM69_select();
 952:Src/RFM69.c   ****   SPI_transfer8(addr & 0x7F);
 953:Src/RFM69.c   ****   regval = SPI_transfer8(0);
 954:Src/RFM69.c   ****   RFM69_unselect();
 955:Src/RFM69.c   ****   return regval;
 956:Src/RFM69.c   **** }
 957:Src/RFM69.c   **** 
 958:Src/RFM69.c   **** void RFM69_writeReg(uint8_t addr, uint8_t value) {
 959:Src/RFM69.c   ****   RFM69_select();
 960:Src/RFM69.c   ****   SPI_transfer8(addr | 0x80);
 961:Src/RFM69.c   ****   SPI_transfer8(value);
 962:Src/RFM69.c   ****   RFM69_unselect();
 963:Src/RFM69.c   **** }
 964:Src/RFM69.c   **** 
 965:Src/RFM69.c   **** // select the RFM69 transceiver (save SPI settings, set CS low)
 966:Src/RFM69.c   **** void RFM69_select() {
 358              		.loc 1 966 21 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 967:Src/RFM69.c   ****   noInterrupts();
 362              		.loc 1 967 3 view .LVU69
 966:Src/RFM69.c   ****   noInterrupts();
 363              		.loc 1 966 21 is_stmt 0 view .LVU70
 364 0000 08B5     		push	{r3, lr}
 365              	.LCFI6:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 369              		.loc 1 967 3 view .LVU71
 370 0002 FFF7FEFF 		bl	noInterrupts
 371              	.LVL15:
 968:Src/RFM69.c   ****   RFM69_SetCSPin(LOW);
 372              		.loc 1 968 3 is_stmt 1 view .LVU72
 373 0006 0020     		movs	r0, #0
 969:Src/RFM69.c   **** }
 374              		.loc 1 969 1 is_stmt 0 view .LVU73
 375 0008 BDE80840 		pop	{r3, lr}
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 25


 376              	.LCFI7:
 377              		.cfi_restore 14
 378              		.cfi_restore 3
 379              		.cfi_def_cfa_offset 0
 968:Src/RFM69.c   ****   RFM69_SetCSPin(LOW);
 380              		.loc 1 968 3 view .LVU74
 381 000c FFF7FEBF 		b	RFM69_SetCSPin
 382              	.LVL16:
 383              		.cfi_endproc
 384              	.LFE157:
 386              		.section	.text.RFM69_unselect,"ax",%progbits
 387              		.align	1
 388              		.global	RFM69_unselect
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu fpv4-sp-d16
 394              	RFM69_unselect:
 395              	.LFB158:
 970:Src/RFM69.c   **** 
 971:Src/RFM69.c   **** // unselect the RFM69 transceiver (set CS high, restore SPI settings)
 972:Src/RFM69.c   **** void RFM69_unselect() {
 396              		.loc 1 972 23 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 973:Src/RFM69.c   ****   RFM69_SetCSPin(HIGH);
 400              		.loc 1 973 3 view .LVU76
 972:Src/RFM69.c   ****   RFM69_SetCSPin(HIGH);
 401              		.loc 1 972 23 is_stmt 0 view .LVU77
 402 0000 08B5     		push	{r3, lr}
 403              	.LCFI8:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 3, -8
 406              		.cfi_offset 14, -4
 407              		.loc 1 973 3 view .LVU78
 408 0002 0120     		movs	r0, #1
 409 0004 FFF7FEFF 		bl	RFM69_SetCSPin
 410              	.LVL17:
 974:Src/RFM69.c   ****   interrupts();
 411              		.loc 1 974 3 is_stmt 1 view .LVU79
 975:Src/RFM69.c   **** }
 412              		.loc 1 975 1 is_stmt 0 view .LVU80
 413 0008 BDE80840 		pop	{r3, lr}
 414              	.LCFI9:
 415              		.cfi_restore 14
 416              		.cfi_restore 3
 417              		.cfi_def_cfa_offset 0
 974:Src/RFM69.c   ****   interrupts();
 418              		.loc 1 974 3 view .LVU81
 419 000c FFF7FEBF 		b	interrupts
 420              	.LVL18:
 421              		.cfi_endproc
 422              	.LFE158:
 424              		.global	__aeabi_uldivmod
 425              		.section	.text.RFM69_readAllRegs,"ax",%progbits
 426              		.align	1
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 26


 427              		.global	RFM69_readAllRegs
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	RFM69_readAllRegs:
 434              	.LFB152:
 648:Src/RFM69.c   ****   uint8_t regVal;
 435              		.loc 1 648 26 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 136
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 649:Src/RFM69.c   **** 
 439              		.loc 1 649 3 view .LVU83
 652:Src/RFM69.c   **** 
 440              		.loc 1 652 3 view .LVU84
 655:Src/RFM69.c   ****   uint64_t bitRate = 0;
 441              		.loc 1 655 3 view .LVU85
 442              	.LVL19:
 656:Src/RFM69.c   ****   uint32_t freqDev = 0;
 443              		.loc 1 656 3 view .LVU86
 657:Src/RFM69.c   ****   uint32_t freqCenter = 0;
 444              		.loc 1 657 3 view .LVU87
 658:Src/RFM69.c   **** #endif
 445              		.loc 1 658 3 view .LVU88
 660:Src/RFM69.c   ****   SerialPrint("\r\n");
 446              		.loc 1 660 3 view .LVU89
 661:Src/RFM69.c   **** 
 447              		.loc 1 661 3 view .LVU90
 648:Src/RFM69.c   ****   uint8_t regVal;
 448              		.loc 1 648 26 is_stmt 0 view .LVU91
 449 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 36
 452              		.cfi_offset 4, -36
 453              		.cfi_offset 5, -32
 454              		.cfi_offset 6, -28
 455              		.cfi_offset 7, -24
 456              		.cfi_offset 8, -20
 457              		.cfi_offset 9, -16
 458              		.cfi_offset 10, -12
 459              		.cfi_offset 11, -8
 460              		.cfi_offset 14, -4
 661:Src/RFM69.c   **** 
 461              		.loc 1 661 3 view .LVU92
 462 0004 A348     		ldr	r0, .L108
 648:Src/RFM69.c   ****   uint8_t regVal;
 463              		.loc 1 648 26 view .LVU93
 464 0006 A3B0     		sub	sp, sp, #140
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 176
 661:Src/RFM69.c   **** 
 467              		.loc 1 661 3 view .LVU94
 468 0008 FFF7FEFF 		bl	SerialPrint
 469              	.LVL20:
 663:Src/RFM69.c   ****   SerialPrint("Address | HEX\r\n");
 470              		.loc 1 663 3 is_stmt 1 view .LVU95
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 27


 664:Src/RFM69.c   ****   for (regAddr = 1; regAddr <= 0x4F; regAddr++) {
 471              		.loc 1 664 3 view .LVU96
 472 000c A248     		ldr	r0, .L108+4
 473 000e FFF7FEFF 		bl	SerialPrint
 474              	.LVL21:
 665:Src/RFM69.c   ****     RFM69_select();
 475              		.loc 1 665 3 view .LVU97
 658:Src/RFM69.c   **** #endif
 476              		.loc 1 658 12 is_stmt 0 view .LVU98
 477 0012 0025     		movs	r5, #0
 664:Src/RFM69.c   ****   for (regAddr = 1; regAddr <= 0x4F; regAddr++) {
 478              		.loc 1 664 3 view .LVU99
 479 0014 4FF00108 		mov	r8, #1
 657:Src/RFM69.c   ****   uint32_t freqCenter = 0;
 480              		.loc 1 657 12 view .LVU100
 481 0018 2F46     		mov	r7, r5
 656:Src/RFM69.c   ****   uint32_t freqDev = 0;
 482              		.loc 1 656 12 view .LVU101
 483 001a 4FF0000A 		mov	r10, #0
 484 001e 4FF0000B 		mov	fp, #0
 655:Src/RFM69.c   ****   uint64_t bitRate = 0;
 485              		.loc 1 655 11 view .LVU102
 486 0022 A946     		mov	r9, r5
 487              	.LVL22:
 488              	.L83:
 655:Src/RFM69.c   ****   uint64_t bitRate = 0;
 489              		.loc 1 655 11 view .LVU103
 490 0024 5FFA88F6 		uxtb	r6, r8
 491              	.LVL23:
 666:Src/RFM69.c   ****     SPI_transfer8(regAddr & 0x7F); // send address + r/w bit
 492              		.loc 1 666 5 is_stmt 1 view .LVU104
 493 0028 FFF7FEFF 		bl	RFM69_select
 494              	.LVL24:
 667:Src/RFM69.c   ****     regVal = SPI_transfer8(0);
 495              		.loc 1 667 5 view .LVU105
 496 002c 3046     		mov	r0, r6
 497 002e FFF7FEFF 		bl	SPI_transfer8
 498              	.LVL25:
 668:Src/RFM69.c   ****     RFM69_unselect();
 499              		.loc 1 668 5 view .LVU106
 668:Src/RFM69.c   ****     RFM69_unselect();
 500              		.loc 1 668 14 is_stmt 0 view .LVU107
 501 0032 0020     		movs	r0, #0
 502 0034 FFF7FEFF 		bl	SPI_transfer8
 503              	.LVL26:
 504 0038 0446     		mov	r4, r0
 505              	.LVL27:
 669:Src/RFM69.c   **** 
 506              		.loc 1 669 5 is_stmt 1 view .LVU108
 507 003a FFF7FEFF 		bl	RFM69_unselect
 508              	.LVL28:
 671:Src/RFM69.c   ****     SerialPrint(log_buffer);
 509              		.loc 1 671 5 view .LVU109
 510 003e 2346     		mov	r3, r4
 511 0040 4246     		mov	r2, r8
 512 0042 9649     		ldr	r1, .L108+8
 513 0044 9648     		ldr	r0, .L108+12
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 28


 514 0046 FFF7FEFF 		bl	sprintf
 515              	.LVL29:
 672:Src/RFM69.c   **** 
 516              		.loc 1 672 5 view .LVU110
 675:Src/RFM69.c   ****     case 0x1: {
 517              		.loc 1 675 5 is_stmt 0 view .LVU111
 518 004a 013E     		subs	r6, r6, #1
 672:Src/RFM69.c   **** 
 519              		.loc 1 672 5 view .LVU112
 520 004c 9448     		ldr	r0, .L108+12
 521 004e FFF7FEFF 		bl	SerialPrint
 522              	.LVL30:
 675:Src/RFM69.c   ****     case 0x1: {
 523              		.loc 1 675 5 is_stmt 1 view .LVU113
 524 0052 0C2E     		cmp	r6, #12
 525 0054 00F28C80 		bhi	.L25
 526 0058 DFE816F0 		tbh	[pc, r6, lsl #1]
 527              	.L27:
 528 005c 0D00     		.2byte	(.L39-.L27)/2
 529 005e 3300     		.2byte	(.L38-.L27)/2
 530 0060 8600     		.2byte	(.L37-.L27)/2
 531 0062 9B00     		.2byte	(.L36-.L27)/2
 532 0064 AF00     		.2byte	(.L35-.L27)/2
 533 0066 B300     		.2byte	(.L34-.L27)/2
 534 0068 BE00     		.2byte	(.L33-.L27)/2
 535 006a C000     		.2byte	(.L32-.L27)/2
 536 006c C300     		.2byte	(.L31-.L27)/2
 537 006e CA00     		.2byte	(.L30-.L27)/2
 538 0070 D200     		.2byte	(.L29-.L27)/2
 539 0072 DA00     		.2byte	(.L28-.L27)/2
 540 0074 DE00     		.2byte	(.L26-.L27)/2
 541              		.p2align 1
 542              	.L39:
 543              	.LVL31:
 677:Src/RFM69.c   ****                   ")\r\nSequencerOff : ");
 544              		.loc 1 677 7 view .LVU114
 545 0076 8B48     		ldr	r0, .L108+16
 546 0078 FFF7FEFF 		bl	SerialPrint
 547              	.LVL32:
 679:Src/RFM69.c   ****         SerialPrint("1 -> Mode is forced by the user\r\n");
 548              		.loc 1 679 7 view .LVU115
 679:Src/RFM69.c   ****         SerialPrint("1 -> Mode is forced by the user\r\n");
 549              		.loc 1 679 10 is_stmt 0 view .LVU116
 550 007c 2306     		lsls	r3, r4, #24
 680:Src/RFM69.c   ****       } else {
 551              		.loc 1 680 9 is_stmt 1 view .LVU117
 552 007e 4CBF     		ite	mi
 553 0080 8948     		ldrmi	r0, .L108+20
 682:Src/RFM69.c   ****             "0 -> Operating mode as selected with Mode bits in RegOpMode is "
 554              		.loc 1 682 9 view .LVU118
 555 0082 8A48     		ldrpl	r0, .L108+24
 556 0084 FFF7FEFF 		bl	SerialPrint
 557              	.LVL33:
 687:Src/RFM69.c   ****                   "Standby mode:\r\nListenOn : ");
 558              		.loc 1 687 7 view .LVU119
 559 0088 8948     		ldr	r0, .L108+28
 560 008a FFF7FEFF 		bl	SerialPrint
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 29


 561              	.LVL34:
 689:Src/RFM69.c   ****         SerialPrint("1 -> On\r\n");
 562              		.loc 1 689 7 view .LVU120
 689:Src/RFM69.c   ****         SerialPrint("1 -> On\r\n");
 563              		.loc 1 689 10 is_stmt 0 view .LVU121
 564 008e 6606     		lsls	r6, r4, #25
 690:Src/RFM69.c   ****       } else {
 565              		.loc 1 690 9 is_stmt 1 view .LVU122
 566 0090 4CBF     		ite	mi
 567 0092 8848     		ldrmi	r0, .L108+32
 692:Src/RFM69.c   ****       }
 568              		.loc 1 692 9 view .LVU123
 569 0094 8848     		ldrpl	r0, .L108+36
 570 0096 FFF7FEFF 		bl	SerialPrint
 571              	.LVL35:
 695:Src/RFM69.c   ****                   "See section 4.3.4 for details (Always reads 0.)\r\n");
 572              		.loc 1 695 7 view .LVU124
 573 009a 8848     		ldr	r0, .L108+40
 574 009c FFF7FEFF 		bl	SerialPrint
 575              	.LVL36:
 697:Src/RFM69.c   ****         SerialPrint("ERROR - ListenAbort should NEVER return 1 this is a write "
 576              		.loc 1 697 7 view .LVU125
 697:Src/RFM69.c   ****         SerialPrint("ERROR - ListenAbort should NEVER return 1 this is a write "
 577              		.loc 1 697 10 is_stmt 0 view .LVU126
 578 00a0 A006     		lsls	r0, r4, #26
 579 00a2 02D5     		bpl	.L44
 698:Src/RFM69.c   ****                     "only register\r\n");
 580              		.loc 1 698 9 is_stmt 1 view .LVU127
 581 00a4 8648     		ldr	r0, .L108+44
 582 00a6 FFF7FEFF 		bl	SerialPrint
 583              	.LVL37:
 584              	.L44:
 702:Src/RFM69.c   ****       capVal = (regVal >> 2) & 0x7;
 585              		.loc 1 702 7 view .LVU128
 586 00aa 8648     		ldr	r0, .L108+48
 587 00ac FFF7FEFF 		bl	SerialPrint
 588              	.LVL38:
 703:Src/RFM69.c   ****       if (capVal == 0x0) {
 589              		.loc 1 703 7 view .LVU129
 704:Src/RFM69.c   ****         SerialPrint("000 -> Sleep mode (SLEEP)\r\n");
 590              		.loc 1 704 7 view .LVU130
 704:Src/RFM69.c   ****         SerialPrint("000 -> Sleep mode (SLEEP)\r\n");
 591              		.loc 1 704 10 is_stmt 0 view .LVU131
 592 00b0 14F01C0F 		tst	r4, #28
 705:Src/RFM69.c   ****       } else if (capVal = 0b001) {
 593              		.loc 1 705 9 is_stmt 1 view .LVU132
 594 00b4 0CBF     		ite	eq
 595 00b6 8448     		ldreq	r0, .L108+52
 706:Src/RFM69.c   ****         SerialPrint("001 -> Standby mode (STDBY)\r\n");
 596              		.loc 1 706 14 view .LVU133
 597              	.LVL39:
 707:Src/RFM69.c   ****       } else if (capVal = 0b010) {
 598              		.loc 1 707 9 view .LVU134
 599 00b8 8448     		ldrne	r0, .L108+56
 600              	.LVL40:
 601              	.L103:
 602              	.LBB5:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 30


 914:Src/RFM69.c   ****       }
 603              		.loc 1 914 9 is_stmt 0 view .LVU135
 604 00ba FFF7FEFF 		bl	SerialPrint
 605              	.LVL41:
 916:Src/RFM69.c   **** 
 606              		.loc 1 916 7 is_stmt 1 view .LVU136
 607 00be 7548     		ldr	r0, .L108
 608 00c0 A7E0     		b	.L105
 609              	.LVL42:
 610              	.L38:
 916:Src/RFM69.c   **** 
 611              		.loc 1 916 7 is_stmt 0 view .LVU137
 612              	.LBE5:
 725:Src/RFM69.c   ****       capVal = (regVal >> 5) & 0x3;
 613              		.loc 1 725 7 is_stmt 1 view .LVU138
 614 00c2 8348     		ldr	r0, .L108+60
 615 00c4 FFF7FEFF 		bl	SerialPrint
 616              	.LVL43:
 726:Src/RFM69.c   ****       if (capVal == 0b00) {
 617              		.loc 1 726 7 view .LVU139
 618 00c8 C4F34113 		ubfx	r3, r4, #5, #2
 619              	.LVL44:
 727:Src/RFM69.c   ****         SerialPrint("00 -> Packet mode\r\n");
 620              		.loc 1 727 7 view .LVU140
 727:Src/RFM69.c   ****         SerialPrint("00 -> Packet mode\r\n");
 621              		.loc 1 727 10 is_stmt 0 view .LVU141
 622 00cc 13BB     		cbnz	r3, .L47
 728:Src/RFM69.c   ****       } else if (capVal == 0b01) {
 623              		.loc 1 728 9 is_stmt 1 view .LVU142
 624 00ce 8148     		ldr	r0, .L108+64
 625              	.L94:
 734:Src/RFM69.c   ****       }
 626              		.loc 1 734 9 is_stmt 0 view .LVU143
 627 00d0 FFF7FEFF 		bl	SerialPrint
 628              	.LVL45:
 737:Src/RFM69.c   ****       capVal = (regVal >> 3) & 0x3;
 629              		.loc 1 737 7 is_stmt 1 view .LVU144
 630 00d4 8048     		ldr	r0, .L108+68
 631 00d6 FFF7FEFF 		bl	SerialPrint
 632              	.LVL46:
 738:Src/RFM69.c   ****       if (capVal == 0b00) {
 633              		.loc 1 738 7 view .LVU145
 634 00da C4F3C103 		ubfx	r3, r4, #3, #2
 635              	.LVL47:
 739:Src/RFM69.c   ****         SerialPrint("00 -> FSK\r\n");
 636              		.loc 1 739 7 view .LVU146
 739:Src/RFM69.c   ****         SerialPrint("00 -> FSK\r\n");
 637              		.loc 1 739 10 is_stmt 0 view .LVU147
 638 00de 13BB     		cbnz	r3, .L51
 740:Src/RFM69.c   ****         modeFSK = 1;
 639              		.loc 1 740 9 is_stmt 1 view .LVU148
 640 00e0 7E48     		ldr	r0, .L108+72
 641 00e2 FFF7FEFF 		bl	SerialPrint
 642              	.LVL48:
 741:Src/RFM69.c   ****       } else if (capVal == 0b01) {
 643              		.loc 1 741 9 view .LVU149
 741:Src/RFM69.c   ****       } else if (capVal == 0b01) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 31


 644              		.loc 1 741 17 is_stmt 0 view .LVU150
 645 00e6 4FF00109 		mov	r9, #1
 646              	.LVL49:
 647              	.L52:
 750:Src/RFM69.c   ****       if (modeFSK) {
 648              		.loc 1 750 7 is_stmt 1 view .LVU151
 649 00ea 7D48     		ldr	r0, .L108+76
 650 00ec FFF7FEFF 		bl	SerialPrint
 651              	.LVL50:
 751:Src/RFM69.c   ****         SerialPrint("in FSK:\r\n");
 652              		.loc 1 751 7 view .LVU152
 751:Src/RFM69.c   ****         SerialPrint("in FSK:\r\n");
 653              		.loc 1 751 10 is_stmt 0 view .LVU153
 654 00f0 B9F1000F 		cmp	r9, #0
 655 00f4 22D0     		beq	.L55
 656              	.LVL51:
 752:Src/RFM69.c   ****       } else {
 657              		.loc 1 752 9 is_stmt 1 view .LVU154
 658 00f6 7B48     		ldr	r0, .L108+80
 659              	.LVL52:
 660              	.L96:
 754:Src/RFM69.c   ****       }
 661              		.loc 1 754 9 is_stmt 0 view .LVU155
 662 00f8 FFF7FEFF 		bl	SerialPrint
 663              	.LVL53:
 756:Src/RFM69.c   ****       capVal = regVal & 0x3;
 664              		.loc 1 756 7 is_stmt 1 view .LVU156
 665 00fc 04F00304 		and	r4, r4, #3
 666              	.LVL54:
 756:Src/RFM69.c   ****       capVal = regVal & 0x3;
 667              		.loc 1 756 7 is_stmt 0 view .LVU157
 668 0100 7948     		ldr	r0, .L108+84
 669 0102 FFF7FEFF 		bl	SerialPrint
 670              	.LVL55:
 757:Src/RFM69.c   ****       if (modeFSK) {
 671              		.loc 1 757 7 is_stmt 1 view .LVU158
 757:Src/RFM69.c   ****       if (modeFSK) {
 672              		.loc 1 757 14 is_stmt 0 view .LVU159
 673 0106 A3B2     		uxth	r3, r4
 674              	.LVL56:
 758:Src/RFM69.c   ****         if (capVal == 0b00) {
 675              		.loc 1 758 7 is_stmt 1 view .LVU160
 758:Src/RFM69.c   ****         if (capVal == 0b00) {
 676              		.loc 1 758 10 is_stmt 0 view .LVU161
 677 0108 B9F1000F 		cmp	r9, #0
 678 010c 21D0     		beq	.L57
 759:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
 679              		.loc 1 759 9 is_stmt 1 view .LVU162
 759:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
 680              		.loc 1 759 12 is_stmt 0 view .LVU163
 681 010e BCB9     		cbnz	r4, .L58
 682              	.L62:
 760:Src/RFM69.c   ****         } else if (capVal == 0b01) {
 683              		.loc 1 760 11 is_stmt 1 view .LVU164
 684 0110 7648     		ldr	r0, .L108+88
 685 0112 D2E7     		b	.L103
 686              	.LVL57:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 32


 687              	.L47:
 729:Src/RFM69.c   ****         SerialPrint("01 -> reserved\r\n");
 688              		.loc 1 729 14 view .LVU165
 729:Src/RFM69.c   ****         SerialPrint("01 -> reserved\r\n");
 689              		.loc 1 729 17 is_stmt 0 view .LVU166
 690 0114 012B     		cmp	r3, #1
 691 0116 01D1     		bne	.L49
 730:Src/RFM69.c   ****       } else if (capVal == 0b10) {
 692              		.loc 1 730 9 is_stmt 1 view .LVU167
 693 0118 7548     		ldr	r0, .L108+92
 694 011a D9E7     		b	.L94
 695              	.L49:
 731:Src/RFM69.c   ****         SerialPrint("10 -> Continuous mode with bit synchronizer\r\n");
 696              		.loc 1 731 14 view .LVU168
 731:Src/RFM69.c   ****         SerialPrint("10 -> Continuous mode with bit synchronizer\r\n");
 697              		.loc 1 731 17 is_stmt 0 view .LVU169
 698 011c 022B     		cmp	r3, #2
 732:Src/RFM69.c   ****       } else if (capVal == 0b11) {
 699              		.loc 1 732 9 is_stmt 1 view .LVU170
 700 011e 0CBF     		ite	eq
 701 0120 7448     		ldreq	r0, .L108+96
 733:Src/RFM69.c   ****         SerialPrint("11 -> Continuous mode without bit synchronizer\r\n");
 702              		.loc 1 733 14 view .LVU171
 734:Src/RFM69.c   ****       }
 703              		.loc 1 734 9 view .LVU172
 704 0122 7548     		ldrne	r0, .L108+100
 705 0124 D4E7     		b	.L94
 706              	.L51:
 742:Src/RFM69.c   ****         SerialPrint("01 -> OOK\r\n");
 707              		.loc 1 742 14 view .LVU173
 742:Src/RFM69.c   ****         SerialPrint("01 -> OOK\r\n");
 708              		.loc 1 742 17 is_stmt 0 view .LVU174
 709 0126 012B     		cmp	r3, #1
 710 0128 03D1     		bne	.L53
 743:Src/RFM69.c   ****       } else if (capVal == 0b10) {
 711              		.loc 1 743 9 is_stmt 1 view .LVU175
 712 012a 7448     		ldr	r0, .L108+104
 713              	.L95:
 747:Src/RFM69.c   ****       }
 714              		.loc 1 747 9 is_stmt 0 view .LVU176
 715 012c FFF7FEFF 		bl	SerialPrint
 716              	.LVL58:
 747:Src/RFM69.c   ****       }
 717              		.loc 1 747 9 view .LVU177
 718 0130 DBE7     		b	.L52
 719              	.LVL59:
 720              	.L53:
 744:Src/RFM69.c   ****         SerialPrint("10 -> reserved\r\n");
 721              		.loc 1 744 14 is_stmt 1 view .LVU178
 744:Src/RFM69.c   ****         SerialPrint("10 -> reserved\r\n");
 722              		.loc 1 744 17 is_stmt 0 view .LVU179
 723 0132 022B     		cmp	r3, #2
 745:Src/RFM69.c   ****       } else if (capVal == 0b11) {
 724              		.loc 1 745 9 is_stmt 1 view .LVU180
 725 0134 0CBF     		ite	eq
 726 0136 7248     		ldreq	r0, .L108+108
 746:Src/RFM69.c   ****         SerialPrint("11 -> reserved\r\n");
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 33


 727              		.loc 1 746 14 view .LVU181
 747:Src/RFM69.c   ****       }
 728              		.loc 1 747 9 view .LVU182
 729 0138 7248     		ldrne	r0, .L108+112
 730 013a F7E7     		b	.L95
 731              	.LVL60:
 732              	.L55:
 754:Src/RFM69.c   ****       }
 733              		.loc 1 754 9 view .LVU183
 734 013c 7248     		ldr	r0, .L108+116
 735 013e DBE7     		b	.L96
 736              	.LVL61:
 737              	.L58:
 761:Src/RFM69.c   ****           SerialPrint("01 -> Gaussian filter, BT = 1.0\r\n");
 738              		.loc 1 761 16 view .LVU184
 761:Src/RFM69.c   ****           SerialPrint("01 -> Gaussian filter, BT = 1.0\r\n");
 739              		.loc 1 761 19 is_stmt 0 view .LVU185
 740 0140 012B     		cmp	r3, #1
 741 0142 01D1     		bne	.L60
 762:Src/RFM69.c   ****         } else if (capVal == 0b10) {
 742              		.loc 1 762 11 is_stmt 1 view .LVU186
 743 0144 7148     		ldr	r0, .L108+120
 744 0146 B8E7     		b	.L103
 745              	.L60:
 763:Src/RFM69.c   ****           SerialPrint("10 -> Gaussian filter, BT = 0.5\r\n");
 746              		.loc 1 763 16 view .LVU187
 763:Src/RFM69.c   ****           SerialPrint("10 -> Gaussian filter, BT = 0.5\r\n");
 747              		.loc 1 763 19 is_stmt 0 view .LVU188
 748 0148 022B     		cmp	r3, #2
 764:Src/RFM69.c   ****         } else if (capVal == 0b11) {
 749              		.loc 1 764 11 is_stmt 1 view .LVU189
 750 014a 0CBF     		ite	eq
 751 014c 7048     		ldreq	r0, .L108+124
 765:Src/RFM69.c   ****           SerialPrint("11 -> Gaussian filter, BT = 0.3\r\n");
 752              		.loc 1 765 16 view .LVU190
 766:Src/RFM69.c   ****         }
 753              		.loc 1 766 11 view .LVU191
 754 014e 7148     		ldrne	r0, .L108+128
 755 0150 B3E7     		b	.L103
 756              	.L57:
 769:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
 757              		.loc 1 769 9 view .LVU192
 769:Src/RFM69.c   ****           SerialPrint("00 -> no shaping\r\n");
 758              		.loc 1 769 12 is_stmt 0 view .LVU193
 759 0152 002C     		cmp	r4, #0
 760 0154 DCD0     		beq	.L62
 771:Src/RFM69.c   ****           SerialPrint("01 -> filtering with f(cutoff) = BR\r\n");
 761              		.loc 1 771 16 is_stmt 1 view .LVU194
 771:Src/RFM69.c   ****           SerialPrint("01 -> filtering with f(cutoff) = BR\r\n");
 762              		.loc 1 771 19 is_stmt 0 view .LVU195
 763 0156 012B     		cmp	r3, #1
 764 0158 01D1     		bne	.L63
 772:Src/RFM69.c   ****         } else if (capVal == 0b10) {
 765              		.loc 1 772 11 is_stmt 1 view .LVU196
 766 015a 6F48     		ldr	r0, .L108+132
 767 015c ADE7     		b	.L103
 768              	.L63:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 34


 773:Src/RFM69.c   ****           SerialPrint("10 -> filtering with f(cutoff) = 2*BR\r\n");
 769              		.loc 1 773 16 view .LVU197
 773:Src/RFM69.c   ****           SerialPrint("10 -> filtering with f(cutoff) = 2*BR\r\n");
 770              		.loc 1 773 19 is_stmt 0 view .LVU198
 771 015e 022B     		cmp	r3, #2
 774:Src/RFM69.c   ****         } else if (capVal == 0b11) {
 772              		.loc 1 774 11 is_stmt 1 view .LVU199
 773 0160 0CBF     		ite	eq
 774 0162 6E48     		ldreq	r0, .L108+136
 775:Src/RFM69.c   ****           SerialPrint("ERROR - 11 is reserved\r\n");
 775              		.loc 1 775 16 view .LVU200
 776:Src/RFM69.c   ****         }
 776              		.loc 1 776 11 view .LVU201
 777 0164 6E48     		ldrne	r0, .L108+140
 778 0166 A8E7     		b	.L103
 779              	.LVL62:
 780              	.L37:
 785:Src/RFM69.c   ****       break;
 781              		.loc 1 785 7 view .LVU202
 785:Src/RFM69.c   ****       break;
 782              		.loc 1 785 25 is_stmt 0 view .LVU203
 783 0168 2402     		lsls	r4, r4, #8
 784              	.LVL63:
 785:Src/RFM69.c   ****       break;
 785              		.loc 1 785 15 view .LVU204
 786 016a A246     		mov	r10, r4
 787              	.LVL64:
 785:Src/RFM69.c   ****       break;
 788              		.loc 1 785 15 view .LVU205
 789 016c 4FEAE47B 		asr	fp, r4, #31
 790              	.LVL65:
 786:Src/RFM69.c   ****     }
 791              		.loc 1 786 7 is_stmt 1 view .LVU206
 792              	.L25:
 922:Src/RFM69.c   ****     }
 793              		.loc 1 922 15 discriminator 2 view .LVU207
 922:Src/RFM69.c   ****     }
 794              		.loc 1 922 15 is_stmt 0 discriminator 2 view .LVU208
 795 0170 08F10108 		add	r8, r8, #1
 796              	.LVL66:
 665:Src/RFM69.c   ****     RFM69_select();
 797              		.loc 1 665 3 discriminator 2 view .LVU209
 798 0174 B8F1500F 		cmp	r8, #80
 799 0178 7FF454AF 		bne	.L83
 927:Src/RFM69.c   ****   SerialPrint("\r\n");
 800              		.loc 1 927 3 is_stmt 1 view .LVU210
 801 017c FFF7FEFF 		bl	RFM69_unselect
 802              	.LVL67:
 928:Src/RFM69.c   ****   SerialPrint("\r\n");
 803              		.loc 1 928 3 view .LVU211
 804 0180 4448     		ldr	r0, .L108
 805 0182 FFF7FEFF 		bl	SerialPrint
 806              	.LVL68:
 929:Src/RFM69.c   **** }
 807              		.loc 1 929 3 view .LVU212
 808 0186 4348     		ldr	r0, .L108
 809 0188 FFF7FEFF 		bl	SerialPrint
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 35


 810              	.LVL69:
 930:Src/RFM69.c   **** 
 811              		.loc 1 930 1 is_stmt 0 view .LVU213
 812 018c 23B0     		add	sp, sp, #140
 813              	.LCFI12:
 814              		.cfi_remember_state
 815              		.cfi_def_cfa_offset 36
 816              		@ sp needed
 817 018e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 818              	.LVL70:
 819              	.L36:
 820              	.LCFI13:
 821              		.cfi_restore_state
 822              	.LBB6:
 790:Src/RFM69.c   ****       SerialPrint("Bit Rate (Chip Rate when Manchester encoding is enabled)\r\nBitRate : ");
 823              		.loc 1 790 7 is_stmt 1 view .LVU214
 790:Src/RFM69.c   ****       SerialPrint("Bit Rate (Chip Rate when Manchester encoding is enabled)\r\nBitRate : ");
 824              		.loc 1 790 15 is_stmt 0 view .LVU215
 825 0192 44EA0A04 		orr	r4, r4, r10
 826              	.LVL71:
 791:Src/RFM69.c   ****       uint64_t val = 32UL * 1000UL * 1000UL / bitRate;
 827              		.loc 1 791 7 view .LVU216
 828 0196 6348     		ldr	r0, .L108+144
 829 0198 FFF7FEFF 		bl	SerialPrint
 830              	.LVL72:
 792:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 831              		.loc 1 792 16 view .LVU217
 832 019c 2246     		mov	r2, r4
 833 019e 5B46     		mov	r3, fp
 834 01a0 6148     		ldr	r0, .L108+148
 835 01a2 0021     		movs	r1, #0
 836 01a4 FFF7FEFF 		bl	__aeabi_uldivmod
 837              	.LVL73:
 793:Src/RFM69.c   ****       SerialPrint(pcBuf);
 838              		.loc 1 793 7 view .LVU218
 839 01a8 0246     		mov	r2, r0
 840 01aa 0B46     		mov	r3, r1
 841 01ac 01A8     		add	r0, sp, #4
 842 01ae 5F49     		ldr	r1, .L108+152
 790:Src/RFM69.c   ****       SerialPrint("Bit Rate (Chip Rate when Manchester encoding is enabled)\r\nBitRate : ");
 843              		.loc 1 790 15 view .LVU219
 844 01b0 A246     		mov	r10, r4
 845              	.LVL74:
 791:Src/RFM69.c   ****       uint64_t val = 32UL * 1000UL * 1000UL / bitRate;
 846              		.loc 1 791 7 is_stmt 1 view .LVU220
 792:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 847              		.loc 1 792 7 view .LVU221
 793:Src/RFM69.c   ****       SerialPrint(pcBuf);
 848              		.loc 1 793 7 view .LVU222
 849 01b2 FFF7FEFF 		bl	sprintf
 850              	.LVL75:
 794:Src/RFM69.c   ****       SerialPrint("\r\n");
 851              		.loc 1 794 7 view .LVU223
 852              	.L106:
 794:Src/RFM69.c   ****       SerialPrint("\r\n");
 853              		.loc 1 794 7 is_stmt 0 view .LVU224
 854              	.LBE6:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 36


 855              	.LBB7:
 831:Src/RFM69.c   ****       SerialPrint("\r\n");
 856              		.loc 1 831 7 is_stmt 1 view .LVU225
 857 01b6 01A8     		add	r0, sp, #4
 858 01b8 7FE7     		b	.L103
 859              	.LVL76:
 860              	.L35:
 831:Src/RFM69.c   ****       SerialPrint("\r\n");
 861              		.loc 1 831 7 is_stmt 0 view .LVU226
 862              	.LBE7:
 800:Src/RFM69.c   ****       break;
 863              		.loc 1 800 7 is_stmt 1 view .LVU227
 800:Src/RFM69.c   ****       break;
 864              		.loc 1 800 34 is_stmt 0 view .LVU228
 865 01ba 2402     		lsls	r4, r4, #8
 866              	.LVL77:
 800:Src/RFM69.c   ****       break;
 867              		.loc 1 800 15 view .LVU229
 868 01bc 04F47C57 		and	r7, r4, #16128
 869              	.LVL78:
 801:Src/RFM69.c   ****     }
 870              		.loc 1 801 7 is_stmt 1 view .LVU230
 871 01c0 D6E7     		b	.L25
 872              	.LVL79:
 873              	.L34:
 874              	.LBB8:
 805:Src/RFM69.c   ****       SerialPrint("Frequency deviation\r\nFdev : ");
 875              		.loc 1 805 7 view .LVU231
 806:Src/RFM69.c   ****       uint32_t val = 61UL * freqDev;
 876              		.loc 1 806 7 is_stmt 0 view .LVU232
 877 01c2 5B48     		ldr	r0, .L108+156
 805:Src/RFM69.c   ****       SerialPrint("Frequency deviation\r\nFdev : ");
 878              		.loc 1 805 15 view .LVU233
 879 01c4 2743     		orrs	r7, r7, r4
 880              	.LVL80:
 806:Src/RFM69.c   ****       uint32_t val = 61UL * freqDev;
 881              		.loc 1 806 7 is_stmt 1 view .LVU234
 882 01c6 FFF7FEFF 		bl	SerialPrint
 883              	.LVL81:
 807:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 884              		.loc 1 807 7 view .LVU235
 808:Src/RFM69.c   ****       SerialPrint(pcBuf);
 885              		.loc 1 808 7 view .LVU236
 886 01ca 3D22     		movs	r2, #61
 887 01cc 7A43     		muls	r2, r7, r2
 888              	.LVL82:
 889              	.L107:
 808:Src/RFM69.c   ****       SerialPrint(pcBuf);
 890              		.loc 1 808 7 is_stmt 0 view .LVU237
 891              	.LBE8:
 892              	.LBB9:
 830:Src/RFM69.c   ****       SerialPrint(pcBuf);
 893              		.loc 1 830 7 view .LVU238
 894 01ce 5749     		ldr	r1, .L108+152
 895 01d0 01A8     		add	r0, sp, #4
 896 01d2 FFF7FEFF 		bl	sprintf
 897              	.LVL83:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 37


 898 01d6 EEE7     		b	.L106
 899              	.L33:
 830:Src/RFM69.c   ****       SerialPrint(pcBuf);
 900              		.loc 1 830 7 view .LVU239
 901              	.LBE9:
 902              	.LBB10:
 815:Src/RFM69.c   ****       freqCenter = (tempVal << 16);
 903              		.loc 1 815 7 is_stmt 1 view .LVU240
 904              	.LVL84:
 816:Src/RFM69.c   ****       break;
 905              		.loc 1 816 7 view .LVU241
 816:Src/RFM69.c   ****       break;
 906              		.loc 1 816 18 is_stmt 0 view .LVU242
 907 01d8 2504     		lsls	r5, r4, #16
 908              	.LVL85:
 817:Src/RFM69.c   ****     }
 909              		.loc 1 817 7 is_stmt 1 view .LVU243
 910 01da C9E7     		b	.L25
 911              	.LVL86:
 912              	.L32:
 817:Src/RFM69.c   ****     }
 913              		.loc 1 817 7 is_stmt 0 view .LVU244
 914              	.LBE10:
 915              	.LBB11:
 821:Src/RFM69.c   ****       freqCenter = freqCenter | (tempVal << 8);
 916              		.loc 1 821 7 is_stmt 1 view .LVU245
 822:Src/RFM69.c   ****       break;
 917              		.loc 1 822 7 view .LVU246
 822:Src/RFM69.c   ****       break;
 918              		.loc 1 822 18 is_stmt 0 view .LVU247
 919 01dc 45EA0425 		orr	r5, r5, r4, lsl #8
 920              	.LVL87:
 823:Src/RFM69.c   ****     }
 921              		.loc 1 823 7 is_stmt 1 view .LVU248
 922 01e0 C6E7     		b	.L25
 923              	.LVL88:
 924              	.L31:
 823:Src/RFM69.c   ****     }
 925              		.loc 1 823 7 is_stmt 0 view .LVU249
 926              	.LBE11:
 927              	.LBB12:
 827:Src/RFM69.c   ****       SerialPrint("RF Carrier frequency\r\nFRF : ");
 928              		.loc 1 827 7 is_stmt 1 view .LVU250
 828:Src/RFM69.c   ****       uint32_t val = 61UL * freqCenter;
 929              		.loc 1 828 7 is_stmt 0 view .LVU251
 930 01e2 5448     		ldr	r0, .L108+160
 827:Src/RFM69.c   ****       SerialPrint("RF Carrier frequency\r\nFRF : ");
 931              		.loc 1 827 18 view .LVU252
 932 01e4 2543     		orrs	r5, r5, r4
 933              	.LVL89:
 828:Src/RFM69.c   ****       uint32_t val = 61UL * freqCenter;
 934              		.loc 1 828 7 is_stmt 1 view .LVU253
 935 01e6 FFF7FEFF 		bl	SerialPrint
 936              	.LVL90:
 829:Src/RFM69.c   ****       sprintf(pcBuf, "%d", val);
 937              		.loc 1 829 7 view .LVU254
 830:Src/RFM69.c   ****       SerialPrint(pcBuf);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 38


 938              		.loc 1 830 7 view .LVU255
 939 01ea 3D22     		movs	r2, #61
 940 01ec 6A43     		muls	r2, r5, r2
 941              	.LVL91:
 830:Src/RFM69.c   ****       SerialPrint(pcBuf);
 942              		.loc 1 830 7 is_stmt 0 view .LVU256
 943 01ee EEE7     		b	.L107
 944              	.LVL92:
 945              	.L30:
 830:Src/RFM69.c   ****       SerialPrint(pcBuf);
 946              		.loc 1 830 7 view .LVU257
 947              	.LBE12:
 837:Src/RFM69.c   ****       if (0x40 & regVal) {
 948              		.loc 1 837 7 is_stmt 1 view .LVU258
 949 01f0 5148     		ldr	r0, .L108+164
 950 01f2 FFF7FEFF 		bl	SerialPrint
 951              	.LVL93:
 838:Src/RFM69.c   ****         SerialPrint("1 -> RC calibration is over\r\n");
 952              		.loc 1 838 7 view .LVU259
 838:Src/RFM69.c   ****         SerialPrint("1 -> RC calibration is over\r\n");
 953              		.loc 1 838 10 is_stmt 0 view .LVU260
 954 01f6 6106     		lsls	r1, r4, #25
 839:Src/RFM69.c   ****       } else {
 955              		.loc 1 839 9 is_stmt 1 view .LVU261
 956 01f8 4CBF     		ite	mi
 957 01fa 5048     		ldrmi	r0, .L108+168
 841:Src/RFM69.c   ****       }
 958              		.loc 1 841 9 view .LVU262
 959 01fc 5048     		ldrpl	r0, .L108+172
 960 01fe 5CE7     		b	.L103
 961              	.L29:
 849:Src/RFM69.c   ****           "Improved AFC routine for signals with modulation index lower than "
 962              		.loc 1 849 7 view .LVU263
 963 0200 5048     		ldr	r0, .L108+176
 964 0202 FFF7FEFF 		bl	SerialPrint
 965              	.LVL94:
 852:Src/RFM69.c   ****         SerialPrint("1 -> Improved AFC routine\r\n");
 966              		.loc 1 852 7 view .LVU264
 852:Src/RFM69.c   ****         SerialPrint("1 -> Improved AFC routine\r\n");
 967              		.loc 1 852 10 is_stmt 0 view .LVU265
 968 0206 A206     		lsls	r2, r4, #26
 853:Src/RFM69.c   ****       } else {
 969              		.loc 1 853 9 is_stmt 1 view .LVU266
 970 0208 4CBF     		ite	mi
 971 020a 4F48     		ldrmi	r0, .L108+180
 855:Src/RFM69.c   ****       }
 972              		.loc 1 855 9 view .LVU267
 973 020c 4F48     		ldrpl	r0, .L108+184
 974 020e 54E7     		b	.L103
 975              	.L28:
 862:Src/RFM69.c   ****       break;
 976              		.loc 1 862 7 view .LVU268
 977 0210 4F48     		ldr	r0, .L108+188
 978              	.LVL95:
 979              	.L105:
 980              	.LBB13:
 916:Src/RFM69.c   **** 
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 39


 981              		.loc 1 916 7 is_stmt 0 view .LVU269
 982 0212 FFF7FEFF 		bl	SerialPrint
 983              	.LVL96:
 919:Src/RFM69.c   ****     }
 984              		.loc 1 919 7 is_stmt 1 view .LVU270
 985 0216 ABE7     		b	.L25
 986              	.LVL97:
 987              	.L26:
 867:Src/RFM69.c   ****       SerialPrint("Resolution of Listen mode Idle time (calibrated RC osc):\r\nListenResolIdle : ")
 988              		.loc 1 867 7 view .LVU271
 868:Src/RFM69.c   ****       val = regVal >> 6;
 989              		.loc 1 868 7 view .LVU272
 990 0218 4E48     		ldr	r0, .L108+192
 991 021a FFF7FEFF 		bl	SerialPrint
 992              	.LVL98:
 869:Src/RFM69.c   ****       if (val == 0b00) {
 993              		.loc 1 869 7 view .LVU273
 869:Src/RFM69.c   ****       if (val == 0b00) {
 994              		.loc 1 869 11 is_stmt 0 view .LVU274
 995 021e C4F38713 		ubfx	r3, r4, #6, #8
 996              	.LVL99:
 870:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 997              		.loc 1 870 7 is_stmt 1 view .LVU275
 870:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 998              		.loc 1 870 10 is_stmt 0 view .LVU276
 999 0222 E3B9     		cbnz	r3, .L69
 871:Src/RFM69.c   ****       } else if (val == 0b01) {
 1000              		.loc 1 871 9 is_stmt 1 view .LVU277
 1001 0224 4C48     		ldr	r0, .L108+196
 1002              	.L100:
 877:Src/RFM69.c   ****       }
 1003              		.loc 1 877 9 is_stmt 0 view .LVU278
 1004 0226 FFF7FEFF 		bl	SerialPrint
 1005              	.LVL100:
 880:Src/RFM69.c   ****       val = (regVal >> 4) & 0x3;
 1006              		.loc 1 880 7 is_stmt 1 view .LVU279
 1007 022a 4C48     		ldr	r0, .L108+200
 1008 022c FFF7FEFF 		bl	SerialPrint
 1009              	.LVL101:
 881:Src/RFM69.c   ****       if (val == 0b00) {
 1010              		.loc 1 881 7 view .LVU280
 881:Src/RFM69.c   ****       if (val == 0b00) {
 1011              		.loc 1 881 11 is_stmt 0 view .LVU281
 1012 0230 C4F30113 		ubfx	r3, r4, #4, #2
 1013              	.LVL102:
 882:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 1014              		.loc 1 882 7 is_stmt 1 view .LVU282
 882:Src/RFM69.c   ****         SerialPrint("00 -> reserved\r\n");
 1015              		.loc 1 882 10 is_stmt 0 view .LVU283
 1016 0234 E3B9     		cbnz	r3, .L73
 883:Src/RFM69.c   ****       } else if (val == 0b01) {
 1017              		.loc 1 883 9 is_stmt 1 view .LVU284
 1018 0236 4848     		ldr	r0, .L108+196
 1019              	.L101:
 889:Src/RFM69.c   ****       }
 1020              		.loc 1 889 9 is_stmt 0 view .LVU285
 1021 0238 FFF7FEFF 		bl	SerialPrint
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 40


 1022              	.LVL103:
 892:Src/RFM69.c   ****       if (0x8 & regVal) {
 1023              		.loc 1 892 7 is_stmt 1 view .LVU286
 1024 023c 4848     		ldr	r0, .L108+204
 1025 023e FFF7FEFF 		bl	SerialPrint
 1026              	.LVL104:
 893:Src/RFM69.c   ****         SerialPrint("1 -> signal strength is above RssiThreshold and "
 1027              		.loc 1 893 7 view .LVU287
 893:Src/RFM69.c   ****         SerialPrint("1 -> signal strength is above RssiThreshold and "
 1028              		.loc 1 893 10 is_stmt 0 view .LVU288
 1029 0242 2307     		lsls	r3, r4, #28
 894:Src/RFM69.c   ****                     "SyncAddress matched\r\n");
 1030              		.loc 1 894 9 is_stmt 1 view .LVU289
 1031 0244 4CBF     		ite	mi
 1032 0246 4748     		ldrmi	r0, .L108+208
 897:Src/RFM69.c   ****       }
 1033              		.loc 1 897 9 view .LVU290
 1034 0248 4748     		ldrpl	r0, .L108+212
 1035 024a FFF7FEFF 		bl	SerialPrint
 1036              	.LVL105:
 900:Src/RFM69.c   ****       val = (regVal >> 1) & 0x3;
 1037              		.loc 1 900 7 view .LVU291
 901:Src/RFM69.c   ****       if (val == 0b00) {
 1038              		.loc 1 901 11 is_stmt 0 view .LVU292
 1039 024e C4F34104 		ubfx	r4, r4, #1, #2
 1040              	.LVL106:
 900:Src/RFM69.c   ****       val = (regVal >> 1) & 0x3;
 1041              		.loc 1 900 7 view .LVU293
 1042 0252 4648     		ldr	r0, .L108+216
 1043 0254 FFF7FEFF 		bl	SerialPrint
 1044              	.LVL107:
 901:Src/RFM69.c   ****       if (val == 0b00) {
 1045              		.loc 1 901 7 is_stmt 1 view .LVU294
 902:Src/RFM69.c   ****         SerialPrint("00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see secti
 1046              		.loc 1 902 7 view .LVU295
 902:Src/RFM69.c   ****         SerialPrint("00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see secti
 1047              		.loc 1 902 10 is_stmt 0 view .LVU296
 1048 0258 9CB9     		cbnz	r4, .L79
 903:Src/RFM69.c   ****       } else if (val == 0b01) {
 1049              		.loc 1 903 9 is_stmt 1 view .LVU297
 1050 025a 4548     		ldr	r0, .L108+220
 1051 025c 2DE7     		b	.L103
 1052              	.LVL108:
 1053              	.L69:
 872:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 1054              		.loc 1 872 14 view .LVU298
 872:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 1055              		.loc 1 872 17 is_stmt 0 view .LVU299
 1056 025e 012B     		cmp	r3, #1
 1057 0260 01D1     		bne	.L71
 873:Src/RFM69.c   ****       } else if (val == 0b10) {
 1058              		.loc 1 873 9 is_stmt 1 view .LVU300
 1059 0262 4448     		ldr	r0, .L108+224
 1060 0264 DFE7     		b	.L100
 1061              	.L71:
 874:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 1062              		.loc 1 874 14 view .LVU301
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 41


 874:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 1063              		.loc 1 874 17 is_stmt 0 view .LVU302
 1064 0266 022B     		cmp	r3, #2
 875:Src/RFM69.c   ****       } else if (val == 0b11) {
 1065              		.loc 1 875 9 is_stmt 1 view .LVU303
 1066 0268 0CBF     		ite	eq
 1067 026a 4348     		ldreq	r0, .L108+228
 876:Src/RFM69.c   ****         SerialPrint("11 -> 262 ms\r\n");
 1068              		.loc 1 876 14 view .LVU304
 877:Src/RFM69.c   ****       }
 1069              		.loc 1 877 9 view .LVU305
 1070 026c 4348     		ldrne	r0, .L108+232
 1071 026e DAE7     		b	.L100
 1072              	.L73:
 884:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 1073              		.loc 1 884 14 view .LVU306
 884:Src/RFM69.c   ****         SerialPrint("01 -> 64 us\r\n");
 1074              		.loc 1 884 17 is_stmt 0 view .LVU307
 1075 0270 012B     		cmp	r3, #1
 1076 0272 01D1     		bne	.L75
 885:Src/RFM69.c   ****       } else if (val == 0b10) {
 1077              		.loc 1 885 9 is_stmt 1 view .LVU308
 1078 0274 3F48     		ldr	r0, .L108+224
 1079 0276 DFE7     		b	.L101
 1080              	.L75:
 886:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 1081              		.loc 1 886 14 view .LVU309
 886:Src/RFM69.c   ****         SerialPrint("10 -> 4.1 ms\r\n");
 1082              		.loc 1 886 17 is_stmt 0 view .LVU310
 1083 0278 022B     		cmp	r3, #2
 887:Src/RFM69.c   ****       } else if (val == 0b11) {
 1084              		.loc 1 887 9 is_stmt 1 view .LVU311
 1085 027a 0CBF     		ite	eq
 1086 027c 3E48     		ldreq	r0, .L108+228
 888:Src/RFM69.c   ****         SerialPrint("11 -> 262 ms\r\n");
 1087              		.loc 1 888 14 view .LVU312
 889:Src/RFM69.c   ****       }
 1088              		.loc 1 889 9 view .LVU313
 1089 027e 3F48     		ldrne	r0, .L108+232
 1090 0280 DAE7     		b	.L101
 1091              	.LVL109:
 1092              	.L79:
 904:Src/RFM69.c   ****         SerialPrint(
 1093              		.loc 1 904 14 view .LVU314
 904:Src/RFM69.c   ****         SerialPrint(
 1094              		.loc 1 904 17 is_stmt 0 view .LVU315
 1095 0282 012C     		cmp	r4, #1
 1096 0284 01D1     		bne	.L81
 905:Src/RFM69.c   ****             "01 -> chip stays in Rx mode until PayloadReady or Timeout \r\n"
 1097              		.loc 1 905 9 is_stmt 1 view .LVU316
 1098 0286 3E48     		ldr	r0, .L108+236
 1099 0288 17E7     		b	.L103
 1100              	.L81:
 909:Src/RFM69.c   ****         SerialPrint("10 -> chip stays in Rx mode until PayloadReady or Timeout "
 1101              		.loc 1 909 14 view .LVU317
 909:Src/RFM69.c   ****         SerialPrint("10 -> chip stays in Rx mode until PayloadReady or Timeout "
 1102              		.loc 1 909 17 is_stmt 0 view .LVU318
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 42


 1103 028a 022C     		cmp	r4, #2
 910:Src/RFM69.c   ****                     "occurs.  Listen mode then resumes in Idle state.  FIFO "
 1104              		.loc 1 910 9 is_stmt 1 view .LVU319
 1105 028c 0CBF     		ite	eq
 1106 028e 3D48     		ldreq	r0, .L108+240
 913:Src/RFM69.c   ****         SerialPrint("11 -> Reserved\r\n");
 1107              		.loc 1 913 14 view .LVU320
 914:Src/RFM69.c   ****       }
 1108              		.loc 1 914 9 view .LVU321
 1109 0290 3D48     		ldrne	r0, .L108+244
 1110 0292 12E7     		b	.L103
 1111              	.L109:
 1112              		.align	2
 1113              	.L108:
 1114 0294 00000000 		.word	.LC6
 1115 0298 03000000 		.word	.LC7
 1116 029c 13000000 		.word	.LC8
 1117 02a0 00000000 		.word	log_buffer
 1118 02a4 20000000 		.word	.LC9
 1119 02a8 66000000 		.word	.LC10
 1120 02ac 88000000 		.word	.LC11
 1121 02b0 F2000000 		.word	.LC12
 1122 02b4 40010000 		.word	.LC13
 1123 02b8 4A010000 		.word	.LC14
 1124 02bc 68010000 		.word	.LC15
 1125 02c0 D1010000 		.word	.LC16
 1126 02c4 1B020000 		.word	.LC17
 1127 02c8 45020000 		.word	.LC18
 1128 02cc 61020000 		.word	.LC19
 1129 02d0 7F020000 		.word	.LC20
 1130 02d4 A2020000 		.word	.LC21
 1131 02d8 26030000 		.word	.LC25
 1132 02dc 4F030000 		.word	.LC26
 1133 02e0 89030000 		.word	.LC30
 1134 02e4 9A030000 		.word	.LC31
 1135 02e8 AE030000 		.word	.LC33
 1136 02ec C3030000 		.word	.LC34
 1137 02f0 B6020000 		.word	.LC22
 1138 02f4 C7020000 		.word	.LC23
 1139 02f8 F5020000 		.word	.LC24
 1140 02fc 5B030000 		.word	.LC27
 1141 0300 67030000 		.word	.LC28
 1142 0304 78030000 		.word	.LC29
 1143 0308 A4030000 		.word	.LC32
 1144 030c D6030000 		.word	.LC35
 1145 0310 F8030000 		.word	.LC36
 1146 0314 1A040000 		.word	.LC37
 1147 0318 3C040000 		.word	.LC38
 1148 031c 62040000 		.word	.LC39
 1149 0320 8A040000 		.word	.LC40
 1150 0324 A3040000 		.word	.LC41
 1151 0328 0048E801 		.word	32000000
 1152 032c E8040000 		.word	.LC42
 1153 0330 EB040000 		.word	.LC43
 1154 0334 08050000 		.word	.LC44
 1155 0338 25050000 		.word	.LC45
 1156 033c 53050000 		.word	.LC46
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 43


 1157 0340 71050000 		.word	.LC47
 1158 0344 96050000 		.word	.LC48
 1159 0348 11060000 		.word	.LC49
 1160 034c 2D060000 		.word	.LC50
 1161 0350 49060000 		.word	.LC51
 1162 0354 54060000 		.word	.LC52
 1163 0358 A1060000 		.word	.LC53
 1164 035c DE060000 		.word	.LC57
 1165 0360 29070000 		.word	.LC58
 1166 0364 6D070000 		.word	.LC59
 1167 0368 B3070000 		.word	.LC60
 1168 036c E1070000 		.word	.LC61
 1169 0370 2B080000 		.word	.LC62
 1170 0374 B2060000 		.word	.LC54
 1171 0378 C0060000 		.word	.LC55
 1172 037c CF060000 		.word	.LC56
 1173 0380 83080000 		.word	.LC63
 1174 0384 39090000 		.word	.LC64
 1175 0388 CF090000 		.word	.LC65
 1176              	.LBE13:
 1177              		.cfi_endproc
 1178              	.LFE152:
 1180              		.section	.text.RFM69_readReg,"ax",%progbits
 1181              		.align	1
 1182              		.global	RFM69_readReg
 1183              		.syntax unified
 1184              		.thumb
 1185              		.thumb_func
 1186              		.fpu fpv4-sp-d16
 1188              	RFM69_readReg:
 1189              	.LVL110:
 1190              	.LFB155:
 949:Src/RFM69.c   ****   uint8_t regval;
 1191              		.loc 1 949 37 view -0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 950:Src/RFM69.c   ****   RFM69_select();
 1195              		.loc 1 950 3 view .LVU323
 951:Src/RFM69.c   ****   SPI_transfer8(addr & 0x7F);
 1196              		.loc 1 951 3 view .LVU324
 949:Src/RFM69.c   ****   uint8_t regval;
 1197              		.loc 1 949 37 is_stmt 0 view .LVU325
 1198 0000 10B5     		push	{r4, lr}
 1199              	.LCFI14:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 4, -8
 1202              		.cfi_offset 14, -4
 949:Src/RFM69.c   ****   uint8_t regval;
 1203              		.loc 1 949 37 view .LVU326
 1204 0002 0446     		mov	r4, r0
 951:Src/RFM69.c   ****   SPI_transfer8(addr & 0x7F);
 1205              		.loc 1 951 3 view .LVU327
 1206 0004 FFF7FEFF 		bl	RFM69_select
 1207              	.LVL111:
 952:Src/RFM69.c   ****   regval = SPI_transfer8(0);
 1208              		.loc 1 952 3 is_stmt 1 view .LVU328
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 44


 1209 0008 04F07F00 		and	r0, r4, #127
 1210 000c FFF7FEFF 		bl	SPI_transfer8
 1211              	.LVL112:
 953:Src/RFM69.c   ****   RFM69_unselect();
 1212              		.loc 1 953 3 view .LVU329
 953:Src/RFM69.c   ****   RFM69_unselect();
 1213              		.loc 1 953 12 is_stmt 0 view .LVU330
 1214 0010 0020     		movs	r0, #0
 1215 0012 FFF7FEFF 		bl	SPI_transfer8
 1216              	.LVL113:
 1217 0016 0446     		mov	r4, r0
 1218              	.LVL114:
 954:Src/RFM69.c   ****   return regval;
 1219              		.loc 1 954 3 is_stmt 1 view .LVU331
 1220 0018 FFF7FEFF 		bl	RFM69_unselect
 1221              	.LVL115:
 955:Src/RFM69.c   **** }
 1222              		.loc 1 955 3 view .LVU332
 956:Src/RFM69.c   **** 
 1223              		.loc 1 956 1 is_stmt 0 view .LVU333
 1224 001c 2046     		mov	r0, r4
 1225 001e 10BD     		pop	{r4, pc}
 956:Src/RFM69.c   **** 
 1226              		.loc 1 956 1 view .LVU334
 1227              		.cfi_endproc
 1228              	.LFE155:
 1230              		.global	__aeabi_ui2d
 1231              		.global	__aeabi_dmul
 1232              		.global	__aeabi_d2uiz
 1233              		.section	.text.RFM69_getFrequency,"ax",%progbits
 1234              		.align	1
 1235              		.global	RFM69_getFrequency
 1236              		.syntax unified
 1237              		.thumb
 1238              		.thumb_func
 1239              		.fpu fpv4-sp-d16
 1241              	RFM69_getFrequency:
 1242              	.LFB130:
 261:Src/RFM69.c   ****   return RF69_FSTEP * (((uint32_t)RFM69_readReg(REG_FRFMSB) << 16) +
 1243              		.loc 1 261 31 is_stmt 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 262:Src/RFM69.c   ****                        ((uint16_t)RFM69_readReg(REG_FRFMID) << 8) +
 1247              		.loc 1 262 3 view .LVU336
 261:Src/RFM69.c   ****   return RF69_FSTEP * (((uint32_t)RFM69_readReg(REG_FRFMSB) << 16) +
 1248              		.loc 1 261 31 is_stmt 0 view .LVU337
 1249 0000 38B5     		push	{r3, r4, r5, lr}
 1250              	.LCFI15:
 1251              		.cfi_def_cfa_offset 16
 1252              		.cfi_offset 3, -16
 1253              		.cfi_offset 4, -12
 1254              		.cfi_offset 5, -8
 1255              		.cfi_offset 14, -4
 262:Src/RFM69.c   ****                        ((uint16_t)RFM69_readReg(REG_FRFMID) << 8) +
 1256              		.loc 1 262 35 view .LVU338
 1257 0002 0720     		movs	r0, #7
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 45


 1258 0004 FFF7FEFF 		bl	RFM69_readReg
 1259              	.LVL116:
 1260 0008 0446     		mov	r4, r0
 263:Src/RFM69.c   ****                        RFM69_readReg(REG_FRFLSB));
 1261              		.loc 1 263 35 view .LVU339
 1262 000a 0820     		movs	r0, #8
 1263 000c FFF7FEFF 		bl	RFM69_readReg
 1264              	.LVL117:
 1265 0010 0546     		mov	r5, r0
 264:Src/RFM69.c   **** }
 1266              		.loc 1 264 24 view .LVU340
 1267 0012 0920     		movs	r0, #9
 1268 0014 FFF7FEFF 		bl	RFM69_readReg
 1269              	.LVL118:
 263:Src/RFM69.c   ****                        RFM69_readReg(REG_FRFLSB));
 1270              		.loc 1 263 67 view .LVU341
 1271 0018 00EB0440 		add	r0, r0, r4, lsl #16
 262:Src/RFM69.c   ****                        ((uint16_t)RFM69_readReg(REG_FRFMID) << 8) +
 1272              		.loc 1 262 21 view .LVU342
 1273 001c 00EB0520 		add	r0, r0, r5, lsl #8
 1274 0020 FFF7FEFF 		bl	__aeabi_ui2d
 1275              	.LVL119:
 1276 0024 04A3     		adr	r3, .L112
 1277 0026 D3E90023 		ldrd	r2, [r3]
 1278 002a FFF7FEFF 		bl	__aeabi_dmul
 1279              	.LVL120:
 1280 002e FFF7FEFF 		bl	__aeabi_d2uiz
 1281              	.LVL121:
 265:Src/RFM69.c   **** 
 1282              		.loc 1 265 1 view .LVU343
 1283 0032 38BD     		pop	{r3, r4, r5, pc}
 1284              	.L113:
 1285 0034 AFF30080 		.align	3
 1286              	.L112:
 1287 0038 00000000 		.word	0
 1288 003c 80844E40 		.word	1078887552
 1289              		.cfi_endproc
 1290              	.LFE130:
 1292              		.section	.text.RFM69_writeReg,"ax",%progbits
 1293              		.align	1
 1294              		.global	RFM69_writeReg
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1298              		.fpu fpv4-sp-d16
 1300              	RFM69_writeReg:
 1301              	.LVL122:
 1302              	.LFB156:
 958:Src/RFM69.c   ****   RFM69_select();
 1303              		.loc 1 958 50 is_stmt 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 959:Src/RFM69.c   ****   SPI_transfer8(addr | 0x80);
 1307              		.loc 1 959 3 view .LVU345
 958:Src/RFM69.c   ****   RFM69_select();
 1308              		.loc 1 958 50 is_stmt 0 view .LVU346
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 46


 1309 0000 38B5     		push	{r3, r4, r5, lr}
 1310              	.LCFI16:
 1311              		.cfi_def_cfa_offset 16
 1312              		.cfi_offset 3, -16
 1313              		.cfi_offset 4, -12
 1314              		.cfi_offset 5, -8
 1315              		.cfi_offset 14, -4
 958:Src/RFM69.c   ****   RFM69_select();
 1316              		.loc 1 958 50 view .LVU347
 1317 0002 0546     		mov	r5, r0
 1318 0004 0C46     		mov	r4, r1
 959:Src/RFM69.c   ****   SPI_transfer8(addr | 0x80);
 1319              		.loc 1 959 3 view .LVU348
 1320 0006 FFF7FEFF 		bl	RFM69_select
 1321              	.LVL123:
 960:Src/RFM69.c   ****   SPI_transfer8(value);
 1322              		.loc 1 960 3 is_stmt 1 view .LVU349
 1323 000a 45F08000 		orr	r0, r5, #128
 1324 000e FFF7FEFF 		bl	SPI_transfer8
 1325              	.LVL124:
 961:Src/RFM69.c   ****   RFM69_unselect();
 1326              		.loc 1 961 3 view .LVU350
 1327 0012 2046     		mov	r0, r4
 1328 0014 FFF7FEFF 		bl	SPI_transfer8
 1329              	.LVL125:
 962:Src/RFM69.c   **** }
 1330              		.loc 1 962 3 view .LVU351
 963:Src/RFM69.c   **** 
 1331              		.loc 1 963 1 is_stmt 0 view .LVU352
 1332 0018 BDE83840 		pop	{r3, r4, r5, lr}
 1333              	.LCFI17:
 1334              		.cfi_restore 14
 1335              		.cfi_restore 5
 1336              		.cfi_restore 4
 1337              		.cfi_restore 3
 1338              		.cfi_def_cfa_offset 0
 962:Src/RFM69.c   **** }
 1339              		.loc 1 962 3 view .LVU353
 1340 001c FFF7FEBF 		b	RFM69_unselect
 1341              	.LVL126:
 1342              		.cfi_endproc
 1343              	.LFE156:
 1345              		.section	.text.RFM69_setMode,"ax",%progbits
 1346              		.align	1
 1347              		.global	RFM69_setMode
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1351              		.fpu fpv4-sp-d16
 1353              	RFM69_setMode:
 1354              	.LVL127:
 1355              	.LFB132:
 284:Src/RFM69.c   ****   if (newMode == _mode)
 1356              		.loc 1 284 1 is_stmt 1 view -0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 47


 285:Src/RFM69.c   ****     return;
 1360              		.loc 1 285 3 view .LVU355
 284:Src/RFM69.c   ****   if (newMode == _mode)
 1361              		.loc 1 284 1 is_stmt 0 view .LVU356
 1362 0000 38B5     		push	{r3, r4, r5, lr}
 1363              	.LCFI18:
 1364              		.cfi_def_cfa_offset 16
 1365              		.cfi_offset 3, -16
 1366              		.cfi_offset 4, -12
 1367              		.cfi_offset 5, -8
 1368              		.cfi_offset 14, -4
 285:Src/RFM69.c   ****     return;
 1369              		.loc 1 285 15 view .LVU357
 1370 0002 1F4C     		ldr	r4, .L129
 285:Src/RFM69.c   ****     return;
 1371              		.loc 1 285 6 view .LVU358
 1372 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1373 0006 8342     		cmp	r3, r0
 284:Src/RFM69.c   ****   if (newMode == _mode)
 1374              		.loc 1 284 1 view .LVU359
 1375 0008 0546     		mov	r5, r0
 285:Src/RFM69.c   ****     return;
 1376              		.loc 1 285 6 view .LVU360
 1377 000a 13D0     		beq	.L115
 288:Src/RFM69.c   ****     case RF69_MODE_TX:
 1378              		.loc 1 288 3 is_stmt 1 view .LVU361
 1379 000c 0428     		cmp	r0, #4
 1380 000e 11D8     		bhi	.L115
 1381 0010 DFE800F0 		tbb	[pc, r0]
 1382              	.L118:
 1383 0014 29       		.byte	(.L122-.L118)/2
 1384 0015 21       		.byte	(.L121-.L118)/2
 1385 0016 19       		.byte	(.L120-.L118)/2
 1386 0017 11       		.byte	(.L119-.L118)/2
 1387 0018 03       		.byte	(.L117-.L118)/2
 1388 0019 00       		.p2align 1
 1389              	.L117:
 290:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1390              		.loc 1 290 7 view .LVU362
 290:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1391              		.loc 1 290 35 is_stmt 0 view .LVU363
 1392 001a 0120     		movs	r0, #1
 1393              	.LVL128:
 290:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1394              		.loc 1 290 35 view .LVU364
 1395 001c FFF7FEFF 		bl	RFM69_readReg
 1396              	.LVL129:
 290:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1397              		.loc 1 290 69 view .LVU365
 1398 0020 00F0E301 		and	r1, r0, #227
 290:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1399              		.loc 1 290 7 view .LVU366
 1400 0024 41F00C01 		orr	r1, r1, #12
 1401              	.L128:
 324:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1402              		.loc 1 324 7 view .LVU367
 1403 0028 0120     		movs	r0, #1
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 48


 1404 002a FFF7FEFF 		bl	RFM69_writeReg
 1405              	.LVL130:
 330:Src/RFM69.c   ****     default:
 1406              		.loc 1 330 7 is_stmt 1 view .LVU368
 1407              	.L124:
 337:Src/RFM69.c   **** 
 1408              		.loc 1 337 102 discriminator 3 view .LVU369
 337:Src/RFM69.c   **** 
 1409              		.loc 1 337 9 is_stmt 0 discriminator 3 view .LVU370
 1410 002e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1411 0030 FBB1     		cbz	r3, .L125
 1412              	.L126:
 339:Src/RFM69.c   **** }
 1413              		.loc 1 339 3 is_stmt 1 view .LVU371
 339:Src/RFM69.c   **** }
 1414              		.loc 1 339 9 is_stmt 0 view .LVU372
 1415 0032 2570     		strb	r5, [r4]
 1416              	.L115:
 340:Src/RFM69.c   **** 
 1417              		.loc 1 340 1 view .LVU373
 1418 0034 38BD     		pop	{r3, r4, r5, pc}
 1419              	.LVL131:
 1420              	.L119:
 299:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1421              		.loc 1 299 7 is_stmt 1 view .LVU374
 299:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1422              		.loc 1 299 35 is_stmt 0 view .LVU375
 1423 0036 0120     		movs	r0, #1
 1424              	.LVL132:
 299:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1425              		.loc 1 299 35 view .LVU376
 1426 0038 FFF7FEFF 		bl	RFM69_readReg
 1427              	.LVL133:
 299:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1428              		.loc 1 299 69 view .LVU377
 1429 003c 00F0E301 		and	r1, r0, #227
 299:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1430              		.loc 1 299 7 view .LVU378
 1431 0040 41F01001 		orr	r1, r1, #16
 1432 0044 F0E7     		b	.L128
 1433              	.LVL134:
 1434              	.L120:
 308:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1435              		.loc 1 308 7 is_stmt 1 view .LVU379
 308:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1436              		.loc 1 308 35 is_stmt 0 view .LVU380
 1437 0046 0120     		movs	r0, #1
 1438              	.LVL135:
 308:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1439              		.loc 1 308 35 view .LVU381
 1440 0048 FFF7FEFF 		bl	RFM69_readReg
 1441              	.LVL136:
 308:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1442              		.loc 1 308 69 view .LVU382
 1443 004c 00F0E301 		and	r1, r0, #227
 308:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1444              		.loc 1 308 7 view .LVU383
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 49


 1445 0050 41F00801 		orr	r1, r1, #8
 1446 0054 E8E7     		b	.L128
 1447              	.LVL137:
 1448              	.L121:
 316:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1449              		.loc 1 316 7 is_stmt 1 view .LVU384
 316:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1450              		.loc 1 316 35 is_stmt 0 view .LVU385
 1451 0056 0120     		movs	r0, #1
 1452              	.LVL138:
 316:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1453              		.loc 1 316 35 view .LVU386
 1454 0058 FFF7FEFF 		bl	RFM69_readReg
 1455              	.LVL139:
 316:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1456              		.loc 1 316 69 view .LVU387
 1457 005c 00F0E301 		and	r1, r0, #227
 316:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1458              		.loc 1 316 7 view .LVU388
 1459 0060 41F00401 		orr	r1, r1, #4
 1460 0064 E0E7     		b	.L128
 1461              	.LVL140:
 1462              	.L122:
 324:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1463              		.loc 1 324 7 is_stmt 1 view .LVU389
 324:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1464              		.loc 1 324 35 is_stmt 0 view .LVU390
 1465 0066 0120     		movs	r0, #1
 1466              	.LVL141:
 324:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1467              		.loc 1 324 35 view .LVU391
 1468 0068 FFF7FEFF 		bl	RFM69_readReg
 1469              	.LVL142:
 324:Src/RFM69.c   ****       //register takes longer to update and the error is falsely set
 1470              		.loc 1 324 7 view .LVU392
 1471 006c 00F0E301 		and	r1, r0, #227
 1472 0070 DAE7     		b	.L128
 1473              	.L125:
 337:Src/RFM69.c   **** 
 1474              		.loc 1 337 39 discriminator 2 view .LVU393
 1475 0072 2720     		movs	r0, #39
 1476 0074 FFF7FEFF 		bl	RFM69_readReg
 1477              	.LVL143:
 337:Src/RFM69.c   **** 
 1478              		.loc 1 337 35 discriminator 2 view .LVU394
 1479 0078 0306     		lsls	r3, r0, #24
 1480 007a D8D5     		bpl	.L124
 1481 007c D9E7     		b	.L126
 1482              	.L130:
 1483 007e 00BF     		.align	2
 1484              	.L129:
 1485 0080 00000000 		.word	.LANCHOR3
 1486              		.cfi_endproc
 1487              	.LFE132:
 1489              		.section	.text.RFM69_sleep,"ax",%progbits
 1490              		.align	1
 1491              		.global	RFM69_sleep
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 50


 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu fpv4-sp-d16
 1497              	RFM69_sleep:
 1498              	.LFB133:
 344:Src/RFM69.c   **** 
 1499              		.loc 1 344 20 is_stmt 1 view -0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 344:Src/RFM69.c   **** 
 1504              		.loc 1 344 22 view .LVU396
 1505 0000 0020     		movs	r0, #0
 1506 0002 FFF7FEBF 		b	RFM69_setMode
 1507              	.LVL144:
 1508              		.cfi_endproc
 1509              	.LFE133:
 1511              		.global	__aeabi_ddiv
 1512              		.section	.text.RFM69_setFrequency,"ax",%progbits
 1513              		.align	1
 1514              		.global	RFM69_setFrequency
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv4-sp-d16
 1520              	RFM69_setFrequency:
 1521              	.LVL145:
 1522              	.LFB131:
 268:Src/RFM69.c   ****   uint8_t oldMode = _mode;
 1523              		.loc 1 268 42 view -0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 0
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 269:Src/RFM69.c   ****   if (oldMode == RF69_MODE_TX) {
 1527              		.loc 1 269 3 view .LVU398
 268:Src/RFM69.c   ****   uint8_t oldMode = _mode;
 1528              		.loc 1 268 42 is_stmt 0 view .LVU399
 1529 0000 38B5     		push	{r3, r4, r5, lr}
 1530              	.LCFI19:
 1531              		.cfi_def_cfa_offset 16
 1532              		.cfi_offset 3, -16
 1533              		.cfi_offset 4, -12
 1534              		.cfi_offset 5, -8
 1535              		.cfi_offset 14, -4
 269:Src/RFM69.c   ****   if (oldMode == RF69_MODE_TX) {
 1536              		.loc 1 269 11 view .LVU400
 1537 0002 174B     		ldr	r3, .L135+8
 1538 0004 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1539              	.LVL146:
 270:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 1540              		.loc 1 270 3 is_stmt 1 view .LVU401
 270:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 1541              		.loc 1 270 6 is_stmt 0 view .LVU402
 1542 0006 042C     		cmp	r4, #4
 268:Src/RFM69.c   ****   uint8_t oldMode = _mode;
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 51


 1543              		.loc 1 268 42 view .LVU403
 1544 0008 0546     		mov	r5, r0
 270:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 1545              		.loc 1 270 6 view .LVU404
 1546 000a 02D1     		bne	.L133
 271:Src/RFM69.c   ****   }
 1547              		.loc 1 271 5 is_stmt 1 view .LVU405
 1548 000c 0320     		movs	r0, #3
 1549              	.LVL147:
 271:Src/RFM69.c   ****   }
 1550              		.loc 1 271 5 is_stmt 0 view .LVU406
 1551 000e FFF7FEFF 		bl	RFM69_setMode
 1552              	.LVL148:
 1553              	.L133:
 273:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMSB, freqHz >> 16);
 1554              		.loc 1 273 3 is_stmt 1 view .LVU407
 273:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMSB, freqHz >> 16);
 1555              		.loc 1 273 10 is_stmt 0 view .LVU408
 1556 0012 2846     		mov	r0, r5
 1557 0014 FFF7FEFF 		bl	__aeabi_ui2d
 1558              	.LVL149:
 1559 0018 0FA3     		adr	r3, .L135
 1560 001a D3E90023 		ldrd	r2, [r3]
 1561 001e FFF7FEFF 		bl	__aeabi_ddiv
 1562              	.LVL150:
 1563 0022 FFF7FEFF 		bl	__aeabi_d2uiz
 1564              	.LVL151:
 1565 0026 0546     		mov	r5, r0
 1566              	.LVL152:
 274:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMID, freqHz >> 8);
 1567              		.loc 1 274 3 is_stmt 1 view .LVU409
 1568 0028 C0F30741 		ubfx	r1, r0, #16, #8
 1569 002c 0720     		movs	r0, #7
 1570              	.LVL153:
 274:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFMID, freqHz >> 8);
 1571              		.loc 1 274 3 is_stmt 0 view .LVU410
 1572 002e FFF7FEFF 		bl	RFM69_writeReg
 1573              	.LVL154:
 275:Src/RFM69.c   ****   RFM69_writeReg(REG_FRFLSB, freqHz);
 1574              		.loc 1 275 3 is_stmt 1 view .LVU411
 1575 0032 C5F30721 		ubfx	r1, r5, #8, #8
 1576 0036 0820     		movs	r0, #8
 1577 0038 FFF7FEFF 		bl	RFM69_writeReg
 1578              	.LVL155:
 276:Src/RFM69.c   ****   if (oldMode == RF69_MODE_RX) {
 1579              		.loc 1 276 3 view .LVU412
 1580 003c E9B2     		uxtb	r1, r5
 1581 003e 0920     		movs	r0, #9
 1582 0040 FFF7FEFF 		bl	RFM69_writeReg
 1583              	.LVL156:
 277:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_SYNTH);
 1584              		.loc 1 277 3 view .LVU413
 277:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_SYNTH);
 1585              		.loc 1 277 6 is_stmt 0 view .LVU414
 1586 0044 032C     		cmp	r4, #3
 1587 0046 02D1     		bne	.L134
 278:Src/RFM69.c   ****   }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 52


 1588              		.loc 1 278 5 is_stmt 1 view .LVU415
 1589 0048 0220     		movs	r0, #2
 1590 004a FFF7FEFF 		bl	RFM69_setMode
 1591              	.LVL157:
 1592              	.L134:
 280:Src/RFM69.c   **** }
 1593              		.loc 1 280 3 view .LVU416
 1594 004e 2046     		mov	r0, r4
 281:Src/RFM69.c   **** 
 1595              		.loc 1 281 1 is_stmt 0 view .LVU417
 1596 0050 BDE83840 		pop	{r3, r4, r5, lr}
 1597              	.LCFI20:
 1598              		.cfi_restore 14
 1599              		.cfi_restore 5
 1600              		.cfi_restore 4
 1601              		.cfi_restore 3
 1602              		.cfi_def_cfa_offset 0
 1603              	.LVL158:
 280:Src/RFM69.c   **** }
 1604              		.loc 1 280 3 view .LVU418
 1605 0054 FFF7FEBF 		b	RFM69_setMode
 1606              	.LVL159:
 1607              	.L136:
 280:Src/RFM69.c   **** }
 1608              		.loc 1 280 3 view .LVU419
 1609              		.align	3
 1610              	.L135:
 1611 0058 00000000 		.word	0
 1612 005c 80844E40 		.word	1078887552
 1613 0060 00000000 		.word	.LANCHOR3
 1614              		.cfi_endproc
 1615              	.LFE131:
 1617              		.section	.text.RFM69_setAddress,"ax",%progbits
 1618              		.align	1
 1619              		.global	RFM69_setAddress
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu fpv4-sp-d16
 1625              	RFM69_setAddress:
 1626              	.LVL160:
 1627              	.LFB134:
 347:Src/RFM69.c   ****   _address = addr;
 1628              		.loc 1 347 37 is_stmt 1 view -0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 348:Src/RFM69.c   ****   RFM69_writeReg(REG_NODEADRS, _address);
 1633              		.loc 1 348 3 view .LVU421
 348:Src/RFM69.c   ****   RFM69_writeReg(REG_NODEADRS, _address);
 1634              		.loc 1 348 12 is_stmt 0 view .LVU422
 1635 0000 024B     		ldr	r3, .L138
 347:Src/RFM69.c   ****   _address = addr;
 1636              		.loc 1 347 37 view .LVU423
 1637 0002 0146     		mov	r1, r0
 348:Src/RFM69.c   ****   RFM69_writeReg(REG_NODEADRS, _address);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 53


 1638              		.loc 1 348 12 view .LVU424
 1639 0004 1870     		strb	r0, [r3]
 349:Src/RFM69.c   **** }
 1640              		.loc 1 349 3 is_stmt 1 view .LVU425
 1641 0006 3920     		movs	r0, #57
 1642              	.LVL161:
 349:Src/RFM69.c   **** }
 1643              		.loc 1 349 3 is_stmt 0 view .LVU426
 1644 0008 FFF7FEBF 		b	RFM69_writeReg
 1645              	.LVL162:
 1646              	.L139:
 349:Src/RFM69.c   **** }
 1647              		.loc 1 349 3 view .LVU427
 1648              		.align	2
 1649              	.L138:
 1650 000c 00000000 		.word	_address
 1651              		.cfi_endproc
 1652              	.LFE134:
 1654              		.section	.text.RFM69_setNetwork,"ax",%progbits
 1655              		.align	1
 1656              		.global	RFM69_setNetwork
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	RFM69_setNetwork:
 1663              	.LVL163:
 1664              	.LFB135:
 353:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF));
 1665              		.loc 1 353 43 is_stmt 1 view -0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 354:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE2, (uint8_t)(networkID >> 8));
 1669              		.loc 1 354 3 view .LVU429
 353:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF));
 1670              		.loc 1 353 43 is_stmt 0 view .LVU430
 1671 0000 10B5     		push	{r4, lr}
 1672              	.LCFI21:
 1673              		.cfi_def_cfa_offset 8
 1674              		.cfi_offset 4, -8
 1675              		.cfi_offset 14, -4
 354:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE2, (uint8_t)(networkID >> 8));
 1676              		.loc 1 354 3 view .LVU431
 1677 0002 C1B2     		uxtb	r1, r0
 353:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF));
 1678              		.loc 1 353 43 view .LVU432
 1679 0004 0446     		mov	r4, r0
 354:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE2, (uint8_t)(networkID >> 8));
 1680              		.loc 1 354 3 view .LVU433
 1681 0006 2F20     		movs	r0, #47
 1682              	.LVL164:
 354:Src/RFM69.c   ****   RFM69_writeReg(REG_SYNCVALUE2, (uint8_t)(networkID >> 8));
 1683              		.loc 1 354 3 view .LVU434
 1684 0008 FFF7FEFF 		bl	RFM69_writeReg
 1685              	.LVL165:
 355:Src/RFM69.c   **** }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 54


 1686              		.loc 1 355 3 is_stmt 1 view .LVU435
 1687 000c 210A     		lsrs	r1, r4, #8
 1688 000e 3020     		movs	r0, #48
 356:Src/RFM69.c   **** 
 1689              		.loc 1 356 1 is_stmt 0 view .LVU436
 1690 0010 BDE81040 		pop	{r4, lr}
 1691              	.LCFI22:
 1692              		.cfi_restore 14
 1693              		.cfi_restore 4
 1694              		.cfi_def_cfa_offset 0
 355:Src/RFM69.c   **** }
 1695              		.loc 1 355 3 view .LVU437
 1696 0014 FFF7FEBF 		b	RFM69_writeReg
 1697              	.LVL166:
 1698              		.cfi_endproc
 1699              	.LFE135:
 1701              		.section	.text.RFM69_setPowerLevel,"ax",%progbits
 1702              		.align	1
 1703              		.global	RFM69_setPowerLevel
 1704              		.syntax unified
 1705              		.thumb
 1706              		.thumb_func
 1707              		.fpu fpv4-sp-d16
 1709              	RFM69_setPowerLevel:
 1710              	.LVL167:
 1711              	.LFB136:
 370:Src/RFM69.c   ****   _powerLevel = (powerLevel > 31 ? 31 : powerLevel);
 1712              		.loc 1 370 46 is_stmt 1 view -0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 371:Src/RFM69.c   ****   if (ISRFM69HW) {
 1716              		.loc 1 371 3 view .LVU439
 370:Src/RFM69.c   ****   _powerLevel = (powerLevel > 31 ? 31 : powerLevel);
 1717              		.loc 1 370 46 is_stmt 0 view .LVU440
 1718 0000 10B5     		push	{r4, lr}
 1719              	.LCFI23:
 1720              		.cfi_def_cfa_offset 8
 1721              		.cfi_offset 4, -8
 1722              		.cfi_offset 14, -4
 371:Src/RFM69.c   ****   if (ISRFM69HW) {
 1723              		.loc 1 371 39 view .LVU441
 1724 0002 1F28     		cmp	r0, #31
 371:Src/RFM69.c   ****   if (ISRFM69HW) {
 1725              		.loc 1 371 15 view .LVU442
 1726 0004 074C     		ldr	r4, .L142
 371:Src/RFM69.c   ****   if (ISRFM69HW) {
 1727              		.loc 1 371 39 view .LVU443
 1728 0006 28BF     		it	cs
 1729 0008 1F20     		movcs	r0, #31
 1730              	.LVL168:
 371:Src/RFM69.c   ****   if (ISRFM69HW) {
 1731              		.loc 1 371 15 view .LVU444
 1732 000a 2070     		strb	r0, [r4]
 372:Src/RFM69.c   ****     _powerLevel /= 2;
 1733              		.loc 1 372 3 is_stmt 1 view .LVU445
 375:Src/RFM69.c   ****                  (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 55


 1734              		.loc 1 375 3 view .LVU446
 376:Src/RFM69.c   **** }
 1735              		.loc 1 376 19 is_stmt 0 view .LVU447
 1736 000c 1120     		movs	r0, #17
 1737 000e FFF7FEFF 		bl	RFM69_readReg
 1738              	.LVL169:
 376:Src/RFM69.c   **** }
 1739              		.loc 1 376 54 view .LVU448
 1740 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1741 0014 00F0E001 		and	r1, r0, #224
 375:Src/RFM69.c   ****                  (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
 1742              		.loc 1 375 3 view .LVU449
 1743 0018 1943     		orrs	r1, r1, r3
 1744 001a 1120     		movs	r0, #17
 377:Src/RFM69.c   **** 
 1745              		.loc 1 377 1 view .LVU450
 1746 001c BDE81040 		pop	{r4, lr}
 1747              	.LCFI24:
 1748              		.cfi_restore 14
 1749              		.cfi_restore 4
 1750              		.cfi_def_cfa_offset 0
 375:Src/RFM69.c   ****                  (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
 1751              		.loc 1 375 3 view .LVU451
 1752 0020 FFF7FEBF 		b	RFM69_writeReg
 1753              	.LVL170:
 1754              	.L143:
 1755              		.align	2
 1756              	.L142:
 1757 0024 00000000 		.word	.LANCHOR4
 1758              		.cfi_endproc
 1759              	.LFE136:
 1761              		.section	.text.RFM69_receiveBegin,"ax",%progbits
 1762              		.align	1
 1763              		.global	RFM69_receiveBegin
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1767              		.fpu fpv4-sp-d16
 1769              	RFM69_receiveBegin:
 1770              	.LFB145:
 547:Src/RFM69.c   ****   datalen = 0;
 1771              		.loc 1 547 27 is_stmt 1 view -0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 548:Src/RFM69.c   ****   senderID = 0;
 1775              		.loc 1 548 3 view .LVU453
 548:Src/RFM69.c   ****   senderID = 0;
 1776              		.loc 1 548 11 is_stmt 0 view .LVU454
 1777 0000 144A     		ldr	r2, .L149
 547:Src/RFM69.c   ****   datalen = 0;
 1778              		.loc 1 547 27 view .LVU455
 1779 0002 08B5     		push	{r3, lr}
 1780              	.LCFI25:
 1781              		.cfi_def_cfa_offset 8
 1782              		.cfi_offset 3, -8
 1783              		.cfi_offset 14, -4
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 56


 548:Src/RFM69.c   ****   senderID = 0;
 1784              		.loc 1 548 11 view .LVU456
 1785 0004 0023     		movs	r3, #0
 1786 0006 1370     		strb	r3, [r2]
 549:Src/RFM69.c   ****   targetID = 0;
 1787              		.loc 1 549 3 is_stmt 1 view .LVU457
 549:Src/RFM69.c   ****   targetID = 0;
 1788              		.loc 1 549 12 is_stmt 0 view .LVU458
 1789 0008 134A     		ldr	r2, .L149+4
 1790 000a 1370     		strb	r3, [r2]
 550:Src/RFM69.c   ****   payloadLen = 0;
 1791              		.loc 1 550 3 is_stmt 1 view .LVU459
 550:Src/RFM69.c   ****   payloadLen = 0;
 1792              		.loc 1 550 12 is_stmt 0 view .LVU460
 1793 000c 134A     		ldr	r2, .L149+8
 1794 000e 1370     		strb	r3, [r2]
 551:Src/RFM69.c   ****   ACK_Requested = 0;
 1795              		.loc 1 551 3 is_stmt 1 view .LVU461
 551:Src/RFM69.c   ****   ACK_Requested = 0;
 1796              		.loc 1 551 14 is_stmt 0 view .LVU462
 1797 0010 134A     		ldr	r2, .L149+12
 1798 0012 1370     		strb	r3, [r2]
 552:Src/RFM69.c   ****   ACK_RECEIVED = 0;
 1799              		.loc 1 552 3 is_stmt 1 view .LVU463
 552:Src/RFM69.c   ****   ACK_RECEIVED = 0;
 1800              		.loc 1 552 17 is_stmt 0 view .LVU464
 1801 0014 134A     		ldr	r2, .L149+16
 1802 0016 1370     		strb	r3, [r2]
 553:Src/RFM69.c   ****   rssi = 0;
 1803              		.loc 1 553 3 is_stmt 1 view .LVU465
 553:Src/RFM69.c   ****   rssi = 0;
 1804              		.loc 1 553 16 is_stmt 0 view .LVU466
 1805 0018 134A     		ldr	r2, .L149+20
 1806 001a 1370     		strb	r3, [r2]
 554:Src/RFM69.c   ****   interrupts();
 1807              		.loc 1 554 3 is_stmt 1 view .LVU467
 554:Src/RFM69.c   ****   interrupts();
 1808              		.loc 1 554 8 is_stmt 0 view .LVU468
 1809 001c 134A     		ldr	r2, .L149+24
 1810 001e 1380     		strh	r3, [r2]	@ movhi
 555:Src/RFM69.c   **** 
 1811              		.loc 1 555 3 is_stmt 1 view .LVU469
 1812 0020 FFF7FEFF 		bl	interrupts
 1813              	.LVL171:
 557:Src/RFM69.c   ****     RFM69_writeReg(REG_PACKETCONFIG2,
 1814              		.loc 1 557 3 view .LVU470
 557:Src/RFM69.c   ****     RFM69_writeReg(REG_PACKETCONFIG2,
 1815              		.loc 1 557 7 is_stmt 0 view .LVU471
 1816 0024 2820     		movs	r0, #40
 1817 0026 FFF7FEFF 		bl	RFM69_readReg
 1818              	.LVL172:
 557:Src/RFM69.c   ****     RFM69_writeReg(REG_PACKETCONFIG2,
 1819              		.loc 1 557 6 view .LVU472
 1820 002a 4307     		lsls	r3, r0, #29
 1821 002c 08D5     		bpl	.L145
 558:Src/RFM69.c   ****                    (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 1822              		.loc 1 558 5 is_stmt 1 view .LVU473
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 57


 559:Src/RFM69.c   ****                        RF_PACKET2_RXRESTART); // avoid RX deadlocks
 1823              		.loc 1 559 21 is_stmt 0 view .LVU474
 1824 002e 3D20     		movs	r0, #61
 1825 0030 FFF7FEFF 		bl	RFM69_readReg
 1826              	.LVL173:
 558:Src/RFM69.c   ****                    (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 1827              		.loc 1 558 5 view .LVU475
 1828 0034 40F00401 		orr	r1, r0, #4
 1829 0038 C9B2     		uxtb	r1, r1
 1830 003a 3D20     		movs	r0, #61
 1831 003c FFF7FEFF 		bl	RFM69_writeReg
 1832              	.LVL174:
 1833              	.L145:
 561:Src/RFM69.c   ****       REG_DIOMAPPING1,
 1834              		.loc 1 561 3 is_stmt 1 view .LVU476
 1835 0040 2520     		movs	r0, #37
 1836 0042 4021     		movs	r1, #64
 1837 0044 FFF7FEFF 		bl	RFM69_writeReg
 1838              	.LVL175:
 564:Src/RFM69.c   **** }
 1839              		.loc 1 564 3 view .LVU477
 1840 0048 0320     		movs	r0, #3
 565:Src/RFM69.c   **** 
 1841              		.loc 1 565 1 is_stmt 0 view .LVU478
 1842 004a BDE80840 		pop	{r3, lr}
 1843              	.LCFI26:
 1844              		.cfi_restore 14
 1845              		.cfi_restore 3
 1846              		.cfi_def_cfa_offset 0
 564:Src/RFM69.c   **** }
 1847              		.loc 1 564 3 view .LVU479
 1848 004e FFF7FEBF 		b	RFM69_setMode
 1849              	.LVL176:
 1850              	.L150:
 1851 0052 00BF     		.align	2
 1852              	.L149:
 1853 0054 00000000 		.word	datalen
 1854 0058 00000000 		.word	senderID
 1855 005c 00000000 		.word	targetID
 1856 0060 00000000 		.word	payloadLen
 1857 0064 00000000 		.word	ACK_Requested
 1858 0068 00000000 		.word	ACK_RECEIVED
 1859 006c 00000000 		.word	rssi
 1860              		.cfi_endproc
 1861              	.LFE145:
 1863              		.section	.text.RFM69_receiveDone,"ax",%progbits
 1864              		.align	1
 1865              		.global	RFM69_receiveDone
 1866              		.syntax unified
 1867              		.thumb
 1868              		.thumb_func
 1869              		.fpu fpv4-sp-d16
 1871              	RFM69_receiveDone:
 1872              	.LFB146:
 569:Src/RFM69.c   ****   // ATOMIC_BLOCK(ATOMIC_FORCEON)
 1873              		.loc 1 569 26 is_stmt 1 view -0
 1874              		.cfi_startproc
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 58


 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 571:Src/RFM69.c   ****                   // RFM69_receiveBegin()
 1877              		.loc 1 571 3 view .LVU481
 569:Src/RFM69.c   ****   // ATOMIC_BLOCK(ATOMIC_FORCEON)
 1878              		.loc 1 569 26 is_stmt 0 view .LVU482
 1879 0000 10B5     		push	{r4, lr}
 1880              	.LCFI27:
 1881              		.cfi_def_cfa_offset 8
 1882              		.cfi_offset 4, -8
 1883              		.cfi_offset 14, -4
 571:Src/RFM69.c   ****                   // RFM69_receiveBegin()
 1884              		.loc 1 571 3 view .LVU483
 1885 0002 FFF7FEFF 		bl	noInterrupts
 1886              	.LVL177:
 573:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 1887              		.loc 1 573 3 is_stmt 1 view .LVU484
 573:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 1888              		.loc 1 573 13 is_stmt 0 view .LVU485
 1889 0006 094B     		ldr	r3, .L156
 573:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 1890              		.loc 1 573 6 view .LVU486
 1891 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892 000a 032B     		cmp	r3, #3
 1893 000c 0BD1     		bne	.L152
 573:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 1894              		.loc 1 573 43 discriminator 1 view .LVU487
 1895 000e 084B     		ldr	r3, .L156+4
 573:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 1896              		.loc 1 573 29 discriminator 1 view .LVU488
 1897 0010 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1898 0012 24B1     		cbz	r4, .L153
 574:Src/RFM69.c   ****     return true;
 1899              		.loc 1 574 5 is_stmt 1 view .LVU489
 1900 0014 0120     		movs	r0, #1
 1901 0016 FFF7FEFF 		bl	RFM69_setMode
 1902              	.LVL178:
 575:Src/RFM69.c   ****   } else if (_mode == RF69_MODE_RX) // already in RX no payload yet
 1903              		.loc 1 575 5 view .LVU490
 575:Src/RFM69.c   ****   } else if (_mode == RF69_MODE_RX) // already in RX no payload yet
 1904              		.loc 1 575 12 is_stmt 0 view .LVU491
 1905 001a 0120     		movs	r0, #1
 1906              	.L154:
 583:Src/RFM69.c   **** 
 1907              		.loc 1 583 1 view .LVU492
 1908 001c 10BD     		pop	{r4, pc}
 1909              	.L153:
 576:Src/RFM69.c   ****   {
 1910              		.loc 1 576 10 is_stmt 1 view .LVU493
 578:Src/RFM69.c   ****     return false;
 1911              		.loc 1 578 5 view .LVU494
 1912 001e FFF7FEFF 		bl	interrupts
 1913              	.LVL179:
 579:Src/RFM69.c   ****   }
 1914              		.loc 1 579 5 view .LVU495
 1915              	.L155:
 582:Src/RFM69.c   **** }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 59


 1916              		.loc 1 582 3 view .LVU496
 582:Src/RFM69.c   **** }
 1917              		.loc 1 582 10 is_stmt 0 view .LVU497
 1918 0022 0020     		movs	r0, #0
 1919 0024 FAE7     		b	.L154
 1920              	.L152:
 576:Src/RFM69.c   ****   {
 1921              		.loc 1 576 10 is_stmt 1 view .LVU498
 581:Src/RFM69.c   ****   return false;
 1922              		.loc 1 581 3 view .LVU499
 1923 0026 FFF7FEFF 		bl	RFM69_receiveBegin
 1924              	.LVL180:
 1925 002a FAE7     		b	.L155
 1926              	.L157:
 1927              		.align	2
 1928              	.L156:
 1929 002c 00000000 		.word	.LANCHOR3
 1930 0030 00000000 		.word	payloadLen
 1931              		.cfi_endproc
 1932              	.LFE146:
 1934              		.section	.text.RFM69_ACKReceived,"ax",%progbits
 1935              		.align	1
 1936              		.global	RFM69_ACKReceived
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1940              		.fpu fpv4-sp-d16
 1942              	RFM69_ACKReceived:
 1943              	.LVL181:
 1944              	.LFB140:
 425:Src/RFM69.c   ****   if (RFM69_receiveDone())
 1945              		.loc 1 425 44 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Src/RFM69.c   ****     return (senderID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) &&
 1949              		.loc 1 426 3 view .LVU501
 425:Src/RFM69.c   ****   if (RFM69_receiveDone())
 1950              		.loc 1 425 44 is_stmt 0 view .LVU502
 1951 0000 10B5     		push	{r4, lr}
 1952              	.LCFI28:
 1953              		.cfi_def_cfa_offset 8
 1954              		.cfi_offset 4, -8
 1955              		.cfi_offset 14, -4
 425:Src/RFM69.c   ****   if (RFM69_receiveDone())
 1956              		.loc 1 425 44 view .LVU503
 1957 0002 0446     		mov	r4, r0
 426:Src/RFM69.c   ****     return (senderID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) &&
 1958              		.loc 1 426 7 view .LVU504
 1959 0004 FFF7FEFF 		bl	RFM69_receiveDone
 1960              	.LVL182:
 426:Src/RFM69.c   ****     return (senderID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) &&
 1961              		.loc 1 426 6 view .LVU505
 1962 0008 50B1     		cbz	r0, .L159
 1963              	.LVL183:
 1964              	.LBB16:
 1965              	.LBI16:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 60


 425:Src/RFM69.c   ****   if (RFM69_receiveDone())
 1966              		.loc 1 425 6 is_stmt 1 view .LVU506
 1967              	.LBB17:
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1968              		.loc 1 427 5 view .LVU507
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1969              		.loc 1 427 22 is_stmt 0 view .LVU508
 1970 000a 074B     		ldr	r3, .L166
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1971              		.loc 1 427 74 view .LVU509
 1972 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1973 000e A342     		cmp	r3, r4
 1974 0010 01D0     		beq	.L160
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1975              		.loc 1 427 36 view .LVU510
 1976 0012 FF2C     		cmp	r4, #255
 1977 0014 05D1     		bne	.L162
 1978              	.L160:
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1979              		.loc 1 427 74 view .LVU511
 1980 0016 054B     		ldr	r3, .L166+4
 1981 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1982 001a 0030     		adds	r0, r0, #0
 1983 001c 18BF     		it	ne
 1984 001e 0120     		movne	r0, #1
 1985              	.LVL184:
 1986              	.L159:
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1987              		.loc 1 427 74 view .LVU512
 1988              	.LBE17:
 1989              	.LBE16:
 430:Src/RFM69.c   **** 
 1990              		.loc 1 430 1 view .LVU513
 1991 0020 10BD     		pop	{r4, pc}
 1992              	.LVL185:
 1993              	.L162:
 1994              	.LBB19:
 1995              	.LBB18:
 427:Src/RFM69.c   ****            ACK_RECEIVED;
 1996              		.loc 1 427 74 view .LVU514
 1997 0022 0020     		movs	r0, #0
 1998 0024 FCE7     		b	.L159
 1999              	.L167:
 2000 0026 00BF     		.align	2
 2001              	.L166:
 2002 0028 00000000 		.word	senderID
 2003 002c 00000000 		.word	ACK_RECEIVED
 2004              	.LBE18:
 2005              	.LBE19:
 2006              		.cfi_endproc
 2007              	.LFE140:
 2009              		.section	.text.RFM69_readRSSI,"ax",%progbits
 2010              		.align	1
 2011              		.global	RFM69_readRSSI
 2012              		.syntax unified
 2013              		.thumb
 2014              		.thumb_func
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 61


 2015              		.fpu fpv4-sp-d16
 2017              	RFM69_readRSSI:
 2018              	.LVL186:
 2019              	.LFB148:
 602:Src/RFM69.c   ****   int16_t rssi = 0;
 2020              		.loc 1 602 43 is_stmt 1 view -0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 603:Src/RFM69.c   ****   if (forceTrigger) {
 2024              		.loc 1 603 3 view .LVU516
 604:Src/RFM69.c   ****     // RSSI trigger not needed if DAGC is in continuous mode
 2025              		.loc 1 604 3 view .LVU517
 602:Src/RFM69.c   ****   int16_t rssi = 0;
 2026              		.loc 1 602 43 is_stmt 0 view .LVU518
 2027 0000 08B5     		push	{r3, lr}
 2028              	.LCFI29:
 2029              		.cfi_def_cfa_offset 8
 2030              		.cfi_offset 3, -8
 2031              		.cfi_offset 14, -4
 604:Src/RFM69.c   ****     // RSSI trigger not needed if DAGC is in continuous mode
 2032              		.loc 1 604 6 view .LVU519
 2033 0002 40B1     		cbz	r0, .L169
 606:Src/RFM69.c   ****     while ((RFM69_readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00)
 2034              		.loc 1 606 5 is_stmt 1 view .LVU520
 2035 0004 0121     		movs	r1, #1
 2036 0006 2320     		movs	r0, #35
 2037              	.LVL187:
 606:Src/RFM69.c   ****     while ((RFM69_readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00)
 2038              		.loc 1 606 5 is_stmt 0 view .LVU521
 2039 0008 FFF7FEFF 		bl	RFM69_writeReg
 2040              	.LVL188:
 607:Src/RFM69.c   ****       ; // wait for RSSI_Ready
 2041              		.loc 1 607 5 is_stmt 1 view .LVU522
 2042              	.L170:
 608:Src/RFM69.c   ****   }
 2043              		.loc 1 608 7 discriminator 1 view .LVU523
 607:Src/RFM69.c   ****       ; // wait for RSSI_Ready
 2044              		.loc 1 607 13 is_stmt 0 discriminator 1 view .LVU524
 2045 000c 2320     		movs	r0, #35
 2046 000e FFF7FEFF 		bl	RFM69_readReg
 2047              	.LVL189:
 607:Src/RFM69.c   ****       ; // wait for RSSI_Ready
 2048              		.loc 1 607 11 discriminator 1 view .LVU525
 2049 0012 8307     		lsls	r3, r0, #30
 2050 0014 FAD5     		bpl	.L170
 2051              	.L169:
 610:Src/RFM69.c   ****   rssi >>= 1;
 2052              		.loc 1 610 3 is_stmt 1 view .LVU526
 610:Src/RFM69.c   ****   rssi >>= 1;
 2053              		.loc 1 610 11 is_stmt 0 view .LVU527
 2054 0016 2420     		movs	r0, #36
 2055 0018 FFF7FEFF 		bl	RFM69_readReg
 2056              	.LVL190:
 610:Src/RFM69.c   ****   rssi >>= 1;
 2057              		.loc 1 610 8 view .LVU528
 2058 001c 4042     		rsbs	r0, r0, #0
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 62


 2059              	.LVL191:
 611:Src/RFM69.c   ****   return rssi;
 2060              		.loc 1 611 3 is_stmt 1 view .LVU529
 612:Src/RFM69.c   **** }
 2061              		.loc 1 612 3 view .LVU530
 613:Src/RFM69.c   **** 
 2062              		.loc 1 613 1 is_stmt 0 view .LVU531
 2063 001e 40F34E00 		sbfx	r0, r0, #1, #15
 2064              	.LVL192:
 613:Src/RFM69.c   **** 
 2065              		.loc 1 613 1 view .LVU532
 2066 0022 08BD     		pop	{r3, pc}
 2067              		.cfi_endproc
 2068              	.LFE148:
 2070              		.section	.text.RFM69_canSend,"ax",%progbits
 2071              		.align	1
 2072              		.global	RFM69_canSend
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	RFM69_canSend:
 2079              	.LFB137:
 379:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && payloadLen == 0 &&
 2080              		.loc 1 379 22 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2084              		.loc 1 380 3 view .LVU534
 379:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && payloadLen == 0 &&
 2085              		.loc 1 379 22 is_stmt 0 view .LVU535
 2086 0000 08B5     		push	{r3, lr}
 2087              	.LCFI30:
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 3, -8
 2090              		.cfi_offset 14, -4
 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2091              		.loc 1 380 13 view .LVU536
 2092 0002 094B     		ldr	r3, .L180
 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2093              		.loc 1 380 6 view .LVU537
 2094 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2095 0006 032B     		cmp	r3, #3
 2096 0008 01D0     		beq	.L177
 2097              	.L179:
 387:Src/RFM69.c   **** }
 2098              		.loc 1 387 10 view .LVU538
 2099 000a 0020     		movs	r0, #0
 2100              	.L178:
 388:Src/RFM69.c   **** 
 2101              		.loc 1 388 1 view .LVU539
 2102 000c 08BD     		pop	{r3, pc}
 2103              	.L177:
 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2104              		.loc 1 380 43 discriminator 1 view .LVU540
 2105 000e 074B     		ldr	r3, .L180+4
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 63


 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2106              		.loc 1 380 29 discriminator 1 view .LVU541
 2107 0010 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2108 0012 0028     		cmp	r0, #0
 2109 0014 F9D1     		bne	.L179
 2110              	.LBB22:
 2111              	.LBI22:
 379:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && payloadLen == 0 &&
 2112              		.loc 1 379 6 is_stmt 1 view .LVU542
 2113              	.LBB23:
 381:Src/RFM69.c   ****                                           // detected assume channel activity
 2114              		.loc 1 381 7 is_stmt 0 view .LVU543
 2115 0016 FFF7FEFF 		bl	RFM69_readRSSI
 2116              	.LVL193:
 380:Src/RFM69.c   ****       RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is
 2117              		.loc 1 380 48 view .LVU544
 2118 001a 5A30     		adds	r0, r0, #90
 2119 001c F5DA     		bge	.L179
 384:Src/RFM69.c   ****     return true;
 2120              		.loc 1 384 5 is_stmt 1 view .LVU545
 2121 001e 0120     		movs	r0, #1
 2122 0020 FFF7FEFF 		bl	RFM69_setMode
 2123              	.LVL194:
 385:Src/RFM69.c   ****   }
 2124              		.loc 1 385 5 view .LVU546
 385:Src/RFM69.c   ****   }
 2125              		.loc 1 385 12 is_stmt 0 view .LVU547
 2126 0024 0120     		movs	r0, #1
 2127 0026 F1E7     		b	.L178
 2128              	.L181:
 2129              		.align	2
 2130              	.L180:
 2131 0028 00000000 		.word	.LANCHOR3
 2132 002c 00000000 		.word	payloadLen
 2133              	.LBE23:
 2134              	.LBE22:
 2135              		.cfi_endproc
 2136              	.LFE137:
 2138              		.section	.text.RFM69_setHighPower,"ax",%progbits
 2139              		.align	1
 2140              		.global	RFM69_setHighPower
 2141              		.syntax unified
 2142              		.thumb
 2143              		.thumb_func
 2144              		.fpu fpv4-sp-d16
 2146              	RFM69_setHighPower:
 2147              	.LVL195:
 2148              	.LFB150:
 627:Src/RFM69.c   ****   RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 2149              		.loc 1 627 37 is_stmt 1 view -0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 0
 2152              		@ frame_needed = 0, uses_anonymous_args = 0
 628:Src/RFM69.c   ****   if (ISRFM69HW) // turning ON
 2153              		.loc 1 628 3 view .LVU549
 627:Src/RFM69.c   ****   RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 2154              		.loc 1 627 37 is_stmt 0 view .LVU550
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 64


 2155 0000 08B5     		push	{r3, lr}
 2156              	.LCFI31:
 2157              		.cfi_def_cfa_offset 8
 2158              		.cfi_offset 3, -8
 2159              		.cfi_offset 14, -4
 628:Src/RFM69.c   ****   if (ISRFM69HW) // turning ON
 2160              		.loc 1 628 3 view .LVU551
 2161 0002 1A21     		movs	r1, #26
 2162 0004 1320     		movs	r0, #19
 2163              	.LVL196:
 628:Src/RFM69.c   ****   if (ISRFM69HW) // turning ON
 2164              		.loc 1 628 3 view .LVU552
 2165 0006 FFF7FEFF 		bl	RFM69_writeReg
 2166              	.LVL197:
 629:Src/RFM69.c   ****     RFM69_writeReg(REG_PALEVEL,
 2167              		.loc 1 629 3 is_stmt 1 view .LVU553
 634:Src/RFM69.c   ****                                     RF_PALEVEL_PA2_OFF |
 2168              		.loc 1 634 5 view .LVU554
 2169 000a 044B     		ldr	r3, .L183
 2170 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2171 000e 1120     		movs	r0, #17
 2172 0010 41F08001 		orr	r1, r1, #128
 637:Src/RFM69.c   **** 
 2173              		.loc 1 637 1 is_stmt 0 view .LVU555
 2174 0014 BDE80840 		pop	{r3, lr}
 2175              	.LCFI32:
 2176              		.cfi_restore 14
 2177              		.cfi_restore 3
 2178              		.cfi_def_cfa_offset 0
 634:Src/RFM69.c   ****                                     RF_PALEVEL_PA2_OFF |
 2179              		.loc 1 634 5 view .LVU556
 2180 0018 FFF7FEBF 		b	RFM69_writeReg
 2181              	.LVL198:
 2182              	.L184:
 2183              		.align	2
 2184              	.L183:
 2185 001c 00000000 		.word	.LANCHOR4
 2186              		.cfi_endproc
 2187              	.LFE150:
 2189              		.section	.text.RFM69_setHighPowerRegs,"ax",%progbits
 2190              		.align	1
 2191              		.global	RFM69_setHighPowerRegs
 2192              		.syntax unified
 2193              		.thumb
 2194              		.thumb_func
 2195              		.fpu fpv4-sp-d16
 2197              	RFM69_setHighPowerRegs:
 2198              	.LVL199:
 2199              	.LFB151:
 640:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 2200              		.loc 1 640 41 is_stmt 1 view -0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 0
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 641:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 2204              		.loc 1 641 3 view .LVU558
 640:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 65


 2205              		.loc 1 640 41 is_stmt 0 view .LVU559
 2206 0000 10B5     		push	{r4, lr}
 2207              	.LCFI33:
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 4, -8
 2210              		.cfi_offset 14, -4
 641:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 2211              		.loc 1 641 3 view .LVU560
 2212 0002 041E     		subs	r4, r0, #0
 2213 0004 14BF     		ite	ne
 2214 0006 5D21     		movne	r1, #93
 2215 0008 5521     		moveq	r1, #85
 2216 000a 5A20     		movs	r0, #90
 2217              	.LVL200:
 641:Src/RFM69.c   ****   RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 2218              		.loc 1 641 3 view .LVU561
 2219 000c FFF7FEFF 		bl	RFM69_writeReg
 2220              	.LVL201:
 642:Src/RFM69.c   **** }
 2221              		.loc 1 642 3 is_stmt 1 view .LVU562
 2222 0010 002C     		cmp	r4, #0
 2223 0012 14BF     		ite	ne
 2224 0014 7C21     		movne	r1, #124
 2225 0016 7021     		moveq	r1, #112
 2226 0018 5C20     		movs	r0, #92
 643:Src/RFM69.c   **** 
 2227              		.loc 1 643 1 is_stmt 0 view .LVU563
 2228 001a BDE81040 		pop	{r4, lr}
 2229              	.LCFI34:
 2230              		.cfi_restore 14
 2231              		.cfi_restore 4
 2232              		.cfi_def_cfa_offset 0
 642:Src/RFM69.c   **** }
 2233              		.loc 1 642 3 view .LVU564
 2234 001e FFF7FEBF 		b	RFM69_writeReg
 2235              	.LVL202:
 2236              		.cfi_endproc
 2237              	.LFE151:
 2239              		.section	.text.RFM69_readTemperature,"ax",%progbits
 2240              		.align	1
 2241              		.global	RFM69_readTemperature
 2242              		.syntax unified
 2243              		.thumb
 2244              		.thumb_func
 2245              		.fpu fpv4-sp-d16
 2247              	RFM69_readTemperature:
 2248              	.LVL203:
 2249              	.LFB153:
 933:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2250              		.loc 1 933 1 is_stmt 1 view -0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 0
 2253              		@ frame_needed = 0, uses_anonymous_args = 0
 934:Src/RFM69.c   ****   RFM69_writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
 2254              		.loc 1 934 3 view .LVU566
 933:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2255              		.loc 1 933 1 is_stmt 0 view .LVU567
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 66


 2256 0000 10B5     		push	{r4, lr}
 2257              	.LCFI35:
 2258              		.cfi_def_cfa_offset 8
 2259              		.cfi_offset 4, -8
 2260              		.cfi_offset 14, -4
 933:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2261              		.loc 1 933 1 view .LVU568
 2262 0002 0446     		mov	r4, r0
 934:Src/RFM69.c   ****   RFM69_writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
 2263              		.loc 1 934 3 view .LVU569
 2264 0004 0120     		movs	r0, #1
 2265              	.LVL204:
 934:Src/RFM69.c   ****   RFM69_writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
 2266              		.loc 1 934 3 view .LVU570
 2267 0006 FFF7FEFF 		bl	RFM69_setMode
 2268              	.LVL205:
 935:Src/RFM69.c   ****   while ((RFM69_readReg(REG_TEMP1) & RF_TEMP1_MEAS_RUNNING))
 2269              		.loc 1 935 3 is_stmt 1 view .LVU571
 2270 000a 0821     		movs	r1, #8
 2271 000c 4E20     		movs	r0, #78
 2272 000e FFF7FEFF 		bl	RFM69_writeReg
 2273              	.LVL206:
 936:Src/RFM69.c   ****     ;
 2274              		.loc 1 936 3 view .LVU572
 2275              	.L191:
 937:Src/RFM69.c   ****   return ~RFM69_readReg(REG_TEMP2) + COURSE_TEMP_COEF +
 2276              		.loc 1 937 5 discriminator 1 view .LVU573
 936:Src/RFM69.c   ****     ;
 2277              		.loc 1 936 11 is_stmt 0 discriminator 1 view .LVU574
 2278 0012 4E20     		movs	r0, #78
 2279 0014 FFF7FEFF 		bl	RFM69_readReg
 2280              	.LVL207:
 936:Src/RFM69.c   ****     ;
 2281              		.loc 1 936 9 discriminator 1 view .LVU575
 2282 0018 4307     		lsls	r3, r0, #29
 2283 001a FAD4     		bmi	.L191
 938:Src/RFM69.c   ****          calFactor; // 'complement' corrects the slope, rising temp = rising val
 2284              		.loc 1 938 3 is_stmt 1 view .LVU576
 938:Src/RFM69.c   ****          calFactor; // 'complement' corrects the slope, rising temp = rising val
 2285              		.loc 1 938 11 is_stmt 0 view .LVU577
 2286 001c 4F20     		movs	r0, #79
 2287 001e FFF7FEFF 		bl	RFM69_readReg
 2288              	.LVL208:
 938:Src/RFM69.c   ****          calFactor; // 'complement' corrects the slope, rising temp = rising val
 2289              		.loc 1 938 55 view .LVU578
 2290 0022 5B3C     		subs	r4, r4, #91
 2291 0024 201A     		subs	r0, r4, r0
 940:Src/RFM69.c   ****   // correction
 2292              		.loc 1 940 1 view .LVU579
 2293 0026 C0B2     		uxtb	r0, r0
 2294 0028 10BD     		pop	{r4, pc}
 2295              		.cfi_endproc
 2296              	.LFE153:
 2298              		.section	.text.RFM69_rcCalibration,"ax",%progbits
 2299              		.align	1
 2300              		.global	RFM69_rcCalibration
 2301              		.syntax unified
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 67


 2302              		.thumb
 2303              		.thumb_func
 2304              		.fpu fpv4-sp-d16
 2306              	RFM69_rcCalibration:
 2307              	.LFB154:
 943:Src/RFM69.c   ****   RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
 2308              		.loc 1 943 28 is_stmt 1 view -0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 944:Src/RFM69.c   ****   while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00)
 2312              		.loc 1 944 3 view .LVU581
 943:Src/RFM69.c   ****   RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
 2313              		.loc 1 943 28 is_stmt 0 view .LVU582
 2314 0000 08B5     		push	{r3, lr}
 2315              	.LCFI36:
 2316              		.cfi_def_cfa_offset 8
 2317              		.cfi_offset 3, -8
 2318              		.cfi_offset 14, -4
 944:Src/RFM69.c   ****   while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00)
 2319              		.loc 1 944 3 view .LVU583
 2320 0002 8021     		movs	r1, #128
 2321 0004 0A20     		movs	r0, #10
 2322 0006 FFF7FEFF 		bl	RFM69_writeReg
 2323              	.LVL209:
 945:Src/RFM69.c   ****     ;
 2324              		.loc 1 945 3 is_stmt 1 view .LVU584
 2325              	.L194:
 946:Src/RFM69.c   **** }
 2326              		.loc 1 946 5 discriminator 1 view .LVU585
 945:Src/RFM69.c   ****     ;
 2327              		.loc 1 945 11 is_stmt 0 discriminator 1 view .LVU586
 2328 000a 0A20     		movs	r0, #10
 2329 000c FFF7FEFF 		bl	RFM69_readReg
 2330              	.LVL210:
 945:Src/RFM69.c   ****     ;
 2331              		.loc 1 945 9 discriminator 1 view .LVU587
 2332 0010 4306     		lsls	r3, r0, #25
 2333 0012 FAD5     		bpl	.L194
 947:Src/RFM69.c   **** 
 2334              		.loc 1 947 1 view .LVU588
 2335 0014 08BD     		pop	{r3, pc}
 2336              		.cfi_endproc
 2337              	.LFE154:
 2339              		.section	.text.RFM69_sendFrame,"ax",%progbits
 2340              		.align	1
 2341              		.syntax unified
 2342              		.thumb
 2343              		.thumb_func
 2344              		.fpu fpv4-sp-d16
 2346              	RFM69_sendFrame:
 2347              	.LVL211:
 2348              	.LFB143:
 459:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception
 2349              		.loc 1 459 80 is_stmt 1 view -0
 2350              		.cfi_startproc
 2351              		@ args = 4, pretend = 0, frame = 0
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 68


 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 459:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception
 2353              		.loc 1 459 80 is_stmt 0 view .LVU590
 2354 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2355              	.LCFI37:
 2356              		.cfi_def_cfa_offset 24
 2357              		.cfi_offset 4, -24
 2358              		.cfi_offset 5, -20
 2359              		.cfi_offset 6, -16
 2360              		.cfi_offset 7, -12
 2361              		.cfi_offset 8, -8
 2362              		.cfi_offset 14, -4
 459:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception
 2363              		.loc 1 459 80 view .LVU591
 2364 0004 0746     		mov	r7, r0
 460:Src/RFM69.c   ****                                     // while filling fifo
 2365              		.loc 1 460 3 is_stmt 1 view .LVU592
 2366 0006 0120     		movs	r0, #1
 2367              	.LVL212:
 459:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception
 2368              		.loc 1 459 80 is_stmt 0 view .LVU593
 2369 0008 0D46     		mov	r5, r1
 2370 000a 1446     		mov	r4, r2
 2371 000c 1E46     		mov	r6, r3
 2372 000e 9DF81880 		ldrb	r8, [sp, #24]	@ zero_extendqisi2
 460:Src/RFM69.c   ****                                     // while filling fifo
 2373              		.loc 1 460 3 view .LVU594
 2374 0012 FFF7FEFF 		bl	RFM69_setMode
 2375              	.LVL213:
 462:Src/RFM69.c   ****     ; // wait for ModeReady
 2376              		.loc 1 462 3 is_stmt 1 view .LVU595
 2377              	.L198:
 463:Src/RFM69.c   ****   RFM69_writeReg(REG_DIOMAPPING1,
 2378              		.loc 1 463 5 discriminator 1 view .LVU596
 462:Src/RFM69.c   ****     ; // wait for ModeReady
 2379              		.loc 1 462 11 is_stmt 0 discriminator 1 view .LVU597
 2380 0016 2720     		movs	r0, #39
 2381 0018 FFF7FEFF 		bl	RFM69_readReg
 2382              	.LVL214:
 462:Src/RFM69.c   ****     ; // wait for ModeReady
 2383              		.loc 1 462 9 discriminator 1 view .LVU598
 2384 001c 0306     		lsls	r3, r0, #24
 2385 001e FAD5     		bpl	.L198
 464:Src/RFM69.c   ****                  RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 2386              		.loc 1 464 3 is_stmt 1 view .LVU599
 2387 0020 0021     		movs	r1, #0
 2388 0022 2520     		movs	r0, #37
 2389 0024 FFF7FEFF 		bl	RFM69_writeReg
 2390              	.LVL215:
 466:Src/RFM69.c   ****     bufferSize = RF69_MAX_DATA_LEN;
 2391              		.loc 1 466 3 view .LVU600
 2392 0028 3D2C     		cmp	r4, #61
 2393 002a 28BF     		it	cs
 2394 002c 3D24     		movcs	r4, #61
 2395              	.LVL216:
 470:Src/RFM69.c   ****   if (sendACK)
 2396              		.loc 1 470 3 view .LVU601
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 69


 471:Src/RFM69.c   ****     CTLbyte = RFM69_CTL_SENDACK;
 2397              		.loc 1 471 3 view .LVU602
 471:Src/RFM69.c   ****     CTLbyte = RFM69_CTL_SENDACK;
 2398              		.loc 1 471 6 is_stmt 0 view .LVU603
 2399 002e B8F1000F 		cmp	r8, #0
 2400 0032 2ED1     		bne	.L204
 473:Src/RFM69.c   ****     CTLbyte = RFM69_CTL_REQACK;
 2401              		.loc 1 473 8 is_stmt 1 view .LVU604
 474:Src/RFM69.c   **** 
 2402              		.loc 1 474 13 is_stmt 0 view .LVU605
 2403 0034 002E     		cmp	r6, #0
 2404 0036 0CBF     		ite	eq
 2405 0038 0026     		moveq	r6, #0
 2406 003a 4026     		movne	r6, #64
 2407              	.L199:
 2408              	.LVL217:
 477:Src/RFM69.c   ****   SPI_transfer8(REG_FIFO | 0x80);
 2409              		.loc 1 477 3 is_stmt 1 view .LVU606
 2410 003c FFF7FEFF 		bl	RFM69_select
 2411              	.LVL218:
 478:Src/RFM69.c   ****   SPI_transfer8(bufferSize + 3);
 2412              		.loc 1 478 3 view .LVU607
 2413 0040 8020     		movs	r0, #128
 2414 0042 FFF7FEFF 		bl	SPI_transfer8
 2415              	.LVL219:
 479:Src/RFM69.c   ****   SPI_transfer8(toAddress);
 2416              		.loc 1 479 3 view .LVU608
 2417 0046 E01C     		adds	r0, r4, #3
 2418 0048 C0B2     		uxtb	r0, r0
 2419 004a FFF7FEFF 		bl	SPI_transfer8
 2420              	.LVL220:
 480:Src/RFM69.c   ****   SPI_transfer8(_address);
 2421              		.loc 1 480 3 view .LVU609
 2422 004e 3846     		mov	r0, r7
 2423 0050 FFF7FEFF 		bl	SPI_transfer8
 2424              	.LVL221:
 481:Src/RFM69.c   ****   SPI_transfer8(CTLbyte);
 2425              		.loc 1 481 3 view .LVU610
 2426 0054 124B     		ldr	r3, .L209
 2427 0056 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2428 0058 FFF7FEFF 		bl	SPI_transfer8
 2429              	.LVL222:
 482:Src/RFM69.c   ****   for (uint8_t i = 0; i < bufferSize; i++)
 2430              		.loc 1 482 3 view .LVU611
 2431 005c 3046     		mov	r0, r6
 2432 005e FFF7FEFF 		bl	SPI_transfer8
 2433              	.LVL223:
 483:Src/RFM69.c   ****     SPI_transfer8(((uint8_t *)buffer)[i]);
 2434              		.loc 1 483 3 view .LVU612
 2435              	.LBB24:
 483:Src/RFM69.c   ****     SPI_transfer8(((uint8_t *)buffer)[i]);
 2436              		.loc 1 483 8 view .LVU613
 483:Src/RFM69.c   ****     SPI_transfer8(((uint8_t *)buffer)[i]);
 2437              		.loc 1 483 8 is_stmt 0 view .LVU614
 2438 0062 2C44     		add	r4, r4, r5
 2439              	.LVL224:
 2440              	.L200:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 70


 483:Src/RFM69.c   ****     SPI_transfer8(((uint8_t *)buffer)[i]);
 2441              		.loc 1 483 3 discriminator 1 view .LVU615
 2442 0064 A542     		cmp	r5, r4
 2443 0066 16D1     		bne	.L201
 2444              	.LBE24:
 485:Src/RFM69.c   **** 
 2445              		.loc 1 485 3 is_stmt 1 view .LVU616
 2446 0068 FFF7FEFF 		bl	RFM69_unselect
 2447              	.LVL225:
 489:Src/RFM69.c   ****   Timeout_SetTimeout1(RF69_TX_LIMIT_MS);
 2448              		.loc 1 489 3 view .LVU617
 2449 006c 0420     		movs	r0, #4
 2450 006e FFF7FEFF 		bl	RFM69_setMode
 2451              	.LVL226:
 490:Src/RFM69.c   ****   while (RFM69_ReadDIO0Pin() == 0 && !Timeout_IsTimeout1())
 2452              		.loc 1 490 3 view .LVU618
 2453 0072 4FF47A70 		mov	r0, #1000
 2454 0076 FFF7FEFF 		bl	Timeout_SetTimeout1
 2455              	.LVL227:
 491:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 2456              		.loc 1 491 3 view .LVU619
 2457              	.L203:
 492:Src/RFM69.c   ****   // while (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); //
 2458              		.loc 1 492 5 discriminator 2 view .LVU620
 491:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 2459              		.loc 1 491 10 is_stmt 0 discriminator 2 view .LVU621
 2460 007a FFF7FEFF 		bl	RFM69_ReadDIO0Pin
 2461              	.LVL228:
 491:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 2462              		.loc 1 491 9 discriminator 2 view .LVU622
 2463 007e 18B9     		cbnz	r0, .L202
 491:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 2464              		.loc 1 491 39 discriminator 1 view .LVU623
 2465 0080 FFF7FEFF 		bl	Timeout_IsTimeout1
 2466              	.LVL229:
 491:Src/RFM69.c   ****     ; // wait for DIO0 to turn HIGH signalling transmission finish
 2467              		.loc 1 491 35 discriminator 1 view .LVU624
 2468 0084 0028     		cmp	r0, #0
 2469 0086 F8D0     		beq	.L203
 2470              	.L202:
 495:Src/RFM69.c   **** }
 2471              		.loc 1 495 3 is_stmt 1 view .LVU625
 2472 0088 0120     		movs	r0, #1
 496:Src/RFM69.c   **** 
 2473              		.loc 1 496 1 is_stmt 0 view .LVU626
 2474 008a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2475              	.LCFI38:
 2476              		.cfi_remember_state
 2477              		.cfi_restore 14
 2478              		.cfi_restore 8
 2479              		.cfi_restore 7
 2480              		.cfi_restore 6
 2481              		.cfi_restore 5
 2482              		.cfi_restore 4
 2483              		.cfi_def_cfa_offset 0
 2484              	.LVL230:
 495:Src/RFM69.c   **** }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 71


 2485              		.loc 1 495 3 view .LVU627
 2486 008e FFF7FEBF 		b	RFM69_setMode
 2487              	.LVL231:
 2488              	.L204:
 2489              	.LCFI39:
 2490              		.cfi_restore_state
 472:Src/RFM69.c   ****   else if (requestACK)
 2491              		.loc 1 472 13 view .LVU628
 2492 0092 8026     		movs	r6, #128
 2493 0094 D2E7     		b	.L199
 2494              	.LVL232:
 2495              	.L201:
 2496              	.LBB25:
 484:Src/RFM69.c   ****   RFM69_unselect();
 2497              		.loc 1 484 5 is_stmt 1 discriminator 3 view .LVU629
 2498 0096 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 2499              	.LVL233:
 484:Src/RFM69.c   ****   RFM69_unselect();
 2500              		.loc 1 484 5 is_stmt 0 discriminator 3 view .LVU630
 2501 009a FFF7FEFF 		bl	SPI_transfer8
 2502              	.LVL234:
 484:Src/RFM69.c   ****   RFM69_unselect();
 2503              		.loc 1 484 5 discriminator 3 view .LVU631
 2504 009e E1E7     		b	.L200
 2505              	.L210:
 2506              		.align	2
 2507              	.L209:
 2508 00a0 00000000 		.word	_address
 2509              	.LBE25:
 2510              		.cfi_endproc
 2511              	.LFE143:
 2513              		.section	.text.RFM69_send,"ax",%progbits
 2514              		.align	1
 2515              		.global	RFM69_send
 2516              		.syntax unified
 2517              		.thumb
 2518              		.thumb_func
 2519              		.fpu fpv4-sp-d16
 2521              	RFM69_send:
 2522              	.LVL235:
 2523              	.LFB138:
 391:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2524              		.loc 1 391 34 is_stmt 1 view -0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 0
 2527              		@ frame_needed = 0, uses_anonymous_args = 0
 392:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 2528              		.loc 1 392 3 view .LVU633
 391:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2529              		.loc 1 391 34 is_stmt 0 view .LVU634
 2530 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2531              	.LCFI40:
 2532              		.cfi_def_cfa_offset 32
 2533              		.cfi_offset 4, -20
 2534              		.cfi_offset 5, -16
 2535              		.cfi_offset 6, -12
 2536              		.cfi_offset 7, -8
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 72


 2537              		.cfi_offset 14, -4
 391:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2538              		.loc 1 391 34 view .LVU635
 2539 0002 0446     		mov	r4, r0
 393:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 2540              		.loc 1 393 19 view .LVU636
 2541 0004 3D20     		movs	r0, #61
 2542              	.LVL236:
 391:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2543              		.loc 1 391 34 view .LVU637
 2544 0006 0D46     		mov	r5, r1
 2545 0008 1646     		mov	r6, r2
 2546 000a 1F46     		mov	r7, r3
 393:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 2547              		.loc 1 393 19 view .LVU638
 2548 000c FFF7FEFF 		bl	RFM69_readReg
 2549              	.LVL237:
 392:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 2550              		.loc 1 392 3 view .LVU639
 2551 0010 40F00401 		orr	r1, r0, #4
 2552 0014 C9B2     		uxtb	r1, r1
 2553 0016 3D20     		movs	r0, #61
 2554 0018 FFF7FEFF 		bl	RFM69_writeReg
 2555              	.LVL238:
 396:Src/RFM69.c   ****     RFM69_receiveDone();
 2556              		.loc 1 396 3 is_stmt 1 view .LVU640
 2557              	.L212:
 396:Src/RFM69.c   ****     RFM69_receiveDone();
 2558              		.loc 1 396 11 is_stmt 0 view .LVU641
 2559 001c FFF7FEFF 		bl	RFM69_canSend
 2560              	.LVL239:
 396:Src/RFM69.c   ****     RFM69_receiveDone();
 2561              		.loc 1 396 9 view .LVU642
 2562 0020 48B1     		cbz	r0, .L213
 398:Src/RFM69.c   **** }
 2563              		.loc 1 398 3 is_stmt 1 view .LVU643
 2564 0022 0023     		movs	r3, #0
 2565 0024 0093     		str	r3, [sp]
 2566 0026 3246     		mov	r2, r6
 2567 0028 3B46     		mov	r3, r7
 2568 002a 2946     		mov	r1, r5
 2569 002c 2046     		mov	r0, r4
 2570 002e FFF7FEFF 		bl	RFM69_sendFrame
 2571              	.LVL240:
 399:Src/RFM69.c   **** 
 2572              		.loc 1 399 1 is_stmt 0 view .LVU644
 2573 0032 03B0     		add	sp, sp, #12
 2574              	.LCFI41:
 2575              		.cfi_remember_state
 2576              		.cfi_def_cfa_offset 20
 2577              		@ sp needed
 2578 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 2579              	.LVL241:
 2580              	.L213:
 2581              	.LCFI42:
 2582              		.cfi_restore_state
 397:Src/RFM69.c   ****   RFM69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 73


 2583              		.loc 1 397 5 is_stmt 1 view .LVU645
 2584 0036 FFF7FEFF 		bl	RFM69_receiveDone
 2585              	.LVL242:
 2586 003a EFE7     		b	.L212
 2587              		.cfi_endproc
 2588              	.LFE138:
 2590              		.section	.text.RFM69_sendWithRetry,"ax",%progbits
 2591              		.align	1
 2592              		.global	RFM69_sendWithRetry
 2593              		.syntax unified
 2594              		.thumb
 2595              		.thumb_func
 2596              		.fpu fpv4-sp-d16
 2598              	RFM69_sendWithRetry:
 2599              	.LVL243:
 2600              	.LFB139:
 409:Src/RFM69.c   ****   for (uint8_t i = 0; i <= retries; i++) {
 2601              		.loc 1 409 49 view -0
 2602              		.cfi_startproc
 2603              		@ args = 4, pretend = 0, frame = 0
 2604              		@ frame_needed = 0, uses_anonymous_args = 0
 410:Src/RFM69.c   ****     RFM69_send(toAddress, buffer, bufferSize, true);
 2605              		.loc 1 410 3 view .LVU647
 2606              	.LBB26:
 410:Src/RFM69.c   ****     RFM69_send(toAddress, buffer, bufferSize, true);
 2607              		.loc 1 410 8 view .LVU648
 410:Src/RFM69.c   ****     RFM69_send(toAddress, buffer, bufferSize, true);
 2608              		.loc 1 410 8 is_stmt 0 view .LVU649
 2609              	.LBE26:
 409:Src/RFM69.c   ****   for (uint8_t i = 0; i <= retries; i++) {
 2610              		.loc 1 409 49 view .LVU650
 2611 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2612              	.LCFI43:
 2613              		.cfi_def_cfa_offset 32
 2614              		.cfi_offset 3, -32
 2615              		.cfi_offset 4, -28
 2616              		.cfi_offset 5, -24
 2617              		.cfi_offset 6, -20
 2618              		.cfi_offset 7, -16
 2619              		.cfi_offset 8, -12
 2620              		.cfi_offset 9, -8
 2621              		.cfi_offset 14, -4
 2622              	.LBB27:
 412:Src/RFM69.c   ****     while (!Timeout_IsTimeout1()) {
 2623              		.loc 1 412 5 view .LVU651
 2624 0004 9DF82090 		ldrb	r9, [sp, #32]	@ zero_extendqisi2
 2625              	.LBE27:
 409:Src/RFM69.c   ****   for (uint8_t i = 0; i <= retries; i++) {
 2626              		.loc 1 409 49 view .LVU652
 2627 0008 0546     		mov	r5, r0
 2628 000a 0F46     		mov	r7, r1
 2629 000c 9046     		mov	r8, r2
 2630 000e 1E46     		mov	r6, r3
 2631 0010 0024     		movs	r4, #0
 2632              	.LVL244:
 2633              	.L218:
 2634              	.LBB28:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 74


 411:Src/RFM69.c   ****     Timeout_SetTimeout1(retryWaitTime);
 2635              		.loc 1 411 5 is_stmt 1 view .LVU653
 2636 0012 2846     		mov	r0, r5
 2637 0014 0123     		movs	r3, #1
 2638 0016 4246     		mov	r2, r8
 2639 0018 3946     		mov	r1, r7
 2640 001a FFF7FEFF 		bl	RFM69_send
 2641              	.LVL245:
 412:Src/RFM69.c   ****     while (!Timeout_IsTimeout1()) {
 2642              		.loc 1 412 5 view .LVU654
 2643 001e 4846     		mov	r0, r9
 2644 0020 FFF7FEFF 		bl	Timeout_SetTimeout1
 2645              	.LVL246:
 413:Src/RFM69.c   ****       if (RFM69_ACKReceived(toAddress)) {
 2646              		.loc 1 413 5 view .LVU655
 2647              	.L215:
 413:Src/RFM69.c   ****       if (RFM69_ACKReceived(toAddress)) {
 2648              		.loc 1 413 13 is_stmt 0 view .LVU656
 2649 0024 FFF7FEFF 		bl	Timeout_IsTimeout1
 2650              	.LVL247:
 413:Src/RFM69.c   ****       if (RFM69_ACKReceived(toAddress)) {
 2651              		.loc 1 413 11 view .LVU657
 2652 0028 28B1     		cbz	r0, .L217
 2653              	.LVL248:
 413:Src/RFM69.c   ****       if (RFM69_ACKReceived(toAddress)) {
 2654              		.loc 1 413 11 view .LVU658
 2655 002a 0134     		adds	r4, r4, #1
 2656              	.LVL249:
 410:Src/RFM69.c   ****     RFM69_send(toAddress, buffer, bufferSize, true);
 2657              		.loc 1 410 3 discriminator 2 view .LVU659
 2658 002c E3B2     		uxtb	r3, r4
 2659 002e 9E42     		cmp	r6, r3
 2660 0030 EFD2     		bcs	.L218
 2661              	.LBE28:
 421:Src/RFM69.c   **** }
 2662              		.loc 1 421 10 view .LVU660
 2663 0032 0020     		movs	r0, #0
 2664 0034 04E0     		b	.L216
 2665              	.LVL250:
 2666              	.L217:
 2667              	.LBB29:
 414:Src/RFM69.c   ****         // Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
 2668              		.loc 1 414 7 is_stmt 1 view .LVU661
 414:Src/RFM69.c   ****         // Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
 2669              		.loc 1 414 11 is_stmt 0 view .LVU662
 2670 0036 2846     		mov	r0, r5
 2671 0038 FFF7FEFF 		bl	RFM69_ACKReceived
 2672              	.LVL251:
 414:Src/RFM69.c   ****         // Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
 2673              		.loc 1 414 10 view .LVU663
 2674 003c 0028     		cmp	r0, #0
 2675 003e F1D0     		beq	.L215
 2676              	.LVL252:
 2677              	.L216:
 414:Src/RFM69.c   ****         // Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
 2678              		.loc 1 414 10 view .LVU664
 2679              	.LBE29:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 75


 422:Src/RFM69.c   **** 
 2680              		.loc 1 422 1 view .LVU665
 2681 0040 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 422:Src/RFM69.c   **** 
 2682              		.loc 1 422 1 view .LVU666
 2683              		.cfi_endproc
 2684              	.LFE139:
 2686              		.section	.text.RFM69_sendACK,"ax",%progbits
 2687              		.align	1
 2688              		.global	RFM69_sendACK
 2689              		.syntax unified
 2690              		.thumb
 2691              		.thumb_func
 2692              		.fpu fpv4-sp-d16
 2694              	RFM69_sendACK:
 2695              	.LVL253:
 2696              	.LFB142:
 439:Src/RFM69.c   ****   ACK_Requested = 0; // TWS added to make sure we don't end up in a timing race
 2697              		.loc 1 439 60 is_stmt 1 view -0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 0
 2700              		@ frame_needed = 0, uses_anonymous_args = 0
 440:Src/RFM69.c   ****                      // and infinite loop sending Acks
 2701              		.loc 1 440 3 view .LVU668
 439:Src/RFM69.c   ****   ACK_Requested = 0; // TWS added to make sure we don't end up in a timing race
 2702              		.loc 1 439 60 is_stmt 0 view .LVU669
 2703 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 2704              	.LCFI44:
 2705              		.cfi_def_cfa_offset 40
 2706              		.cfi_offset 4, -28
 2707              		.cfi_offset 5, -24
 2708              		.cfi_offset 6, -20
 2709              		.cfi_offset 7, -16
 2710              		.cfi_offset 8, -12
 2711              		.cfi_offset 9, -8
 2712              		.cfi_offset 14, -4
 440:Src/RFM69.c   ****                      // and infinite loop sending Acks
 2713              		.loc 1 440 17 view .LVU670
 2714 0004 164B     		ldr	r3, .L227
 442:Src/RFM69.c   ****   int16_t l_rssi = rssi; // save payload received RSSI value
 2715              		.loc 1 442 11 view .LVU671
 2716 0006 174C     		ldr	r4, .L227+4
 443:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2717              		.loc 1 443 11 view .LVU672
 2718 0008 174D     		ldr	r5, .L227+8
 442:Src/RFM69.c   ****   int16_t l_rssi = rssi; // save payload received RSSI value
 2719              		.loc 1 442 11 view .LVU673
 2720 000a 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 443:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2721              		.loc 1 443 11 view .LVU674
 2722 000c B5F90070 		ldrsh	r7, [r5]
 440:Src/RFM69.c   ****                      // and infinite loop sending Acks
 2723              		.loc 1 440 17 view .LVU675
 2724 0010 0022     		movs	r2, #0
 439:Src/RFM69.c   ****   ACK_Requested = 0; // TWS added to make sure we don't end up in a timing race
 2725              		.loc 1 439 60 view .LVU676
 2726 0012 8046     		mov	r8, r0
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 76


 445:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 2727              		.loc 1 445 19 view .LVU677
 2728 0014 3D20     		movs	r0, #61
 2729              	.LVL254:
 439:Src/RFM69.c   ****   ACK_Requested = 0; // TWS added to make sure we don't end up in a timing race
 2730              		.loc 1 439 60 view .LVU678
 2731 0016 8946     		mov	r9, r1
 440:Src/RFM69.c   ****                      // and infinite loop sending Acks
 2732              		.loc 1 440 17 view .LVU679
 2733 0018 1A70     		strb	r2, [r3]
 442:Src/RFM69.c   ****   int16_t l_rssi = rssi; // save payload received RSSI value
 2734              		.loc 1 442 3 is_stmt 1 view .LVU680
 2735              	.LVL255:
 443:Src/RFM69.c   ****   RFM69_writeReg(REG_PACKETCONFIG2,
 2736              		.loc 1 443 3 view .LVU681
 444:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 2737              		.loc 1 444 3 view .LVU682
 445:Src/RFM69.c   ****                      RF_PACKET2_RXRESTART); // avoid RX deadlocks
 2738              		.loc 1 445 19 is_stmt 0 view .LVU683
 2739 001a FFF7FEFF 		bl	RFM69_readReg
 2740              	.LVL256:
 444:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) |
 2741              		.loc 1 444 3 view .LVU684
 2742 001e 40F00401 		orr	r1, r0, #4
 2743 0022 C9B2     		uxtb	r1, r1
 2744 0024 3D20     		movs	r0, #61
 2745 0026 FFF7FEFF 		bl	RFM69_writeReg
 2746              	.LVL257:
 447:Src/RFM69.c   ****   while (!RFM69_canSend() && !Timeout_IsTimeout1()) {
 2747              		.loc 1 447 3 is_stmt 1 view .LVU685
 2748 002a 4FF47A70 		mov	r0, #1000
 2749 002e FFF7FEFF 		bl	Timeout_SetTimeout1
 2750              	.LVL258:
 448:Src/RFM69.c   ****     RFM69_receiveDone();
 2751              		.loc 1 448 3 view .LVU686
 2752              	.L221:
 448:Src/RFM69.c   ****     RFM69_receiveDone();
 2753              		.loc 1 448 11 is_stmt 0 view .LVU687
 2754 0032 FFF7FEFF 		bl	RFM69_canSend
 2755              	.LVL259:
 448:Src/RFM69.c   ****     RFM69_receiveDone();
 2756              		.loc 1 448 9 view .LVU688
 2757 0036 60B1     		cbz	r0, .L222
 2758              	.L223:
 451:Src/RFM69.c   ****                      // RFM69_receiveDone()
 2759              		.loc 1 451 3 is_stmt 1 view .LVU689
 453:Src/RFM69.c   ****   rssi = l_rssi; // restore payload RSSI
 2760              		.loc 1 453 3 is_stmt 0 view .LVU690
 2761 0038 0123     		movs	r3, #1
 2762 003a 0093     		str	r3, [sp]
 2763 003c 4A46     		mov	r2, r9
 2764 003e 0023     		movs	r3, #0
 2765 0040 4146     		mov	r1, r8
 2766 0042 3046     		mov	r0, r6
 451:Src/RFM69.c   ****                      // RFM69_receiveDone()
 2767              		.loc 1 451 12 view .LVU691
 2768 0044 2670     		strb	r6, [r4]
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 77


 453:Src/RFM69.c   ****   rssi = l_rssi; // restore payload RSSI
 2769              		.loc 1 453 3 is_stmt 1 view .LVU692
 2770 0046 FFF7FEFF 		bl	RFM69_sendFrame
 2771              	.LVL260:
 454:Src/RFM69.c   **** }
 2772              		.loc 1 454 3 view .LVU693
 454:Src/RFM69.c   **** }
 2773              		.loc 1 454 8 is_stmt 0 view .LVU694
 2774 004a 2F80     		strh	r7, [r5]	@ movhi
 455:Src/RFM69.c   **** 
 2775              		.loc 1 455 1 view .LVU695
 2776 004c 03B0     		add	sp, sp, #12
 2777              	.LCFI45:
 2778              		.cfi_remember_state
 2779              		.cfi_def_cfa_offset 28
 2780              		@ sp needed
 2781 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2782              	.LVL261:
 2783              	.L222:
 2784              	.LCFI46:
 2785              		.cfi_restore_state
 448:Src/RFM69.c   ****     RFM69_receiveDone();
 2786              		.loc 1 448 31 discriminator 1 view .LVU696
 2787 0052 FFF7FEFF 		bl	Timeout_IsTimeout1
 2788              	.LVL262:
 448:Src/RFM69.c   ****     RFM69_receiveDone();
 2789              		.loc 1 448 27 discriminator 1 view .LVU697
 2790 0056 0028     		cmp	r0, #0
 2791 0058 EED1     		bne	.L223
 449:Src/RFM69.c   ****   }
 2792              		.loc 1 449 5 is_stmt 1 view .LVU698
 2793 005a FFF7FEFF 		bl	RFM69_receiveDone
 2794              	.LVL263:
 2795 005e E8E7     		b	.L221
 2796              	.L228:
 2797              		.align	2
 2798              	.L227:
 2799 0060 00000000 		.word	ACK_Requested
 2800 0064 00000000 		.word	senderID
 2801 0068 00000000 		.word	rssi
 2802              		.cfi_endproc
 2803              	.LFE142:
 2805              		.section	.text.RFM69_encrypt,"ax",%progbits
 2806              		.align	1
 2807              		.global	RFM69_encrypt
 2808              		.syntax unified
 2809              		.thumb
 2810              		.thumb_func
 2811              		.fpu fpv4-sp-d16
 2813              	RFM69_encrypt:
 2814              	.LVL264:
 2815              	.LFB147:
 588:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2816              		.loc 1 588 37 view -0
 2817              		.cfi_startproc
 2818              		@ args = 0, pretend = 0, frame = 0
 2819              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 78


 589:Src/RFM69.c   ****   if (key != 0) {
 2820              		.loc 1 589 3 view .LVU700
 588:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2821              		.loc 1 588 37 is_stmt 0 view .LVU701
 2822 0000 70B5     		push	{r4, r5, r6, lr}
 2823              	.LCFI47:
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 4, -16
 2826              		.cfi_offset 5, -12
 2827              		.cfi_offset 6, -8
 2828              		.cfi_offset 14, -4
 588:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 2829              		.loc 1 588 37 view .LVU702
 2830 0002 0446     		mov	r4, r0
 589:Src/RFM69.c   ****   if (key != 0) {
 2831              		.loc 1 589 3 view .LVU703
 2832 0004 0120     		movs	r0, #1
 2833              	.LVL265:
 589:Src/RFM69.c   ****   if (key != 0) {
 2834              		.loc 1 589 3 view .LVU704
 2835 0006 FFF7FEFF 		bl	RFM69_setMode
 2836              	.LVL266:
 590:Src/RFM69.c   ****     RFM69_select();
 2837              		.loc 1 590 3 is_stmt 1 view .LVU705
 590:Src/RFM69.c   ****     RFM69_select();
 2838              		.loc 1 590 6 is_stmt 0 view .LVU706
 2839 000a 7CB1     		cbz	r4, .L230
 591:Src/RFM69.c   ****     SPI_transfer8(REG_AESKEY1 | 0x80);
 2840              		.loc 1 591 5 is_stmt 1 view .LVU707
 2841 000c FFF7FEFF 		bl	RFM69_select
 2842              	.LVL267:
 592:Src/RFM69.c   ****     for (uint8_t i = 0; i < 16; i++)
 2843              		.loc 1 592 5 view .LVU708
 2844 0010 BE20     		movs	r0, #190
 2845 0012 FFF7FEFF 		bl	SPI_transfer8
 2846              	.LVL268:
 593:Src/RFM69.c   ****       SPI_transfer8(key[i]);
 2847              		.loc 1 593 5 view .LVU709
 2848              	.LBB30:
 593:Src/RFM69.c   ****       SPI_transfer8(key[i]);
 2849              		.loc 1 593 10 view .LVU710
 593:Src/RFM69.c   ****       SPI_transfer8(key[i]);
 2850              		.loc 1 593 10 is_stmt 0 view .LVU711
 2851 0016 651E     		subs	r5, r4, #1
 2852 0018 04F10F06 		add	r6, r4, #15
 2853              	.LVL269:
 2854              	.L231:
 594:Src/RFM69.c   ****     RFM69_unselect();
 2855              		.loc 1 594 7 is_stmt 1 discriminator 3 view .LVU712
 2856 001c 15F8010F 		ldrb	r0, [r5, #1]!	@ zero_extendqisi2
 2857 0020 FFF7FEFF 		bl	SPI_transfer8
 2858              	.LVL270:
 593:Src/RFM69.c   ****       SPI_transfer8(key[i]);
 2859              		.loc 1 593 5 is_stmt 0 discriminator 3 view .LVU713
 2860 0024 B542     		cmp	r5, r6
 2861 0026 F9D1     		bne	.L231
 2862              	.LBE30:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 79


 595:Src/RFM69.c   ****   }
 2863              		.loc 1 595 5 is_stmt 1 view .LVU714
 2864 0028 FFF7FEFF 		bl	RFM69_unselect
 2865              	.LVL271:
 2866              	.L230:
 597:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
 2867              		.loc 1 597 3 view .LVU715
 598:Src/RFM69.c   **** }
 2868              		.loc 1 598 19 is_stmt 0 view .LVU716
 2869 002c 3D20     		movs	r0, #61
 2870 002e FFF7FEFF 		bl	RFM69_readReg
 2871              	.LVL272:
 598:Src/RFM69.c   **** }
 2872              		.loc 1 598 52 view .LVU717
 2873 0032 20F00100 		bic	r0, r0, #1
 598:Src/RFM69.c   **** }
 2874              		.loc 1 598 60 view .LVU718
 2875 0036 002C     		cmp	r4, #0
 2876 0038 0CBF     		ite	eq
 2877 003a 0146     		moveq	r1, r0
 2878 003c 40F00101 		orrne	r1, r0, #1
 597:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
 2879              		.loc 1 597 3 view .LVU719
 2880 0040 C9B2     		uxtb	r1, r1
 2881 0042 3D20     		movs	r0, #61
 599:Src/RFM69.c   **** 
 2882              		.loc 1 599 1 view .LVU720
 2883 0044 BDE87040 		pop	{r4, r5, r6, lr}
 2884              	.LCFI48:
 2885              		.cfi_restore 14
 2886              		.cfi_restore 6
 2887              		.cfi_restore 5
 2888              		.cfi_restore 4
 2889              		.cfi_def_cfa_offset 0
 2890              	.LVL273:
 597:Src/RFM69.c   ****                  (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
 2891              		.loc 1 597 3 view .LVU721
 2892 0048 FFF7FEBF 		b	RFM69_writeReg
 2893              	.LVL274:
 2894              		.cfi_endproc
 2895              	.LFE147:
 2897              		.section	.text.RFM69_initialize,"ax",%progbits
 2898              		.align	1
 2899              		.global	RFM69_initialize
 2900              		.syntax unified
 2901              		.thumb
 2902              		.thumb_func
 2903              		.fpu fpv4-sp-d16
 2905              	RFM69_initialize:
 2906              	.LVL275:
 2907              	.LFB129:
 118:Src/RFM69.c   ****   const uint8_t CONFIG[][2] = {
 2908              		.loc 1 118 78 is_stmt 1 view -0
 2909              		.cfi_startproc
 2910              		@ args = 0, pretend = 0, frame = 48
 2911              		@ frame_needed = 0, uses_anonymous_args = 0
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 80


 2912              		.loc 1 119 3 view .LVU723
 118:Src/RFM69.c   ****   const uint8_t CONFIG[][2] = {
 2913              		.loc 1 118 78 is_stmt 0 view .LVU724
 2914 0000 70B5     		push	{r4, r5, r6, lr}
 2915              	.LCFI49:
 2916              		.cfi_def_cfa_offset 16
 2917              		.cfi_offset 4, -16
 2918              		.cfi_offset 5, -12
 2919              		.cfi_offset 6, -8
 2920              		.cfi_offset 14, -4
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2921              		.loc 1 119 17 view .LVU725
 2922 0002 484B     		ldr	r3, .L257
 2923 0004 484D     		ldr	r5, .L257+4
 118:Src/RFM69.c   ****   const uint8_t CONFIG[][2] = {
 2924              		.loc 1 118 78 view .LVU726
 2925 0006 8CB0     		sub	sp, sp, #48
 2926              	.LCFI50:
 2927              		.cfi_def_cfa_offset 64
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2928              		.loc 1 119 17 view .LVU727
 2929 0008 CDE90053 		strd	r5, r3, [sp]
 2930 000c 474B     		ldr	r3, .L257+8
 2931 000e 0293     		str	r3, [sp, #8]
 2932 0010 0723     		movs	r3, #7
 2933 0012 8DF80C30 		strb	r3, [sp, #12]
 136:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 2934              		.loc 1 136 36 view .LVU728
 2935 0016 40F23B13 		movw	r3, #315
 2936 001a 9842     		cmp	r0, r3
 118:Src/RFM69.c   ****   const uint8_t CONFIG[][2] = {
 2937              		.loc 1 118 78 view .LVU729
 2938 001c 0E46     		mov	r6, r1
 136:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 2939              		.loc 1 136 36 view .LVU730
 2940 001e 66D0     		beq	.L249
 136:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 2941              		.loc 1 136 36 discriminator 1 view .LVU731
 2942 0020 40F2B113 		movw	r3, #433
 2943 0024 9842     		cmp	r0, r3
 2944 0026 64D0     		beq	.L250
 136:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 2945              		.loc 1 136 36 discriminator 3 view .LVU732
 2946 0028 B0F5597F 		cmp	r0, #868
 2947 002c 0CBF     		ite	eq
 2948 002e D923     		moveq	r3, #217
 2949 0030 E423     		movne	r3, #228
 2950              	.L237:
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2951              		.loc 1 119 17 view .LVU733
 2952 0032 8DF80D30 		strb	r3, [sp, #13]
 2953 0036 0823     		movs	r3, #8
 2954 0038 8DF80E30 		strb	r3, [sp, #14]
 137:Src/RFM69.c   ****           /* 0x09 */ { REG_FRFLSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFLSB_315 : (freqBand==RF
 2955              		.loc 1 137 36 view .LVU734
 2956 003c 40F23B13 		movw	r3, #315
 2957 0040 9842     		cmp	r0, r3
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 81


 2958 0042 58D0     		beq	.L252
 137:Src/RFM69.c   ****           /* 0x09 */ { REG_FRFLSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFLSB_315 : (freqBand==RF
 2959              		.loc 1 137 36 discriminator 1 view .LVU735
 2960 0044 40F2B113 		movw	r3, #433
 2961 0048 9842     		cmp	r0, r3
 2962 004a 56D0     		beq	.L253
 137:Src/RFM69.c   ****           /* 0x09 */ { REG_FRFLSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFLSB_315 : (freqBand==RF
 2963              		.loc 1 137 36 discriminator 3 view .LVU736
 2964 004c B0F5597F 		cmp	r0, #868
 2965 0050 14BF     		ite	ne
 2966 0052 C023     		movne	r3, #192
 2967 0054 0023     		moveq	r3, #0
 2968              	.L238:
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2969              		.loc 1 119 17 view .LVU737
 2970 0056 3649     		ldr	r1, .L257+12
 2971              	.LVL276:
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2972              		.loc 1 119 17 view .LVU738
 2973 0058 8DF80F30 		strb	r3, [sp, #15]
 2974 005c 354B     		ldr	r3, .L257+16
 2975 005e 3648     		ldr	r0, .L257+20
 2976              	.LVL277:
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2977              		.loc 1 119 17 view .LVU739
 2978 0060 364C     		ldr	r4, .L257+24
 2979 0062 8DF82120 		strb	r2, [sp, #33]
 2980 0066 CDE90413 		strd	r1, r3, [sp, #16]
 2981 006a 354B     		ldr	r3, .L257+28
 2982 006c CDE90603 		strd	r0, r3, [sp, #24]
 2983 0070 3023     		movs	r3, #48
 2984 0072 8DF82030 		strb	r3, [sp, #32]
 2985 0076 49F23703 		movw	r3, #36919
 2986 007a ADF82230 		strh	r3, [sp, #34]	@ movhi
 2987 007e 314B     		ldr	r3, .L257+32
 207:Src/RFM69.c   ****   /*Timeout_SetTimeout1(50);
 2988              		.loc 1 207 3 view .LVU740
 2989 0080 0120     		movs	r0, #1
 119:Src/RFM69.c   ****           /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDB
 2990              		.loc 1 119 17 view .LVU741
 2991 0082 CDE90943 		strd	r4, r3, [sp, #36]
 2992 0086 FF23     		movs	r3, #255
 2993 0088 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 205:Src/RFM69.c   **** 
 2994              		.loc 1 205 3 is_stmt 1 view .LVU742
 207:Src/RFM69.c   ****   /*Timeout_SetTimeout1(50);
 2995              		.loc 1 207 3 view .LVU743
 2996 008c FFF7FEFF 		bl	RFM69_SetCSPin
 2997              	.LVL278:
 226:Src/RFM69.c   **** 
 2998              		.loc 1 226 3 view .LVU744
 2999 0090 0020     		movs	r0, #0
 3000 0092 FFF7FEFF 		bl	RFM69_encrypt
 3001              	.LVL279:
 228:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 3002              		.loc 1 228 3 view .LVU745
 228:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 82


 3003              		.loc 1 228 3 is_stmt 0 view .LVU746
 3004 0096 0024     		movs	r4, #0
 3005              	.LVL280:
 3006              	.L239:
 228:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 3007              		.loc 1 228 24 discriminator 1 view .LVU747
 3008 0098 E3B2     		uxtb	r3, r4
 3009 009a 0CAA     		add	r2, sp, #48
 3010 009c 02EB4303 		add	r3, r2, r3, lsl #1
 3011 00a0 0134     		adds	r4, r4, #1
 3012              	.LVL281:
 228:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 3013              		.loc 1 228 24 discriminator 1 view .LVU748
 3014 00a2 13F8300C 		ldrb	r0, [r3, #-48]	@ zero_extendqisi2
 228:Src/RFM69.c   ****     RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 3015              		.loc 1 228 3 discriminator 1 view .LVU749
 3016 00a6 FF28     		cmp	r0, #255
 3017 00a8 29D1     		bne	.L240
 3018 00aa 0025     		movs	r5, #0
 3019              	.L241:
 3020              	.LVL282:
 233:Src/RFM69.c   ****   {
 3021              		.loc 1 233 24 discriminator 1 view .LVU750
 3022 00ac ECB2     		uxtb	r4, r5
 3023 00ae 0CAB     		add	r3, sp, #48
 3024 00b0 03EB4404 		add	r4, r3, r4, lsl #1
 3025 00b4 14F8300C 		ldrb	r0, [r4, #-48]	@ zero_extendqisi2
 233:Src/RFM69.c   ****   {
 3026              		.loc 1 233 3 discriminator 1 view .LVU751
 3027 00b8 FF28     		cmp	r0, #255
 3028 00ba 25D1     		bne	.L245
 243:Src/RFM69.c   ****   RFM69_setMode(RF69_MODE_STANDBY);
 3029              		.loc 1 243 3 is_stmt 1 view .LVU752
 3030 00bc 0020     		movs	r0, #0
 3031 00be FFF7FEFF 		bl	RFM69_setHighPower
 3032              	.LVL283:
 244:Src/RFM69.c   ****   //HAL_Delay(50);
 3033              		.loc 1 244 3 view .LVU753
 3034 00c2 0120     		movs	r0, #1
 3035 00c4 FFF7FEFF 		bl	RFM69_setMode
 3036              	.LVL284:
 246:Src/RFM69.c   ****   while (((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && !Timeout_IsTimeout1()
 3037              		.loc 1 246 3 view .LVU754
 3038 00c8 3220     		movs	r0, #50
 3039 00ca FFF7FEFF 		bl	Timeout_SetTimeout1
 3040              	.LVL285:
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 3041              		.loc 1 247 3 view .LVU755
 3042              	.L247:
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 3043              		.loc 1 247 101 discriminator 2 view .LVU756
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 3044              		.loc 1 247 12 is_stmt 0 discriminator 2 view .LVU757
 3045 00ce 2720     		movs	r0, #39
 3046 00d0 FFF7FEFF 		bl	RFM69_readReg
 3047              	.LVL286:
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 83


 3048              		.loc 1 247 9 discriminator 2 view .LVU758
 3049 00d4 0306     		lsls	r3, r0, #24
 3050 00d6 03D4     		bmi	.L246
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 3051              		.loc 1 247 80 discriminator 1 view .LVU759
 3052 00d8 FFF7FEFF 		bl	Timeout_IsTimeout1
 3053              	.LVL287:
 247:Src/RFM69.c   ****   if (Timeout_IsTimeout1()) {
 3054              		.loc 1 247 76 discriminator 1 view .LVU760
 3055 00dc 0028     		cmp	r0, #0
 3056 00de F6D0     		beq	.L247
 3057              	.L246:
 248:Src/RFM69.c   ****     return false;
 3058              		.loc 1 248 3 is_stmt 1 view .LVU761
 248:Src/RFM69.c   ****     return false;
 3059              		.loc 1 248 7 is_stmt 0 view .LVU762
 3060 00e0 FFF7FEFF 		bl	Timeout_IsTimeout1
 3061              	.LVL288:
 248:Src/RFM69.c   ****     return false;
 3062              		.loc 1 248 6 view .LVU763
 3063 00e4 D0B9     		cbnz	r0, .L248
 252:Src/RFM69.c   ****   return true;
 3064              		.loc 1 252 3 is_stmt 1 view .LVU764
 252:Src/RFM69.c   ****   return true;
 3065              		.loc 1 252 12 is_stmt 0 view .LVU765
 3066 00e6 184B     		ldr	r3, .L257+36
 253:Src/RFM69.c   **** }
 3067              		.loc 1 253 10 view .LVU766
 3068 00e8 0120     		movs	r0, #1
 252:Src/RFM69.c   ****   return true;
 3069              		.loc 1 252 12 view .LVU767
 3070 00ea 1E70     		strb	r6, [r3]
 253:Src/RFM69.c   **** }
 3071              		.loc 1 253 3 is_stmt 1 view .LVU768
 253:Src/RFM69.c   **** }
 3072              		.loc 1 253 10 is_stmt 0 view .LVU769
 3073 00ec 17E0     		b	.L244
 3074              	.LVL289:
 3075              	.L249:
 136:Src/RFM69.c   ****           /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF
 3076              		.loc 1 136 36 view .LVU770
 3077 00ee 4E23     		movs	r3, #78
 3078 00f0 9FE7     		b	.L237
 3079              	.L250:
 3080 00f2 6C23     		movs	r3, #108
 3081 00f4 9DE7     		b	.L237
 3082              	.L252:
 137:Src/RFM69.c   ****           /* 0x09 */ { REG_FRFLSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFLSB_315 : (freqBand==RF
 3083              		.loc 1 137 36 view .LVU771
 3084 00f6 C023     		movs	r3, #192
 3085 00f8 ADE7     		b	.L238
 3086              	.L253:
 3087 00fa 4023     		movs	r3, #64
 3088 00fc ABE7     		b	.L238
 3089              	.LVL290:
 3090              	.L240:
 229:Src/RFM69.c   ****   }
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 84


 3091              		.loc 1 229 5 is_stmt 1 discriminator 3 view .LVU772
 3092 00fe 13F82F1C 		ldrb	r1, [r3, #-47]	@ zero_extendqisi2
 3093 0102 FFF7FEFF 		bl	RFM69_writeReg
 3094              	.LVL291:
 229:Src/RFM69.c   ****   }
 3095              		.loc 1 229 5 is_stmt 0 discriminator 3 view .LVU773
 3096 0106 C7E7     		b	.L239
 3097              	.LVL292:
 3098              	.L245:
 235:Src/RFM69.c   **** 	  {
 3099              		.loc 1 235 4 is_stmt 1 view .LVU774
 235:Src/RFM69.c   **** 	  {
 3100              		.loc 1 235 6 is_stmt 0 view .LVU775
 3101 0108 2828     		cmp	r0, #40
 3102 010a 01D1     		bne	.L242
 3103              	.L243:
 3104              	.LVL293:
 235:Src/RFM69.c   **** 	  {
 3105              		.loc 1 235 6 view .LVU776
 3106 010c 0135     		adds	r5, r5, #1
 3107              	.LVL294:
 235:Src/RFM69.c   **** 	  {
 3108              		.loc 1 235 6 view .LVU777
 3109 010e CDE7     		b	.L241
 3110              	.LVL295:
 3111              	.L242:
 237:Src/RFM69.c   ****         return false;
 3112              		.loc 1 237 7 is_stmt 1 view .LVU778
 237:Src/RFM69.c   ****         return false;
 3113              		.loc 1 237 10 is_stmt 0 view .LVU779
 3114 0110 FFF7FEFF 		bl	RFM69_readReg
 3115              	.LVL296:
 237:Src/RFM69.c   ****         return false;
 3116              		.loc 1 237 9 view .LVU780
 3117 0114 14F82F3C 		ldrb	r3, [r4, #-47]	@ zero_extendqisi2
 3118 0118 8342     		cmp	r3, r0
 3119 011a F7D0     		beq	.L243
 3120              	.L248:
 238:Src/RFM69.c   ****       }
 3121              		.loc 1 238 16 view .LVU781
 3122 011c 0020     		movs	r0, #0
 3123              	.L244:
 254:Src/RFM69.c   **** 
 3124              		.loc 1 254 1 view .LVU782
 3125 011e 0CB0     		add	sp, sp, #48
 3126              	.LCFI51:
 3127              		.cfi_def_cfa_offset 16
 3128              		@ sp needed
 3129 0120 70BD     		pop	{r4, r5, r6, pc}
 3130              	.LVL297:
 3131              	.L258:
 254:Src/RFM69.c   **** 
 3132              		.loc 1 254 1 view .LVU783
 3133 0122 00BF     		.align	2
 3134              	.L257:
 3135 0124 03020440 		.word	1074004483
 3136 0128 01040200 		.word	132097
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 85


 3137 012c 05030633 		.word	856032005
 3138 0130 09001942 		.word	1108934665
 3139 0134 25402607 		.word	119947301
 3140 0138 281029DC 		.word	-601288664
 3141 013c 38423C8F 		.word	-1891876296
 3142 0140 2E882F2D 		.word	758089774
 3143 0144 3D126F30 		.word	812585533
 3144 0148 00000000 		.word	_address
 3145              		.cfi_endproc
 3146              	.LFE129:
 3148              		.section	.text.RFM69_interruptHandler,"ax",%progbits
 3149              		.align	1
 3150              		.global	RFM69_interruptHandler
 3151              		.syntax unified
 3152              		.thumb
 3153              		.thumb_func
 3154              		.fpu fpv4-sp-d16
 3156              	RFM69_interruptHandler:
 3157              	.LFB144:
 499:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) {
 3158              		.loc 1 499 31 is_stmt 1 view -0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 0
 3161              		@ frame_needed = 0, uses_anonymous_args = 0
 500:Src/RFM69.c   ****     uint8_t CTLbyte;
 3162              		.loc 1 500 3 view .LVU785
 499:Src/RFM69.c   ****   if (_mode == RF69_MODE_RX && (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) {
 3163              		.loc 1 499 31 is_stmt 0 view .LVU786
 3164 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3165              	.LCFI52:
 3166              		.cfi_def_cfa_offset 24
 3167              		.cfi_offset 3, -24
 3168              		.cfi_offset 4, -20
 3169              		.cfi_offset 5, -16
 3170              		.cfi_offset 6, -12
 3171              		.cfi_offset 7, -8
 3172              		.cfi_offset 14, -4
 500:Src/RFM69.c   ****     uint8_t CTLbyte;
 3173              		.loc 1 500 13 view .LVU787
 3174 0002 304B     		ldr	r3, .L272
 500:Src/RFM69.c   ****     uint8_t CTLbyte;
 3175              		.loc 1 500 6 view .LVU788
 3176 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3177 0006 032B     		cmp	r3, #3
 3178 0008 50D1     		bne	.L261
 500:Src/RFM69.c   ****     uint8_t CTLbyte;
 3179              		.loc 1 500 33 discriminator 1 view .LVU789
 3180 000a 2820     		movs	r0, #40
 3181 000c FFF7FEFF 		bl	RFM69_readReg
 3182              	.LVL298:
 500:Src/RFM69.c   ****     uint8_t CTLbyte;
 3183              		.loc 1 500 29 discriminator 1 view .LVU790
 3184 0010 4307     		lsls	r3, r0, #29
 3185 0012 4BD5     		bpl	.L261
 3186              	.LBB31:
 501:Src/RFM69.c   ****     // rssi = RFM69_readRSSI();
 3187              		.loc 1 501 5 is_stmt 1 view .LVU791
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 86


 503:Src/RFM69.c   ****     RFM69_select();
 3188              		.loc 1 503 5 view .LVU792
 3189 0014 0120     		movs	r0, #1
 3190 0016 FFF7FEFF 		bl	RFM69_setMode
 3191              	.LVL299:
 504:Src/RFM69.c   ****     SPI_transfer8(REG_FIFO & 0x7F);
 3192              		.loc 1 504 5 view .LVU793
 3193 001a FFF7FEFF 		bl	RFM69_select
 3194              	.LVL300:
 505:Src/RFM69.c   ****     payloadLen = SPI_transfer8(0);
 3195              		.loc 1 505 5 view .LVU794
 3196 001e 0020     		movs	r0, #0
 3197 0020 FFF7FEFF 		bl	SPI_transfer8
 3198              	.LVL301:
 506:Src/RFM69.c   ****     payloadLen = payloadLen > 66 ? 66 : payloadLen; // precaution
 3199              		.loc 1 506 5 view .LVU795
 506:Src/RFM69.c   ****     payloadLen = payloadLen > 66 ? 66 : payloadLen; // precaution
 3200              		.loc 1 506 18 is_stmt 0 view .LVU796
 3201 0024 0020     		movs	r0, #0
 3202 0026 FFF7FEFF 		bl	SPI_transfer8
 3203              	.LVL302:
 507:Src/RFM69.c   ****     targetID = SPI_transfer8(0);
 3204              		.loc 1 507 5 is_stmt 1 view .LVU797
 507:Src/RFM69.c   ****     targetID = SPI_transfer8(0);
 3205              		.loc 1 507 16 is_stmt 0 view .LVU798
 3206 002a 274C     		ldr	r4, .L272+4
 507:Src/RFM69.c   ****     targetID = SPI_transfer8(0);
 3207              		.loc 1 507 39 view .LVU799
 3208 002c 4228     		cmp	r0, #66
 3209 002e 28BF     		it	cs
 3210 0030 4220     		movcs	r0, #66
 507:Src/RFM69.c   ****     targetID = SPI_transfer8(0);
 3211              		.loc 1 507 16 view .LVU800
 3212 0032 2070     		strb	r0, [r4]
 508:Src/RFM69.c   ****     if (!(_promiscuousMode || targetID == _address ||
 3213              		.loc 1 508 5 is_stmt 1 view .LVU801
 508:Src/RFM69.c   ****     if (!(_promiscuousMode || targetID == _address ||
 3214              		.loc 1 508 16 is_stmt 0 view .LVU802
 3215 0034 0020     		movs	r0, #0
 3216 0036 FFF7FEFF 		bl	SPI_transfer8
 3217              	.LVL303:
 508:Src/RFM69.c   ****     if (!(_promiscuousMode || targetID == _address ||
 3218              		.loc 1 508 14 view .LVU803
 3219 003a 244B     		ldr	r3, .L272+8
 3220 003c 1870     		strb	r0, [r3]
 509:Src/RFM69.c   ****           targetID ==
 3221              		.loc 1 509 5 is_stmt 1 view .LVU804
 509:Src/RFM69.c   ****           targetID ==
 3222              		.loc 1 509 11 is_stmt 0 view .LVU805
 3223 003e 244B     		ldr	r3, .L272+12
 509:Src/RFM69.c   ****           targetID ==
 3224              		.loc 1 509 8 view .LVU806
 3225 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3226 0042 2BB9     		cbnz	r3, .L263
 509:Src/RFM69.c   ****           targetID ==
 3227              		.loc 1 509 40 discriminator 1 view .LVU807
 3228 0044 234B     		ldr	r3, .L272+16
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 87


 509:Src/RFM69.c   ****           targetID ==
 3229              		.loc 1 509 28 discriminator 1 view .LVU808
 3230 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3231 0048 8342     		cmp	r3, r0
 3232 004a 01D0     		beq	.L263
 509:Src/RFM69.c   ****           targetID ==
 3233              		.loc 1 509 9 discriminator 2 view .LVU809
 3234 004c FF28     		cmp	r0, #255
 3235 004e 02D1     		bne	.L264
 3236              	.L263:
 513:Src/RFM69.c   ****                         // malformed and don't fit this library's extra fields
 3237              		.loc 1 513 23 view .LVU810
 3238 0050 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 513:Src/RFM69.c   ****                         // malformed and don't fit this library's extra fields
 3239              		.loc 1 513 9 view .LVU811
 3240 0052 022B     		cmp	r3, #2
 3241 0054 07D8     		bhi	.L265
 3242              	.L264:
 516:Src/RFM69.c   ****       RFM69_unselect();
 3243              		.loc 1 516 7 is_stmt 1 view .LVU812
 516:Src/RFM69.c   ****       RFM69_unselect();
 3244              		.loc 1 516 18 is_stmt 0 view .LVU813
 3245 0056 0023     		movs	r3, #0
 3246 0058 2370     		strb	r3, [r4]
 517:Src/RFM69.c   ****       RFM69_receiveBegin();
 3247              		.loc 1 517 7 is_stmt 1 view .LVU814
 3248 005a FFF7FEFF 		bl	RFM69_unselect
 3249              	.LVL304:
 518:Src/RFM69.c   ****       return;
 3250              		.loc 1 518 7 view .LVU815
 3251              	.LBE31:
 541:Src/RFM69.c   **** 
 3252              		.loc 1 541 1 is_stmt 0 view .LVU816
 3253 005e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 3254              	.LCFI53:
 3255              		.cfi_remember_state
 3256              		.cfi_restore 14
 3257              		.cfi_restore 7
 3258              		.cfi_restore 6
 3259              		.cfi_restore 5
 3260              		.cfi_restore 4
 3261              		.cfi_restore 3
 3262              		.cfi_def_cfa_offset 0
 3263              	.LBB35:
 518:Src/RFM69.c   ****       return;
 3264              		.loc 1 518 7 view .LVU817
 3265 0062 FFF7FEBF 		b	RFM69_receiveBegin
 3266              	.LVL305:
 3267              	.L265:
 3268              	.LCFI54:
 3269              		.cfi_restore_state
 522:Src/RFM69.c   ****     senderID = SPI_transfer8(0);
 3270              		.loc 1 522 5 is_stmt 1 view .LVU818
 522:Src/RFM69.c   ****     senderID = SPI_transfer8(0);
 3271              		.loc 1 522 13 is_stmt 0 view .LVU819
 3272 0066 1C4C     		ldr	r4, .L272+20
 3273              	.LBB32:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 88


 533:Src/RFM69.c   ****     }
 3274              		.loc 1 533 15 view .LVU820
 3275 0068 1C4F     		ldr	r7, .L272+24
 3276              	.LBE32:
 522:Src/RFM69.c   ****     senderID = SPI_transfer8(0);
 3277              		.loc 1 522 26 view .LVU821
 3278 006a 033B     		subs	r3, r3, #3
 523:Src/RFM69.c   ****     CTLbyte = SPI_transfer8(0);
 3279              		.loc 1 523 16 view .LVU822
 3280 006c 0020     		movs	r0, #0
 522:Src/RFM69.c   ****     senderID = SPI_transfer8(0);
 3281              		.loc 1 522 13 view .LVU823
 3282 006e 2370     		strb	r3, [r4]
 523:Src/RFM69.c   ****     CTLbyte = SPI_transfer8(0);
 3283              		.loc 1 523 5 is_stmt 1 view .LVU824
 523:Src/RFM69.c   ****     CTLbyte = SPI_transfer8(0);
 3284              		.loc 1 523 16 is_stmt 0 view .LVU825
 3285 0070 FFF7FEFF 		bl	SPI_transfer8
 3286              	.LVL306:
 523:Src/RFM69.c   ****     CTLbyte = SPI_transfer8(0);
 3287              		.loc 1 523 14 view .LVU826
 3288 0074 1A4B     		ldr	r3, .L272+28
 3289 0076 1870     		strb	r0, [r3]
 524:Src/RFM69.c   **** 
 3290              		.loc 1 524 5 is_stmt 1 view .LVU827
 524:Src/RFM69.c   **** 
 3291              		.loc 1 524 15 is_stmt 0 view .LVU828
 3292 0078 0020     		movs	r0, #0
 3293 007a FFF7FEFF 		bl	SPI_transfer8
 3294              	.LVL307:
 526:Src/RFM69.c   ****     ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 3295              		.loc 1 526 5 is_stmt 1 view .LVU829
 526:Src/RFM69.c   ****     ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 3296              		.loc 1 526 18 is_stmt 0 view .LVU830
 3297 007e 194B     		ldr	r3, .L272+32
 526:Src/RFM69.c   ****     ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 3298              		.loc 1 526 28 view .LVU831
 3299 0080 20F07F02 		bic	r2, r0, #127
 526:Src/RFM69.c   ****     ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 3300              		.loc 1 526 18 view .LVU832
 3301 0084 1A70     		strb	r2, [r3]
 527:Src/RFM69.c   **** 
 3302              		.loc 1 527 5 is_stmt 1 view .LVU833
 527:Src/RFM69.c   **** 
 3303              		.loc 1 527 19 is_stmt 0 view .LVU834
 3304 0086 184B     		ldr	r3, .L272+36
 527:Src/RFM69.c   **** 
 3305              		.loc 1 527 29 view .LVU835
 3306 0088 00F04000 		and	r0, r0, #64
 3307              	.LVL308:
 527:Src/RFM69.c   **** 
 3308              		.loc 1 527 19 view .LVU836
 3309 008c 1870     		strb	r0, [r3]
 532:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
 3310              		.loc 1 532 5 is_stmt 1 view .LVU837
 3311              	.LBB33:
 532:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 89


 3312              		.loc 1 532 10 view .LVU838
 3313              	.LVL309:
 532:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
 3314              		.loc 1 532 5 is_stmt 0 view .LVU839
 3315 008e 0025     		movs	r5, #0
 3316              	.LVL310:
 3317              	.L266:
 532:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
 3318              		.loc 1 532 27 discriminator 1 view .LVU840
 3319 0090 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 532:Src/RFM69.c   ****       data[i] = SPI_transfer8(0);
 3320              		.loc 1 532 5 discriminator 1 view .LVU841
 3321 0092 EEB2     		uxtb	r6, r5
 3322 0094 B342     		cmp	r3, r6
 3323 0096 0FD8     		bhi	.L267
 3324              	.LBE33:
 535:Src/RFM69.c   ****       data[datalen] = 0; // add null at end of string
 3325              		.loc 1 535 5 is_stmt 1 view .LVU842
 535:Src/RFM69.c   ****       data[datalen] = 0; // add null at end of string
 3326              		.loc 1 535 8 is_stmt 0 view .LVU843
 3327 0098 3C2B     		cmp	r3, #60
 536:Src/RFM69.c   ****     RFM69_unselect();
 3328              		.loc 1 536 7 is_stmt 1 view .LVU844
 536:Src/RFM69.c   ****     RFM69_unselect();
 3329              		.loc 1 536 21 is_stmt 0 view .LVU845
 3330 009a 9EBF     		ittt	ls
 3331 009c 0F4A     		ldrls	r2, .L272+24
 3332 009e 0021     		movls	r1, #0
 3333 00a0 D154     		strbls	r1, [r2, r3]
 537:Src/RFM69.c   ****     RFM69_setMode(RF69_MODE_RX);
 3334              		.loc 1 537 5 is_stmt 1 view .LVU846
 3335 00a2 FFF7FEFF 		bl	RFM69_unselect
 3336              	.LVL311:
 538:Src/RFM69.c   ****   }
 3337              		.loc 1 538 5 view .LVU847
 3338 00a6 0320     		movs	r0, #3
 3339 00a8 FFF7FEFF 		bl	RFM69_setMode
 3340              	.LVL312:
 3341              	.L261:
 538:Src/RFM69.c   ****   }
 3342              		.loc 1 538 5 is_stmt 0 view .LVU848
 3343              	.LBE35:
 540:Src/RFM69.c   **** }
 3344              		.loc 1 540 3 is_stmt 1 view .LVU849
 540:Src/RFM69.c   **** }
 3345              		.loc 1 540 10 is_stmt 0 view .LVU850
 3346 00ac 0020     		movs	r0, #0
 3347 00ae FFF7FEFF 		bl	RFM69_readRSSI
 3348              	.LVL313:
 540:Src/RFM69.c   **** }
 3349              		.loc 1 540 8 view .LVU851
 3350 00b2 0E4B     		ldr	r3, .L272+40
 3351 00b4 1880     		strh	r0, [r3]	@ movhi
 541:Src/RFM69.c   **** 
 3352              		.loc 1 541 1 view .LVU852
 3353 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3354              	.LVL314:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 90


 3355              	.L267:
 3356              	.LBB36:
 3357              	.LBB34:
 533:Src/RFM69.c   ****     }
 3358              		.loc 1 533 7 is_stmt 1 discriminator 3 view .LVU853
 533:Src/RFM69.c   ****     }
 3359              		.loc 1 533 17 is_stmt 0 discriminator 3 view .LVU854
 3360 00b8 0020     		movs	r0, #0
 3361 00ba FFF7FEFF 		bl	SPI_transfer8
 3362              	.LVL315:
 3363 00be 0135     		adds	r5, r5, #1
 3364              	.LVL316:
 533:Src/RFM69.c   ****     }
 3365              		.loc 1 533 15 discriminator 3 view .LVU855
 3366 00c0 B855     		strb	r0, [r7, r6]
 3367              	.LVL317:
 533:Src/RFM69.c   ****     }
 3368              		.loc 1 533 15 discriminator 3 view .LVU856
 3369 00c2 E5E7     		b	.L266
 3370              	.L273:
 3371              		.align	2
 3372              	.L272:
 3373 00c4 00000000 		.word	.LANCHOR3
 3374 00c8 00000000 		.word	payloadLen
 3375 00cc 00000000 		.word	targetID
 3376 00d0 00000000 		.word	.LANCHOR2
 3377 00d4 00000000 		.word	_address
 3378 00d8 00000000 		.word	datalen
 3379 00dc 00000000 		.word	data
 3380 00e0 00000000 		.word	senderID
 3381 00e4 00000000 		.word	ACK_RECEIVED
 3382 00e8 00000000 		.word	ACK_Requested
 3383 00ec 00000000 		.word	rssi
 3384              	.LBE34:
 3385              	.LBE36:
 3386              		.cfi_endproc
 3387              	.LFE144:
 3389              		.global	seconddata
 3390              		.global	firstdata
 3391              		.comm	theData,8,4
 3392              		.comm	log_buffer,150,1
 3393              		.global	_promiscuousMode
 3394              		.global	_powerLevel
 3395              		.comm	_address,1,1
 3396              		.comm	rssi,2,2
 3397              		.global	_mode
 3398              		.comm	ACK_RECEIVED,1,1
 3399              		.comm	ACK_Requested,1,1
 3400              		.comm	payloadLen,1,1
 3401              		.comm	targetID,1,1
 3402              		.comm	senderID,1,1
 3403              		.comm	datalen,1,1
 3404              		.comm	data,61,1
 3405              		.section	.bss._promiscuousMode,"aw",%nobits
 3406              		.set	.LANCHOR2,. + 0
 3409              	_promiscuousMode:
 3410 0000 00       		.space	1
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 91


 3411              		.section	.bss.firstdata,"aw",%nobits
 3412              		.align	1
 3413              		.set	.LANCHOR0,. + 0
 3416              	firstdata:
 3417 0000 0000     		.space	2
 3418              		.section	.bss.seconddata,"aw",%nobits
 3419              		.align	2
 3420              		.set	.LANCHOR1,. + 0
 3423              	seconddata:
 3424 0000 00000000 		.space	4
 3425              		.section	.data._mode,"aw"
 3426              		.set	.LANCHOR3,. + 0
 3429              	_mode:
 3430 0000 01       		.byte	1
 3431              		.section	.data._powerLevel,"aw"
 3432              		.set	.LANCHOR4,. + 0
 3435              	_powerLevel:
 3436 0000 1F       		.byte	31
 3437              		.section	.rodata.PrintByteByByte.str1.1,"aMS",%progbits,1
 3438              	.LC3:
 3439 0000 66697273 		.ascii	"first_data: %d\015\012\000"
 3439      745F6461 
 3439      74613A20 
 3439      25640D0A 
 3439      00
 3440              	.LC4:
 3441 0011 7365636F 		.ascii	"second_data: %d\015\012\000"
 3441      6E645F64 
 3441      6174613A 
 3441      2025640D 
 3441      0A00
 3442              		.section	.rodata.PrintRawBytes.str1.1,"aMS",%progbits,1
 3443              	.LC5:
 3444 0000 42797465 		.ascii	"Byte%d Value: %d\015\012\000"
 3444      25642056 
 3444      616C7565 
 3444      3A202564 
 3444      0D0A00
 3445              		.section	.rodata.PrintStruct.str1.1,"aMS",%progbits,1
 3446              	.LC0:
 3447 0000 496E7661 		.ascii	"Invalid payload received, not matching data struct!"
 3447      6C696420 
 3447      7061796C 
 3447      6F616420 
 3447      72656365 
 3448 0033 0D0A00   		.ascii	"\015\012\000"
 3449              	.LC1:
 3450 0036 206E6F64 		.ascii	" nodeId=%d\015\012\000"
 3450      6549643D 
 3450      25640D0A 
 3450      00
 3451              	.LC2:
 3452 0043 20757074 		.ascii	" uptime=%d\015\012\000"
 3452      696D653D 
 3452      25640D0A 
 3452      00
 3453              		.section	.rodata.RFM69_readAllRegs.str1.1,"aMS",%progbits,1
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 92


 3454              	.LC6:
 3455 0000 0D0A00   		.ascii	"\015\012\000"
 3456              	.LC7:
 3457 0003 41646472 		.ascii	"Address | HEX\015\012\000"
 3457      65737320 
 3457      7C204845 
 3457      580D0A00 
 3458              	.LC8:
 3459 0013 25303258 		.ascii	"%02X|%02X : \000"
 3459      7C253032 
 3459      58203A20 
 3459      00
 3460              	.LC9:
 3461 0020 436F6E74 		.ascii	"Controls the automatic Sequencer ( see section 4.2 "
 3461      726F6C73 
 3461      20746865 
 3461      20617574 
 3461      6F6D6174 
 3462 0053 290D0A53 		.ascii	")\015\012SequencerOff : \000"
 3462      65717565 
 3462      6E636572 
 3462      4F666620 
 3462      3A2000
 3463              	.LC10:
 3464 0066 31202D3E 		.ascii	"1 -> Mode is forced by the user\015\012\000"
 3464      204D6F64 
 3464      65206973 
 3464      20666F72 
 3464      63656420 
 3465              	.LC11:
 3466 0088 30202D3E 		.ascii	"0 -> Operating mode as selected with Mode bits in R"
 3466      204F7065 
 3466      72617469 
 3466      6E67206D 
 3466      6F646520 
 3467 00bb 65674F70 		.ascii	"egOpMode is automatically reached with the Sequence"
 3467      4D6F6465 
 3467      20697320 
 3467      6175746F 
 3467      6D617469 
 3468 00ee 720D0A00 		.ascii	"r\015\012\000"
 3469              	.LC12:
 3470 00f2 0D0A456E 		.ascii	"\015\012Enables Listen mode, should be enabled whil"
 3470      61626C65 
 3470      73204C69 
 3470      7374656E 
 3470      206D6F64 
 3471 011f 73742069 		.ascii	"st in Standby mode:\015\012ListenOn : \000"
 3471      6E205374 
 3471      616E6462 
 3471      79206D6F 
 3471      64653A0D 
 3472              	.LC13:
 3473 0140 31202D3E 		.ascii	"1 -> On\015\012\000"
 3473      204F6E0D 
 3473      0A00
 3474              	.LC14:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 93


 3475 014a 30202D3E 		.ascii	"0 -> Off ( see section 4.3)\015\012\000"
 3475      204F6666 
 3475      20282073 
 3475      65652073 
 3475      65637469 
 3476              	.LC15:
 3477 0168 0D0A4162 		.ascii	"\015\012Aborts Listen mode when set together with L"
 3477      6F727473 
 3477      204C6973 
 3477      74656E20 
 3477      6D6F6465 
 3478 0195 69737465 		.ascii	"istenOn=0 See section 4.3.4 for details (Always rea"
 3478      6E4F6E3D 
 3478      30205365 
 3478      65207365 
 3478      6374696F 
 3479 01c8 64732030 		.ascii	"ds 0.)\015\012\000"
 3479      2E290D0A 
 3479      00
 3480              	.LC16:
 3481 01d1 4552524F 		.ascii	"ERROR - ListenAbort should NEVER return 1 this is a"
 3481      52202D20 
 3481      4C697374 
 3481      656E4162 
 3481      6F727420 
 3482 0204 20777269 		.ascii	" write only register\015\012\000"
 3482      7465206F 
 3482      6E6C7920 
 3482      72656769 
 3482      73746572 
 3483              	.LC17:
 3484 021b 0D0A5472 		.ascii	"\015\012Transceiver's operating modes:\015\012Mode "
 3484      616E7363 
 3484      65697665 
 3484      72277320 
 3484      6F706572 
 3485 0242 3A2000   		.ascii	": \000"
 3486              	.LC18:
 3487 0245 30303020 		.ascii	"000 -> Sleep mode (SLEEP)\015\012\000"
 3487      2D3E2053 
 3487      6C656570 
 3487      206D6F64 
 3487      65202853 
 3488              	.LC19:
 3489 0261 30303120 		.ascii	"001 -> Standby mode (STDBY)\015\012\000"
 3489      2D3E2053 
 3489      74616E64 
 3489      6279206D 
 3489      6F646520 
 3490              	.LC20:
 3491 027f 44617461 		.ascii	"Data Processing mode:\015\012DataMode : \000"
 3491      2050726F 
 3491      63657373 
 3491      696E6720 
 3491      6D6F6465 
 3492              	.LC21:
 3493 02a2 3030202D 		.ascii	"00 -> Packet mode\015\012\000"
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 94


 3493      3E205061 
 3493      636B6574 
 3493      206D6F64 
 3493      650D0A00 
 3494              	.LC22:
 3495 02b6 3031202D 		.ascii	"01 -> reserved\015\012\000"
 3495      3E207265 
 3495      73657276 
 3495      65640D0A 
 3495      00
 3496              	.LC23:
 3497 02c7 3130202D 		.ascii	"10 -> Continuous mode with bit synchronizer\015\012"
 3497      3E20436F 
 3497      6E74696E 
 3497      756F7573 
 3497      206D6F64 
 3498 02f4 00       		.ascii	"\000"
 3499              	.LC24:
 3500 02f5 3131202D 		.ascii	"11 -> Continuous mode without bit synchronizer\015\012"
 3500      3E20436F 
 3500      6E74696E 
 3500      756F7573 
 3500      206D6F64 
 3501 0325 00       		.ascii	"\000"
 3502              	.LC25:
 3503 0326 0D0A4D6F 		.ascii	"\015\012Modulation scheme:\015\012Modulation Type :"
 3503      64756C61 
 3503      74696F6E 
 3503      20736368 
 3503      656D653A 
 3504 034d 2000     		.ascii	" \000"
 3505              	.LC26:
 3506 034f 3030202D 		.ascii	"00 -> FSK\015\012\000"
 3506      3E204653 
 3506      4B0D0A00 
 3507              	.LC27:
 3508 035b 3031202D 		.ascii	"01 -> OOK\015\012\000"
 3508      3E204F4F 
 3508      4B0D0A00 
 3509              	.LC28:
 3510 0367 3130202D 		.ascii	"10 -> reserved\015\012\000"
 3510      3E207265 
 3510      73657276 
 3510      65640D0A 
 3510      00
 3511              	.LC29:
 3512 0378 3131202D 		.ascii	"11 -> reserved\015\012\000"
 3512      3E207265 
 3512      73657276 
 3512      65640D0A 
 3512      00
 3513              	.LC30:
 3514 0389 0D0A4461 		.ascii	"\015\012Data shaping: \000"
 3514      74612073 
 3514      68617069 
 3514      6E673A20 
 3514      00
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 95


 3515              	.LC31:
 3516 039a 696E2046 		.ascii	"in FSK:\015\012\000"
 3516      534B3A0D 
 3516      0A00
 3517              	.LC32:
 3518 03a4 696E204F 		.ascii	"in OOK:\015\012\000"
 3518      4F4B3A0D 
 3518      0A00
 3519              	.LC33:
 3520 03ae 4D6F6475 		.ascii	"ModulationShaping : \000"
 3520      6C617469 
 3520      6F6E5368 
 3520      6170696E 
 3520      67203A20 
 3521              	.LC34:
 3522 03c3 3030202D 		.ascii	"00 -> no shaping\015\012\000"
 3522      3E206E6F 
 3522      20736861 
 3522      70696E67 
 3522      0D0A00
 3523              	.LC35:
 3524 03d6 3031202D 		.ascii	"01 -> Gaussian filter, BT = 1.0\015\012\000"
 3524      3E204761 
 3524      75737369 
 3524      616E2066 
 3524      696C7465 
 3525              	.LC36:
 3526 03f8 3130202D 		.ascii	"10 -> Gaussian filter, BT = 0.5\015\012\000"
 3526      3E204761 
 3526      75737369 
 3526      616E2066 
 3526      696C7465 
 3527              	.LC37:
 3528 041a 3131202D 		.ascii	"11 -> Gaussian filter, BT = 0.3\015\012\000"
 3528      3E204761 
 3528      75737369 
 3528      616E2066 
 3528      696C7465 
 3529              	.LC38:
 3530 043c 3031202D 		.ascii	"01 -> filtering with f(cutoff) = BR\015\012\000"
 3530      3E206669 
 3530      6C746572 
 3530      696E6720 
 3530      77697468 
 3531              	.LC39:
 3532 0462 3130202D 		.ascii	"10 -> filtering with f(cutoff) = 2*BR\015\012\000"
 3532      3E206669 
 3532      6C746572 
 3532      696E6720 
 3532      77697468 
 3533              	.LC40:
 3534 048a 4552524F 		.ascii	"ERROR - 11 is reserved\015\012\000"
 3534      52202D20 
 3534      31312069 
 3534      73207265 
 3534      73657276 
 3535              	.LC41:
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 96


 3536 04a3 42697420 		.ascii	"Bit Rate (Chip Rate when Manchester encoding is ena"
 3536      52617465 
 3536      20284368 
 3536      69702052 
 3536      61746520 
 3537 04d6 626C6564 		.ascii	"bled)\015\012BitRate : \000"
 3537      290D0A42 
 3537      69745261 
 3537      7465203A 
 3537      2000
 3538              	.LC42:
 3539 04e8 256400   		.ascii	"%d\000"
 3540              	.LC43:
 3541 04eb 46726571 		.ascii	"Frequency deviation\015\012Fdev : \000"
 3541      75656E63 
 3541      79206465 
 3541      76696174 
 3541      696F6E0D 
 3542              	.LC44:
 3543 0508 52462043 		.ascii	"RF Carrier frequency\015\012FRF : \000"
 3543      61727269 
 3543      65722066 
 3543      72657175 
 3543      656E6379 
 3544              	.LC45:
 3545 0525 52432063 		.ascii	"RC calibration control & status\015\012RcCalDone : "
 3545      616C6962 
 3545      72617469 
 3545      6F6E2063 
 3545      6F6E7472 
 3546 0552 00       		.ascii	"\000"
 3547              	.LC46:
 3548 0553 31202D3E 		.ascii	"1 -> RC calibration is over\015\012\000"
 3548      20524320 
 3548      63616C69 
 3548      62726174 
 3548      696F6E20 
 3549              	.LC47:
 3550 0571 30202D3E 		.ascii	"0 -> RC calibration is in progress\015\012\000"
 3550      20524320 
 3550      63616C69 
 3550      62726174 
 3550      696F6E20 
 3551              	.LC48:
 3552 0596 496D7072 		.ascii	"Improved AFC routine for signals with modulation in"
 3552      6F766564 
 3552      20414643 
 3552      20726F75 
 3552      74696E65 
 3553 05c9 64657820 		.ascii	"dex lower than 2.  Refer to section 3.4.16 for deta"
 3553      6C6F7765 
 3553      72207468 
 3553      616E2032 
 3553      2E202052 
 3554 05fc 696C730D 		.ascii	"ils\015\012AfcLowBetaOn : \000"
 3554      0A416663 
 3554      4C6F7742 
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 97


 3554      6574614F 
 3554      6E203A20 
 3555              	.LC49:
 3556 0611 31202D3E 		.ascii	"1 -> Improved AFC routine\015\012\000"
 3556      20496D70 
 3556      726F7665 
 3556      64204146 
 3556      4320726F 
 3557              	.LC50:
 3558 062d 30202D3E 		.ascii	"0 -> Standard AFC routine\015\012\000"
 3558      20537461 
 3558      6E646172 
 3558      64204146 
 3558      4320726F 
 3559              	.LC51:
 3560 0649 52657365 		.ascii	"Reserved\015\012\000"
 3560      72766564 
 3560      0D0A00
 3561              	.LC52:
 3562 0654 5265736F 		.ascii	"Resolution of Listen mode Idle time (calibrated RC "
 3562      6C757469 
 3562      6F6E206F 
 3562      66204C69 
 3562      7374656E 
 3563 0687 6F736329 		.ascii	"osc):\015\012ListenResolIdle : \000"
 3563      3A0D0A4C 
 3563      69737465 
 3563      6E526573 
 3563      6F6C4964 
 3564              	.LC53:
 3565 06a1 3030202D 		.ascii	"00 -> reserved\015\012\000"
 3565      3E207265 
 3565      73657276 
 3565      65640D0A 
 3565      00
 3566              	.LC54:
 3567 06b2 3031202D 		.ascii	"01 -> 64 us\015\012\000"
 3567      3E203634 
 3567      2075730D 
 3567      0A00
 3568              	.LC55:
 3569 06c0 3130202D 		.ascii	"10 -> 4.1 ms\015\012\000"
 3569      3E20342E 
 3569      31206D73 
 3569      0D0A00
 3570              	.LC56:
 3571 06cf 3131202D 		.ascii	"11 -> 262 ms\015\012\000"
 3571      3E203236 
 3571      32206D73 
 3571      0D0A00
 3572              	.LC57:
 3573 06de 0D0A5265 		.ascii	"\015\012Resolution of Listen mode Rx time (calibrat"
 3573      736F6C75 
 3573      74696F6E 
 3573      206F6620 
 3573      4C697374 
 3574 070b 65642052 		.ascii	"ed RC osc):\015\012ListenResolRx : \000"
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 98


 3574      43206F73 
 3574      63293A0D 
 3574      0A4C6973 
 3574      74656E52 
 3575              	.LC58:
 3576 0729 0D0A4372 		.ascii	"\015\012Criteria for packet acceptance in Listen mo"
 3576      69746572 
 3576      69612066 
 3576      6F722070 
 3576      61636B65 
 3577 0756 64653A0D 		.ascii	"de:\015\012ListenCriteria : \000"
 3577      0A4C6973 
 3577      74656E43 
 3577      72697465 
 3577      72696120 
 3578              	.LC59:
 3579 076d 31202D3E 		.ascii	"1 -> signal strength is above RssiThreshold and Syn"
 3579      20736967 
 3579      6E616C20 
 3579      73747265 
 3579      6E677468 
 3580 07a0 63416464 		.ascii	"cAddress matched\015\012\000"
 3580      72657373 
 3580      206D6174 
 3580      63686564 
 3580      0D0A00
 3581              	.LC60:
 3582 07b3 30202D3E 		.ascii	"0 -> signal strength is above RssiThreshold\015\012"
 3582      20736967 
 3582      6E616C20 
 3582      73747265 
 3582      6E677468 
 3583 07e0 00       		.ascii	"\000"
 3584              	.LC61:
 3585 07e1 0D0A4163 		.ascii	"\015\012Action taken after acceptance of a packet i"
 3585      74696F6E 
 3585      2074616B 
 3585      656E2061 
 3585      66746572 
 3586 080e 6E204C69 		.ascii	"n Listen mode:\015\012ListenEnd : \000"
 3586      7374656E 
 3586      206D6F64 
 3586      653A0D0A 
 3586      4C697374 
 3587              	.LC62:
 3588 082b 3030202D 		.ascii	"00 -> chip stays in Rx mode. Listen mode stops and "
 3588      3E206368 
 3588      69702073 
 3588      74617973 
 3588      20696E20 
 3589 085e 6D757374 		.ascii	"must be disabled (see section 4.3)\015\012\000"
 3589      20626520 
 3589      64697361 
 3589      626C6564 
 3589      20287365 
 3590              	.LC63:
 3591 0883 3031202D 		.ascii	"01 -> chip stays in Rx mode until PayloadReady or T"
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 99


 3591      3E206368 
 3591      69702073 
 3591      74617973 
 3591      20696E20 
 3592 08b6 696D656F 		.ascii	"imeout \015\012interrupt occurs.  It then goes to t"
 3592      7574200D 
 3592      0A696E74 
 3592      65727275 
 3592      7074206F 
 3593 08e3 6865206D 		.ascii	"he mode defined by Mode. \015\012Listen mode stops "
 3593      6F646520 
 3593      64656669 
 3593      6E656420 
 3593      6279204D 
 3594 0910 616E6420 		.ascii	"and must be disabled (see section 4.3)\015\012\000"
 3594      6D757374 
 3594      20626520 
 3594      64697361 
 3594      626C6564 
 3595              	.LC64:
 3596 0939 3130202D 		.ascii	"10 -> chip stays in Rx mode until PayloadReady or T"
 3596      3E206368 
 3596      69702073 
 3596      74617973 
 3596      20696E20 
 3597 096c 696D656F 		.ascii	"imeout occurs.  Listen mode then resumes in Idle st"
 3597      7574206F 
 3597      63637572 
 3597      732E2020 
 3597      4C697374 
 3598 099f 6174652E 		.ascii	"ate.  FIFO content is lost at next Rx wakeup.\015\012"
 3598      20204649 
 3598      464F2063 
 3598      6F6E7465 
 3598      6E742069 
 3599 09ce 00       		.ascii	"\000"
 3600              	.LC65:
 3601 09cf 3131202D 		.ascii	"11 -> Reserved\015\012\000"
 3601      3E205265 
 3601      73657276 
 3601      65640D0A 
 3601      00
 3602              		.text
 3603              	.Letext0:
 3604              		.file 2 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types
 3605              		.file 3 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 3606              		.file 4 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 3607              		.file 5 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h
 3608              		.file 6 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 3609              		.file 7 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3610              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 3611              		.file 9 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 3612              		.file 10 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 3613              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 3614              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 3615              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 3616              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 100


 3617              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 3618              		.file 16 "Inc/spi.h"
 3619              		.file 17 "Inc/usart.h"
 3620              		.file 18 "Inc/RFM69_externs.h"
 3621              		.file 19 "/usr/local/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/stdio.h"
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 101


DEFINED SYMBOLS
                            *ABS*:0000000000000000 RFM69.c
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:18     .text.PrintStruct:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:26     .text.PrintStruct:0000000000000000 PrintStruct
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:92     .text.PrintStruct:0000000000000040 $d
                            *COM*:0000000000000001 datalen
                            *COM*:000000000000003d data
                            *COM*:0000000000000008 theData
                            *COM*:0000000000000096 log_buffer
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:103    .text.PrintByteByByte:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:110    .text.PrintByteByByte:0000000000000000 PrintByteByByte
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:192    .text.PrintByteByByte:0000000000000050 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:202    .text.PrintRawBytes:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:209    .text.PrintRawBytes:0000000000000000 PrintRawBytes
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:272    .text.PrintRawBytes:0000000000000034 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:281    .text.RFM69_ACKRequested:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:288    .text.RFM69_ACKRequested:0000000000000000 RFM69_ACKRequested
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:314    .text.RFM69_ACKRequested:0000000000000014 $d
                            *COM*:0000000000000001 ACK_Requested
                            *COM*:0000000000000001 targetID
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:320    .text.RFM69_promiscuous:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:327    .text.RFM69_promiscuous:0000000000000000 RFM69_promiscuous
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:344    .text.RFM69_promiscuous:0000000000000008 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:349    .text.RFM69_select:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:356    .text.RFM69_select:0000000000000000 RFM69_select
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:387    .text.RFM69_unselect:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:394    .text.RFM69_unselect:0000000000000000 RFM69_unselect
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:426    .text.RFM69_readAllRegs:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:433    .text.RFM69_readAllRegs:0000000000000000 RFM69_readAllRegs
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:528    .text.RFM69_readAllRegs:000000000000005c $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:541    .text.RFM69_readAllRegs:0000000000000076 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1114   .text.RFM69_readAllRegs:0000000000000294 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1181   .text.RFM69_readReg:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1188   .text.RFM69_readReg:0000000000000000 RFM69_readReg
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1234   .text.RFM69_getFrequency:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1241   .text.RFM69_getFrequency:0000000000000000 RFM69_getFrequency
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1287   .text.RFM69_getFrequency:0000000000000038 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1293   .text.RFM69_writeReg:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1300   .text.RFM69_writeReg:0000000000000000 RFM69_writeReg
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1346   .text.RFM69_setMode:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1353   .text.RFM69_setMode:0000000000000000 RFM69_setMode
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1383   .text.RFM69_setMode:0000000000000014 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1485   .text.RFM69_setMode:0000000000000080 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1490   .text.RFM69_sleep:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1497   .text.RFM69_sleep:0000000000000000 RFM69_sleep
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1513   .text.RFM69_setFrequency:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1520   .text.RFM69_setFrequency:0000000000000000 RFM69_setFrequency
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1611   .text.RFM69_setFrequency:0000000000000058 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1618   .text.RFM69_setAddress:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1625   .text.RFM69_setAddress:0000000000000000 RFM69_setAddress
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1650   .text.RFM69_setAddress:000000000000000c $d
                            *COM*:0000000000000001 _address
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1655   .text.RFM69_setNetwork:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1662   .text.RFM69_setNetwork:0000000000000000 RFM69_setNetwork
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1702   .text.RFM69_setPowerLevel:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1709   .text.RFM69_setPowerLevel:0000000000000000 RFM69_setPowerLevel
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1757   .text.RFM69_setPowerLevel:0000000000000024 $d
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 102


/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1762   .text.RFM69_receiveBegin:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1769   .text.RFM69_receiveBegin:0000000000000000 RFM69_receiveBegin
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1853   .text.RFM69_receiveBegin:0000000000000054 $d
                            *COM*:0000000000000001 senderID
                            *COM*:0000000000000001 payloadLen
                            *COM*:0000000000000001 ACK_RECEIVED
                            *COM*:0000000000000002 rssi
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1864   .text.RFM69_receiveDone:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1871   .text.RFM69_receiveDone:0000000000000000 RFM69_receiveDone
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1929   .text.RFM69_receiveDone:000000000000002c $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1935   .text.RFM69_ACKReceived:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1942   .text.RFM69_ACKReceived:0000000000000000 RFM69_ACKReceived
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2002   .text.RFM69_ACKReceived:0000000000000028 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2010   .text.RFM69_readRSSI:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2017   .text.RFM69_readRSSI:0000000000000000 RFM69_readRSSI
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2071   .text.RFM69_canSend:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2078   .text.RFM69_canSend:0000000000000000 RFM69_canSend
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2131   .text.RFM69_canSend:0000000000000028 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2139   .text.RFM69_setHighPower:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2146   .text.RFM69_setHighPower:0000000000000000 RFM69_setHighPower
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2185   .text.RFM69_setHighPower:000000000000001c $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2190   .text.RFM69_setHighPowerRegs:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2197   .text.RFM69_setHighPowerRegs:0000000000000000 RFM69_setHighPowerRegs
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2240   .text.RFM69_readTemperature:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2247   .text.RFM69_readTemperature:0000000000000000 RFM69_readTemperature
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2299   .text.RFM69_rcCalibration:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2306   .text.RFM69_rcCalibration:0000000000000000 RFM69_rcCalibration
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2340   .text.RFM69_sendFrame:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2346   .text.RFM69_sendFrame:0000000000000000 RFM69_sendFrame
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2508   .text.RFM69_sendFrame:00000000000000a0 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2514   .text.RFM69_send:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2521   .text.RFM69_send:0000000000000000 RFM69_send
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2591   .text.RFM69_sendWithRetry:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2598   .text.RFM69_sendWithRetry:0000000000000000 RFM69_sendWithRetry
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2687   .text.RFM69_sendACK:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2694   .text.RFM69_sendACK:0000000000000000 RFM69_sendACK
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2799   .text.RFM69_sendACK:0000000000000060 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2806   .text.RFM69_encrypt:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2813   .text.RFM69_encrypt:0000000000000000 RFM69_encrypt
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2898   .text.RFM69_initialize:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:2905   .text.RFM69_initialize:0000000000000000 RFM69_initialize
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3135   .text.RFM69_initialize:0000000000000124 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3149   .text.RFM69_interruptHandler:0000000000000000 $t
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3156   .text.RFM69_interruptHandler:0000000000000000 RFM69_interruptHandler
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3373   .text.RFM69_interruptHandler:00000000000000c4 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3423   .bss.seconddata:0000000000000000 seconddata
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3416   .bss.firstdata:0000000000000000 firstdata
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3409   .bss._promiscuousMode:0000000000000000 _promiscuousMode
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3435   .data._powerLevel:0000000000000000 _powerLevel
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3429   .data._mode:0000000000000000 _mode
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3410   .bss._promiscuousMode:0000000000000000 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3412   .bss.firstdata:0000000000000000 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:3419   .bss.seconddata:0000000000000000 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1388   .text.RFM69_setMode:0000000000000019 $d
/var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s:1388   .text.RFM69_setMode:000000000000001a $t

UNDEFINED SYMBOLS
ARM GAS  /var/folders/8c/gyvcglfx7f97kbqb2h83mm_r0000gn/T//ccktM0mu.s 			page 103


debug_printf
sprintf
noInterrupts
RFM69_SetCSPin
interrupts
__aeabi_uldivmod
SerialPrint
SPI_transfer8
__aeabi_ui2d
__aeabi_dmul
__aeabi_d2uiz
__aeabi_ddiv
Timeout_SetTimeout1
RFM69_ReadDIO0Pin
Timeout_IsTimeout1
